
Final. DIY Drone Course Finished.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000734  0800fa80  0800fa80  0001fa80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101b4  080101b4  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  080101b4  080101b4  000201b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080101bc  080101bc  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080101bc  080101bc  000201bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080101c0  080101c0  000201c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080101c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  200001e8  080103a8  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006d4  080103a8  000306d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ade2  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000044c3  00000000  00000000  0004aff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001740  00000000  00000000  0004f4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001550  00000000  00000000  00050c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000267e7  00000000  00000000  00052150  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001553a  00000000  00000000  00078937  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d37ea  00000000  00000000  0008de71  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016165b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ff8  00000000  00000000  001616d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fa64 	.word	0x0800fa64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800fa64 	.word	0x0800fa64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <HAL_Init+0x40>)
 8000f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_Init+0x40>)
 8000f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_Init+0x40>)
 8000f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 fd41 	bl	80019f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 f808 	bl	8000f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f00a f95a 	bl	800b234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023c00 	.word	0x40023c00

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x54>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x58>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fd59 	bl	8001a62 <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00e      	b.n	8000fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d80a      	bhi.n	8000fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f000 fd21 	bl	8001a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fcc:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <HAL_InitTick+0x5c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000000c 	.word	0x2000000c
 8000fe4:	20000004 	.word	0x20000004
 8000fe8:	20000000 	.word	0x20000000

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000004 	.word	0x20000004
 8001010:	20000230 	.word	0x20000230

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000230 	.word	0x20000230

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_Delay+0x40>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000004 	.word	0x20000004

08001070 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e033      	b.n	80010ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	2b00      	cmp	r3, #0
 800108c:	d109      	bne.n	80010a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f007 fb8a 	bl	80087a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d118      	bne.n	80010e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010b6:	f023 0302 	bic.w	r3, r3, #2
 80010ba:	f043 0202 	orr.w	r2, r3, #2
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fa4a 	bl	800155c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f023 0303 	bic.w	r3, r3, #3
 80010d6:	f043 0201 	orr.w	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
 80010de:	e001      	b.n	80010e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800110e:	2b01      	cmp	r3, #1
 8001110:	d101      	bne.n	8001116 <HAL_ADC_Start_DMA+0x1e>
 8001112:	2302      	movs	r3, #2
 8001114:	e0cc      	b.n	80012b0 <HAL_ADC_Start_DMA+0x1b8>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2201      	movs	r2, #1
 800111a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b01      	cmp	r3, #1
 800112a:	d018      	beq.n	800115e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0201 	orr.w	r2, r2, #1
 800113a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800113c:	4b5e      	ldr	r3, [pc, #376]	; (80012b8 <HAL_ADC_Start_DMA+0x1c0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a5e      	ldr	r2, [pc, #376]	; (80012bc <HAL_ADC_Start_DMA+0x1c4>)
 8001142:	fba2 2303 	umull	r2, r3, r2, r3
 8001146:	0c9a      	lsrs	r2, r3, #18
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001150:	e002      	b.n	8001158 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	3b01      	subs	r3, #1
 8001156:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1f9      	bne.n	8001152 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b01      	cmp	r3, #1
 800116a:	f040 80a0 	bne.w	80012ae <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001176:	f023 0301 	bic.w	r3, r3, #1
 800117a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800118c:	2b00      	cmp	r3, #0
 800118e:	d007      	beq.n	80011a0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001198:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ac:	d106      	bne.n	80011bc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f023 0206 	bic.w	r2, r3, #6
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	645a      	str	r2, [r3, #68]	; 0x44
 80011ba:	e002      	b.n	80011c2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011ca:	4b3d      	ldr	r3, [pc, #244]	; (80012c0 <HAL_ADC_Start_DMA+0x1c8>)
 80011cc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011d2:	4a3c      	ldr	r2, [pc, #240]	; (80012c4 <HAL_ADC_Start_DMA+0x1cc>)
 80011d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011da:	4a3b      	ldr	r2, [pc, #236]	; (80012c8 <HAL_ADC_Start_DMA+0x1d0>)
 80011dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e2:	4a3a      	ldr	r2, [pc, #232]	; (80012cc <HAL_ADC_Start_DMA+0x1d4>)
 80011e4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011fe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800120e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	334c      	adds	r3, #76	; 0x4c
 800121a:	4619      	mov	r1, r3
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f000 fcda 	bl	8001bd8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 031f 	and.w	r3, r3, #31
 800122c:	2b00      	cmp	r3, #0
 800122e:	d12a      	bne.n	8001286 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a26      	ldr	r2, [pc, #152]	; (80012d0 <HAL_ADC_Start_DMA+0x1d8>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d015      	beq.n	8001266 <HAL_ADC_Start_DMA+0x16e>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a25      	ldr	r2, [pc, #148]	; (80012d4 <HAL_ADC_Start_DMA+0x1dc>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d105      	bne.n	8001250 <HAL_ADC_Start_DMA+0x158>
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <HAL_ADC_Start_DMA+0x1c8>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 031f 	and.w	r3, r3, #31
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00a      	beq.n	8001266 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a20      	ldr	r2, [pc, #128]	; (80012d8 <HAL_ADC_Start_DMA+0x1e0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d129      	bne.n	80012ae <HAL_ADC_Start_DMA+0x1b6>
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_ADC_Start_DMA+0x1c8>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 031f 	and.w	r3, r3, #31
 8001262:	2b0f      	cmp	r3, #15
 8001264:	d823      	bhi.n	80012ae <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d11c      	bne.n	80012ae <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	e013      	b.n	80012ae <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a11      	ldr	r2, [pc, #68]	; (80012d0 <HAL_ADC_Start_DMA+0x1d8>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d10e      	bne.n	80012ae <HAL_ADC_Start_DMA+0x1b6>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012ac:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000000c 	.word	0x2000000c
 80012bc:	431bde83 	.word	0x431bde83
 80012c0:	40012300 	.word	0x40012300
 80012c4:	08001755 	.word	0x08001755
 80012c8:	0800180f 	.word	0x0800180f
 80012cc:	0800182b 	.word	0x0800182b
 80012d0:	40012000 	.word	0x40012000
 80012d4:	40012100 	.word	0x40012100
 80012d8:	40012200 	.word	0x40012200

080012dc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800132c:	2b01      	cmp	r3, #1
 800132e:	d101      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x1c>
 8001330:	2302      	movs	r3, #2
 8001332:	e105      	b.n	8001540 <HAL_ADC_ConfigChannel+0x228>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b09      	cmp	r3, #9
 8001342:	d925      	bls.n	8001390 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68d9      	ldr	r1, [r3, #12]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	461a      	mov	r2, r3
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	3b1e      	subs	r3, #30
 800135a:	2207      	movs	r2, #7
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43da      	mvns	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	400a      	ands	r2, r1
 8001368:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68d9      	ldr	r1, [r3, #12]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	b29b      	uxth	r3, r3
 800137a:	4618      	mov	r0, r3
 800137c:	4603      	mov	r3, r0
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4403      	add	r3, r0
 8001382:	3b1e      	subs	r3, #30
 8001384:	409a      	lsls	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	e022      	b.n	80013d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6919      	ldr	r1, [r3, #16]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	2207      	movs	r2, #7
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	400a      	ands	r2, r1
 80013b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6919      	ldr	r1, [r3, #16]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	4603      	mov	r3, r0
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4403      	add	r3, r0
 80013cc:	409a      	lsls	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d824      	bhi.n	8001428 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	3b05      	subs	r3, #5
 80013f0:	221f      	movs	r2, #31
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	400a      	ands	r2, r1
 80013fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	b29b      	uxth	r3, r3
 800140c:	4618      	mov	r0, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	3b05      	subs	r3, #5
 800141a:	fa00 f203 	lsl.w	r2, r0, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	635a      	str	r2, [r3, #52]	; 0x34
 8001426:	e04c      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b0c      	cmp	r3, #12
 800142e:	d824      	bhi.n	800147a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	3b23      	subs	r3, #35	; 0x23
 8001442:	221f      	movs	r2, #31
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43da      	mvns	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	400a      	ands	r2, r1
 8001450:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	b29b      	uxth	r3, r3
 800145e:	4618      	mov	r0, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	3b23      	subs	r3, #35	; 0x23
 800146c:	fa00 f203 	lsl.w	r2, r0, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	631a      	str	r2, [r3, #48]	; 0x30
 8001478:	e023      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	3b41      	subs	r3, #65	; 0x41
 800148c:	221f      	movs	r2, #31
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	400a      	ands	r2, r1
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	3b41      	subs	r3, #65	; 0x41
 80014b6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014c2:	4b22      	ldr	r3, [pc, #136]	; (800154c <HAL_ADC_ConfigChannel+0x234>)
 80014c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a21      	ldr	r2, [pc, #132]	; (8001550 <HAL_ADC_ConfigChannel+0x238>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d109      	bne.n	80014e4 <HAL_ADC_ConfigChannel+0x1cc>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b12      	cmp	r3, #18
 80014d6:	d105      	bne.n	80014e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a19      	ldr	r2, [pc, #100]	; (8001550 <HAL_ADC_ConfigChannel+0x238>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d123      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x21e>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b10      	cmp	r3, #16
 80014f4:	d003      	beq.n	80014fe <HAL_ADC_ConfigChannel+0x1e6>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b11      	cmp	r3, #17
 80014fc:	d11b      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b10      	cmp	r3, #16
 8001510:	d111      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <HAL_ADC_ConfigChannel+0x23c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a10      	ldr	r2, [pc, #64]	; (8001558 <HAL_ADC_ConfigChannel+0x240>)
 8001518:	fba2 2303 	umull	r2, r3, r2, r3
 800151c:	0c9a      	lsrs	r2, r3, #18
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001528:	e002      	b.n	8001530 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3b01      	subs	r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f9      	bne.n	800152a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	40012300 	.word	0x40012300
 8001550:	40012000 	.word	0x40012000
 8001554:	2000000c 	.word	0x2000000c
 8001558:	431bde83 	.word	0x431bde83

0800155c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001564:	4b79      	ldr	r3, [pc, #484]	; (800174c <ADC_Init+0x1f0>)
 8001566:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	431a      	orrs	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001590:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6859      	ldr	r1, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	021a      	lsls	r2, r3, #8
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6859      	ldr	r1, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6899      	ldr	r1, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	4a58      	ldr	r2, [pc, #352]	; (8001750 <ADC_Init+0x1f4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d022      	beq.n	800163a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001602:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6899      	ldr	r1, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001624:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6899      	ldr	r1, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	e00f      	b.n	800165a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001648:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001658:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0202 	bic.w	r2, r2, #2
 8001668:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6899      	ldr	r1, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7e1b      	ldrb	r3, [r3, #24]
 8001674:	005a      	lsls	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d01b      	beq.n	80016c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001696:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6859      	ldr	r1, [r3, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	3b01      	subs	r3, #1
 80016b4:	035a      	lsls	r2, r3, #13
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	e007      	b.n	80016d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	051a      	lsls	r2, r3, #20
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001704:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6899      	ldr	r1, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001712:	025a      	lsls	r2, r3, #9
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800172a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6899      	ldr	r1, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	029a      	lsls	r2, r3, #10
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	609a      	str	r2, [r3, #8]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	40012300 	.word	0x40012300
 8001750:	0f000001 	.word	0x0f000001

08001754 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001760:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800176a:	2b00      	cmp	r3, #0
 800176c:	d13c      	bne.n	80017e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d12b      	bne.n	80017e0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800178c:	2b00      	cmp	r3, #0
 800178e:	d127      	bne.n	80017e0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800179a:	2b00      	cmp	r3, #0
 800179c:	d006      	beq.n	80017ac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d119      	bne.n	80017e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0220 	bic.w	r2, r2, #32
 80017ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d105      	bne.n	80017e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f043 0201 	orr.w	r2, r3, #1
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f7ff fd7b 	bl	80012dc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017e6:	e00e      	b.n	8001806 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f7ff fd85 	bl	8001304 <HAL_ADC_ErrorCallback>
}
 80017fa:	e004      	b.n	8001806 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f7ff fd67 	bl	80012f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001836:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2240      	movs	r2, #64	; 0x40
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f043 0204 	orr.w	r2, r3, #4
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f7ff fd5a 	bl	8001304 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188a:	4a04      	ldr	r2, [pc, #16]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	db0b      	blt.n	80018e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f003 021f 	and.w	r2, r3, #31
 80018d4:	4907      	ldr	r1, [pc, #28]	; (80018f4 <__NVIC_EnableIRQ+0x38>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	2001      	movs	r0, #1
 80018de:	fa00 f202 	lsl.w	r2, r0, r2
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000e100 	.word	0xe000e100

080018f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db0a      	blt.n	8001922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	490c      	ldr	r1, [pc, #48]	; (8001944 <__NVIC_SetPriority+0x4c>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	440b      	add	r3, r1
 800191c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001920:	e00a      	b.n	8001938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4908      	ldr	r1, [pc, #32]	; (8001948 <__NVIC_SetPriority+0x50>)
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	3b04      	subs	r3, #4
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	440b      	add	r3, r1
 8001936:	761a      	strb	r2, [r3, #24]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000e100 	.word	0xe000e100
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f1c3 0307 	rsb	r3, r3, #7
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3304      	adds	r3, #4
 8001972:	2b06      	cmp	r3, #6
 8001974:	d902      	bls.n	800197c <NVIC_EncodePriority+0x30>
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3b03      	subs	r3, #3
 800197a:	e000      	b.n	800197e <NVIC_EncodePriority+0x32>
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	f04f 32ff 	mov.w	r2, #4294967295
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	401a      	ands	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001994:	f04f 31ff 	mov.w	r1, #4294967295
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	43d9      	mvns	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	4313      	orrs	r3, r2
         );
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3724      	adds	r7, #36	; 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c4:	d301      	bcc.n	80019ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00f      	b.n	80019ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <SysTick_Config+0x40>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d2:	210f      	movs	r1, #15
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f7ff ff8e 	bl	80018f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <SysTick_Config+0x40>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e2:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <SysTick_Config+0x40>)
 80019e4:	2207      	movs	r2, #7
 80019e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	e000e010 	.word	0xe000e010

080019f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff29 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a20:	f7ff ff3e 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 8001a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	6978      	ldr	r0, [r7, #20]
 8001a2c:	f7ff ff8e 	bl	800194c <NVIC_EncodePriority>
 8001a30:	4602      	mov	r2, r0
 8001a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff5d 	bl	80018f8 <__NVIC_SetPriority>
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff31 	bl	80018bc <__NVIC_EnableIRQ>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ffa2 	bl	80019b4 <SysTick_Config>
 8001a70:	4603      	mov	r3, r0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff fac4 	bl	8001014 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e099      	b.n	8001bcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab8:	e00f      	b.n	8001ada <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aba:	f7ff faab 	bl	8001014 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d908      	bls.n	8001ada <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2220      	movs	r2, #32
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e078      	b.n	8001bcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1e8      	bne.n	8001aba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <HAL_DMA_Init+0x158>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d107      	bne.n	8001b44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f023 0307 	bic.w	r3, r3, #7
 8001b5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d117      	bne.n	8001b9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00e      	beq.n	8001b9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 fa91 	bl	80020a8 <DMA_CheckFifoParam>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2240      	movs	r2, #64	; 0x40
 8001b90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e016      	b.n	8001bcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fa48 	bl	800203c <DMA_CalcBaseAndBitshift>
 8001bac:	4603      	mov	r3, r0
 8001bae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb4:	223f      	movs	r2, #63	; 0x3f
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	f010803f 	.word	0xf010803f

08001bd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_DMA_Start_IT+0x26>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e040      	b.n	8001c80 <HAL_DMA_Start_IT+0xa8>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d12f      	bne.n	8001c72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2202      	movs	r2, #2
 8001c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 f9da 	bl	8001fe0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c30:	223f      	movs	r2, #63	; 0x3f
 8001c32:	409a      	lsls	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0216 	orr.w	r2, r2, #22
 8001c46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d007      	beq.n	8001c60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0208 	orr.w	r2, r2, #8
 8001c5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	e005      	b.n	8001c7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d004      	beq.n	8001ca6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2280      	movs	r2, #128	; 0x80
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00c      	b.n	8001cc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2205      	movs	r2, #5
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cd8:	4b92      	ldr	r3, [pc, #584]	; (8001f24 <HAL_DMA_IRQHandler+0x258>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a92      	ldr	r2, [pc, #584]	; (8001f28 <HAL_DMA_IRQHandler+0x25c>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	0a9b      	lsrs	r3, r3, #10
 8001ce4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d01a      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d013      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0204 	bic.w	r2, r2, #4
 8001d1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	2208      	movs	r2, #8
 8001d26:	409a      	lsls	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d30:	f043 0201 	orr.w	r2, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d012      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00b      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d66:	f043 0202 	orr.w	r2, r3, #2
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d72:	2204      	movs	r2, #4
 8001d74:	409a      	lsls	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d012      	beq.n	8001da4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00b      	beq.n	8001da4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d90:	2204      	movs	r2, #4
 8001d92:	409a      	lsls	r2, r3
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9c:	f043 0204 	orr.w	r2, r3, #4
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	2210      	movs	r2, #16
 8001daa:	409a      	lsls	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d043      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d03c      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc6:	2210      	movs	r2, #16
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d018      	beq.n	8001e0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d108      	bne.n	8001dfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d024      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	4798      	blx	r3
 8001dfa:	e01f      	b.n	8001e3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d01b      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	4798      	blx	r3
 8001e0c:	e016      	b.n	8001e3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0208 	bic.w	r2, r2, #8
 8001e2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e40:	2220      	movs	r2, #32
 8001e42:	409a      	lsls	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 808e 	beq.w	8001f6a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 8086 	beq.w	8001f6a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	2220      	movs	r2, #32
 8001e64:	409a      	lsls	r2, r3
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b05      	cmp	r3, #5
 8001e74:	d136      	bne.n	8001ee4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0216 	bic.w	r2, r2, #22
 8001e84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d103      	bne.n	8001ea6 <HAL_DMA_IRQHandler+0x1da>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d007      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0208 	bic.w	r2, r2, #8
 8001eb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eba:	223f      	movs	r2, #63	; 0x3f
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d07d      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	4798      	blx	r3
        }
        return;
 8001ee2:	e078      	b.n	8001fd6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d01c      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d108      	bne.n	8001f12 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d030      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	4798      	blx	r3
 8001f10:	e02b      	b.n	8001f6a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d027      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	4798      	blx	r3
 8001f22:	e022      	b.n	8001f6a <HAL_DMA_IRQHandler+0x29e>
 8001f24:	2000000c 	.word	0x2000000c
 8001f28:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10f      	bne.n	8001f5a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0210 	bic.w	r2, r2, #16
 8001f48:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d032      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d022      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2205      	movs	r2, #5
 8001f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0201 	bic.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d307      	bcc.n	8001fb2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f2      	bne.n	8001f96 <HAL_DMA_IRQHandler+0x2ca>
 8001fb0:	e000      	b.n	8001fb4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001fb2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
 8001fd4:	e000      	b.n	8001fd8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001fd6:	bf00      	nop
    }
  }
}
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop

08001fe0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ffc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b40      	cmp	r3, #64	; 0x40
 800200c:	d108      	bne.n	8002020 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800201e:	e007      	b.n	8002030 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	60da      	str	r2, [r3, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	3b10      	subs	r3, #16
 800204c:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <DMA_CalcBaseAndBitshift+0x64>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002056:	4a13      	ldr	r2, [pc, #76]	; (80020a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4413      	add	r3, r2
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d909      	bls.n	800207e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002072:	f023 0303 	bic.w	r3, r3, #3
 8002076:	1d1a      	adds	r2, r3, #4
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	659a      	str	r2, [r3, #88]	; 0x58
 800207c:	e007      	b.n	800208e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002086:	f023 0303 	bic.w	r3, r3, #3
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	aaaaaaab 	.word	0xaaaaaaab
 80020a4:	0800fe28 	.word	0x0800fe28

080020a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d11f      	bne.n	8002102 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d855      	bhi.n	8002174 <DMA_CheckFifoParam+0xcc>
 80020c8:	a201      	add	r2, pc, #4	; (adr r2, 80020d0 <DMA_CheckFifoParam+0x28>)
 80020ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ce:	bf00      	nop
 80020d0:	080020e1 	.word	0x080020e1
 80020d4:	080020f3 	.word	0x080020f3
 80020d8:	080020e1 	.word	0x080020e1
 80020dc:	08002175 	.word	0x08002175
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d045      	beq.n	8002178 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020f0:	e042      	b.n	8002178 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020fa:	d13f      	bne.n	800217c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002100:	e03c      	b.n	800217c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800210a:	d121      	bne.n	8002150 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d836      	bhi.n	8002180 <DMA_CheckFifoParam+0xd8>
 8002112:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <DMA_CheckFifoParam+0x70>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	08002129 	.word	0x08002129
 800211c:	0800212f 	.word	0x0800212f
 8002120:	08002129 	.word	0x08002129
 8002124:	08002141 	.word	0x08002141
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
      break;
 800212c:	e02f      	b.n	800218e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d024      	beq.n	8002184 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800213e:	e021      	b.n	8002184 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002148:	d11e      	bne.n	8002188 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800214e:	e01b      	b.n	8002188 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d902      	bls.n	800215c <DMA_CheckFifoParam+0xb4>
 8002156:	2b03      	cmp	r3, #3
 8002158:	d003      	beq.n	8002162 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800215a:	e018      	b.n	800218e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
      break;
 8002160:	e015      	b.n	800218e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00e      	beq.n	800218c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
      break;
 8002172:	e00b      	b.n	800218c <DMA_CheckFifoParam+0xe4>
      break;
 8002174:	bf00      	nop
 8002176:	e00a      	b.n	800218e <DMA_CheckFifoParam+0xe6>
      break;
 8002178:	bf00      	nop
 800217a:	e008      	b.n	800218e <DMA_CheckFifoParam+0xe6>
      break;
 800217c:	bf00      	nop
 800217e:	e006      	b.n	800218e <DMA_CheckFifoParam+0xe6>
      break;
 8002180:	bf00      	nop
 8002182:	e004      	b.n	800218e <DMA_CheckFifoParam+0xe6>
      break;
 8002184:	bf00      	nop
 8002186:	e002      	b.n	800218e <DMA_CheckFifoParam+0xe6>
      break;   
 8002188:	bf00      	nop
 800218a:	e000      	b.n	800218e <DMA_CheckFifoParam+0xe6>
      break;
 800218c:	bf00      	nop
    }
  } 
  
  return status; 
 800218e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	e16b      	b.n	8002490 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b8:	2201      	movs	r2, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f040 815a 	bne.w	800248a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d00b      	beq.n	80021f6 <HAL_GPIO_Init+0x5a>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d007      	beq.n	80021f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021ea:	2b11      	cmp	r3, #17
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b12      	cmp	r3, #18
 80021f4:	d130      	bne.n	8002258 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	2203      	movs	r2, #3
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800222c:	2201      	movs	r2, #1
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f003 0201 	and.w	r2, r3, #1
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0xfc>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b12      	cmp	r3, #18
 8002296:	d123      	bne.n	80022e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3208      	adds	r2, #8
 80022a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	220f      	movs	r2, #15
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	08da      	lsrs	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3208      	adds	r2, #8
 80022da:	69b9      	ldr	r1, [r7, #24]
 80022dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0203 	and.w	r2, r3, #3
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80b4 	beq.w	800248a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	4b5f      	ldr	r3, [pc, #380]	; (80024a4 <HAL_GPIO_Init+0x308>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a5e      	ldr	r2, [pc, #376]	; (80024a4 <HAL_GPIO_Init+0x308>)
 800232c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b5c      	ldr	r3, [pc, #368]	; (80024a4 <HAL_GPIO_Init+0x308>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800233e:	4a5a      	ldr	r2, [pc, #360]	; (80024a8 <HAL_GPIO_Init+0x30c>)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3302      	adds	r3, #2
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a51      	ldr	r2, [pc, #324]	; (80024ac <HAL_GPIO_Init+0x310>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d02b      	beq.n	80023c2 <HAL_GPIO_Init+0x226>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a50      	ldr	r2, [pc, #320]	; (80024b0 <HAL_GPIO_Init+0x314>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d025      	beq.n	80023be <HAL_GPIO_Init+0x222>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4f      	ldr	r2, [pc, #316]	; (80024b4 <HAL_GPIO_Init+0x318>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01f      	beq.n	80023ba <HAL_GPIO_Init+0x21e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4e      	ldr	r2, [pc, #312]	; (80024b8 <HAL_GPIO_Init+0x31c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d019      	beq.n	80023b6 <HAL_GPIO_Init+0x21a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4d      	ldr	r2, [pc, #308]	; (80024bc <HAL_GPIO_Init+0x320>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_GPIO_Init+0x216>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4c      	ldr	r2, [pc, #304]	; (80024c0 <HAL_GPIO_Init+0x324>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00d      	beq.n	80023ae <HAL_GPIO_Init+0x212>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4b      	ldr	r2, [pc, #300]	; (80024c4 <HAL_GPIO_Init+0x328>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <HAL_GPIO_Init+0x20e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4a      	ldr	r2, [pc, #296]	; (80024c8 <HAL_GPIO_Init+0x32c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_GPIO_Init+0x20a>
 80023a2:	2307      	movs	r3, #7
 80023a4:	e00e      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023a6:	2308      	movs	r3, #8
 80023a8:	e00c      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023aa:	2306      	movs	r3, #6
 80023ac:	e00a      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023ae:	2305      	movs	r3, #5
 80023b0:	e008      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023b2:	2304      	movs	r3, #4
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023b6:	2303      	movs	r3, #3
 80023b8:	e004      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e002      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <HAL_GPIO_Init+0x228>
 80023c2:	2300      	movs	r3, #0
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	f002 0203 	and.w	r2, r2, #3
 80023ca:	0092      	lsls	r2, r2, #2
 80023cc:	4093      	lsls	r3, r2
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d4:	4934      	ldr	r1, [pc, #208]	; (80024a8 <HAL_GPIO_Init+0x30c>)
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e2:	4b3a      	ldr	r3, [pc, #232]	; (80024cc <HAL_GPIO_Init+0x330>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002406:	4a31      	ldr	r2, [pc, #196]	; (80024cc <HAL_GPIO_Init+0x330>)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800240c:	4b2f      	ldr	r3, [pc, #188]	; (80024cc <HAL_GPIO_Init+0x330>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002430:	4a26      	ldr	r2, [pc, #152]	; (80024cc <HAL_GPIO_Init+0x330>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002436:	4b25      	ldr	r3, [pc, #148]	; (80024cc <HAL_GPIO_Init+0x330>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800245a:	4a1c      	ldr	r2, [pc, #112]	; (80024cc <HAL_GPIO_Init+0x330>)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002460:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <HAL_GPIO_Init+0x330>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002484:	4a11      	ldr	r2, [pc, #68]	; (80024cc <HAL_GPIO_Init+0x330>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3301      	adds	r3, #1
 800248e:	61fb      	str	r3, [r7, #28]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b0f      	cmp	r3, #15
 8002494:	f67f ae90 	bls.w	80021b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002498:	bf00      	nop
 800249a:	3724      	adds	r7, #36	; 0x24
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40013800 	.word	0x40013800
 80024ac:	40020000 	.word	0x40020000
 80024b0:	40020400 	.word	0x40020400
 80024b4:	40020800 	.word	0x40020800
 80024b8:	40020c00 	.word	0x40020c00
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40021400 	.word	0x40021400
 80024c4:	40021800 	.word	0x40021800
 80024c8:	40021c00 	.word	0x40021c00
 80024cc:	40013c00 	.word	0x40013c00

080024d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e11f      	b.n	8002722 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d106      	bne.n	80024fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f006 fad0 	bl	8008a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2224      	movs	r2, #36	; 0x24
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0201 	bic.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002522:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002532:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002534:	f001 fbb6 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 8002538:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4a7b      	ldr	r2, [pc, #492]	; (800272c <HAL_I2C_Init+0x25c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d807      	bhi.n	8002554 <HAL_I2C_Init+0x84>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4a7a      	ldr	r2, [pc, #488]	; (8002730 <HAL_I2C_Init+0x260>)
 8002548:	4293      	cmp	r3, r2
 800254a:	bf94      	ite	ls
 800254c:	2301      	movls	r3, #1
 800254e:	2300      	movhi	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	e006      	b.n	8002562 <HAL_I2C_Init+0x92>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4a77      	ldr	r2, [pc, #476]	; (8002734 <HAL_I2C_Init+0x264>)
 8002558:	4293      	cmp	r3, r2
 800255a:	bf94      	ite	ls
 800255c:	2301      	movls	r3, #1
 800255e:	2300      	movhi	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e0db      	b.n	8002722 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4a72      	ldr	r2, [pc, #456]	; (8002738 <HAL_I2C_Init+0x268>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	0c9b      	lsrs	r3, r3, #18
 8002574:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	430a      	orrs	r2, r1
 8002588:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4a64      	ldr	r2, [pc, #400]	; (800272c <HAL_I2C_Init+0x25c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d802      	bhi.n	80025a4 <HAL_I2C_Init+0xd4>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	3301      	adds	r3, #1
 80025a2:	e009      	b.n	80025b8 <HAL_I2C_Init+0xe8>
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	4a63      	ldr	r2, [pc, #396]	; (800273c <HAL_I2C_Init+0x26c>)
 80025b0:	fba2 2303 	umull	r2, r3, r2, r3
 80025b4:	099b      	lsrs	r3, r3, #6
 80025b6:	3301      	adds	r3, #1
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	430b      	orrs	r3, r1
 80025be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4956      	ldr	r1, [pc, #344]	; (800272c <HAL_I2C_Init+0x25c>)
 80025d4:	428b      	cmp	r3, r1
 80025d6:	d80d      	bhi.n	80025f4 <HAL_I2C_Init+0x124>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	1e59      	subs	r1, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80025e6:	3301      	adds	r3, #1
 80025e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	bf38      	it	cc
 80025f0:	2304      	movcc	r3, #4
 80025f2:	e04f      	b.n	8002694 <HAL_I2C_Init+0x1c4>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d111      	bne.n	8002620 <HAL_I2C_Init+0x150>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1e58      	subs	r0, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6859      	ldr	r1, [r3, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	440b      	add	r3, r1
 800260a:	fbb0 f3f3 	udiv	r3, r0, r3
 800260e:	3301      	adds	r3, #1
 8002610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	e012      	b.n	8002646 <HAL_I2C_Init+0x176>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1e58      	subs	r0, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	0099      	lsls	r1, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	fbb0 f3f3 	udiv	r3, r0, r3
 8002636:	3301      	adds	r3, #1
 8002638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf0c      	ite	eq
 8002640:	2301      	moveq	r3, #1
 8002642:	2300      	movne	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_I2C_Init+0x17e>
 800264a:	2301      	movs	r3, #1
 800264c:	e022      	b.n	8002694 <HAL_I2C_Init+0x1c4>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10e      	bne.n	8002674 <HAL_I2C_Init+0x1a4>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1e58      	subs	r0, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6859      	ldr	r1, [r3, #4]
 800265e:	460b      	mov	r3, r1
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	440b      	add	r3, r1
 8002664:	fbb0 f3f3 	udiv	r3, r0, r3
 8002668:	3301      	adds	r3, #1
 800266a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800266e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002672:	e00f      	b.n	8002694 <HAL_I2C_Init+0x1c4>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1e58      	subs	r0, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6859      	ldr	r1, [r3, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	0099      	lsls	r1, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	fbb0 f3f3 	udiv	r3, r0, r3
 800268a:	3301      	adds	r3, #1
 800268c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	6809      	ldr	r1, [r1, #0]
 8002698:	4313      	orrs	r3, r2
 800269a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69da      	ldr	r2, [r3, #28]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6911      	ldr	r1, [r2, #16]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68d2      	ldr	r2, [r2, #12]
 80026ce:	4311      	orrs	r1, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	430b      	orrs	r3, r1
 80026d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	000186a0 	.word	0x000186a0
 8002730:	001e847f 	.word	0x001e847f
 8002734:	003d08ff 	.word	0x003d08ff
 8002738:	431bde83 	.word	0x431bde83
 800273c:	10624dd3 	.word	0x10624dd3

08002740 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af02      	add	r7, sp, #8
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	4608      	mov	r0, r1
 800274a:	4611      	mov	r1, r2
 800274c:	461a      	mov	r2, r3
 800274e:	4603      	mov	r3, r0
 8002750:	817b      	strh	r3, [r7, #10]
 8002752:	460b      	mov	r3, r1
 8002754:	813b      	strh	r3, [r7, #8]
 8002756:	4613      	mov	r3, r2
 8002758:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800275a:	f7fe fc5b 	bl	8001014 <HAL_GetTick>
 800275e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b20      	cmp	r3, #32
 800276a:	f040 80d9 	bne.w	8002920 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2319      	movs	r3, #25
 8002774:	2201      	movs	r2, #1
 8002776:	496d      	ldr	r1, [pc, #436]	; (800292c <HAL_I2C_Mem_Write+0x1ec>)
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 fc7b 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002784:	2302      	movs	r3, #2
 8002786:	e0cc      	b.n	8002922 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_I2C_Mem_Write+0x56>
 8002792:	2302      	movs	r3, #2
 8002794:	e0c5      	b.n	8002922 <HAL_I2C_Mem_Write+0x1e2>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d007      	beq.n	80027bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2221      	movs	r2, #33	; 0x21
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2240      	movs	r2, #64	; 0x40
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a3a      	ldr	r2, [r7, #32]
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a4d      	ldr	r2, [pc, #308]	; (8002930 <HAL_I2C_Mem_Write+0x1f0>)
 80027fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027fe:	88f8      	ldrh	r0, [r7, #6]
 8002800:	893a      	ldrh	r2, [r7, #8]
 8002802:	8979      	ldrh	r1, [r7, #10]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	4603      	mov	r3, r0
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fab6 	bl	8002d80 <I2C_RequestMemoryWrite>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d052      	beq.n	80028c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e081      	b.n	8002922 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 fcfc 	bl	8003220 <I2C_WaitOnTXEFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00d      	beq.n	800284a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	2b04      	cmp	r3, #4
 8002834:	d107      	bne.n	8002846 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002844:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e06b      	b.n	8002922 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	781a      	ldrb	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b04      	cmp	r3, #4
 8002886:	d11b      	bne.n	80028c0 <HAL_I2C_Mem_Write+0x180>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288c:	2b00      	cmp	r3, #0
 800288e:	d017      	beq.n	80028c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1aa      	bne.n	800281e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 fce8 	bl	80032a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00d      	beq.n	80028f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d107      	bne.n	80028f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e016      	b.n	8002922 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	e000      	b.n	8002922 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002920:	2302      	movs	r3, #2
  }
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	00100002 	.word	0x00100002
 8002930:	ffff0000 	.word	0xffff0000

08002934 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08c      	sub	sp, #48	; 0x30
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	4608      	mov	r0, r1
 800293e:	4611      	mov	r1, r2
 8002940:	461a      	mov	r2, r3
 8002942:	4603      	mov	r3, r0
 8002944:	817b      	strh	r3, [r7, #10]
 8002946:	460b      	mov	r3, r1
 8002948:	813b      	strh	r3, [r7, #8]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800294e:	f7fe fb61 	bl	8001014 <HAL_GetTick>
 8002952:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b20      	cmp	r3, #32
 800295e:	f040 8208 	bne.w	8002d72 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	2319      	movs	r3, #25
 8002968:	2201      	movs	r2, #1
 800296a:	497b      	ldr	r1, [pc, #492]	; (8002b58 <HAL_I2C_Mem_Read+0x224>)
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fb81 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002978:	2302      	movs	r3, #2
 800297a:	e1fb      	b.n	8002d74 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_I2C_Mem_Read+0x56>
 8002986:	2302      	movs	r3, #2
 8002988:	e1f4      	b.n	8002d74 <HAL_I2C_Mem_Read+0x440>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	d007      	beq.n	80029b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2222      	movs	r2, #34	; 0x22
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2240      	movs	r2, #64	; 0x40
 80029cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80029e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a5b      	ldr	r2, [pc, #364]	; (8002b5c <HAL_I2C_Mem_Read+0x228>)
 80029f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029f2:	88f8      	ldrh	r0, [r7, #6]
 80029f4:	893a      	ldrh	r2, [r7, #8]
 80029f6:	8979      	ldrh	r1, [r7, #10]
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	4603      	mov	r3, r0
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fa50 	bl	8002ea8 <I2C_RequestMemoryRead>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e1b0      	b.n	8002d74 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d113      	bne.n	8002a42 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	623b      	str	r3, [r7, #32]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	623b      	str	r3, [r7, #32]
 8002a2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	e184      	b.n	8002d4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d11b      	bne.n	8002a82 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e164      	b.n	8002d4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d11b      	bne.n	8002ac2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aa8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	e144      	b.n	8002d4c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ad8:	e138      	b.n	8002d4c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	f200 80f1 	bhi.w	8002cc6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d123      	bne.n	8002b34 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 fc17 	bl	8003324 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e139      	b.n	8002d74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b32:	e10b      	b.n	8002d4c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d14e      	bne.n	8002bda <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b42:	2200      	movs	r2, #0
 8002b44:	4906      	ldr	r1, [pc, #24]	; (8002b60 <HAL_I2C_Mem_Read+0x22c>)
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 fa94 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e10e      	b.n	8002d74 <HAL_I2C_Mem_Read+0x440>
 8002b56:	bf00      	nop
 8002b58:	00100002 	.word	0x00100002
 8002b5c:	ffff0000 	.word	0xffff0000
 8002b60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bd8:	e0b8      	b.n	8002d4c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be0:	2200      	movs	r2, #0
 8002be2:	4966      	ldr	r1, [pc, #408]	; (8002d7c <HAL_I2C_Mem_Read+0x448>)
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fa45 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0bf      	b.n	8002d74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691a      	ldr	r2, [r3, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	494f      	ldr	r1, [pc, #316]	; (8002d7c <HAL_I2C_Mem_Read+0x448>)
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 fa17 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e091      	b.n	8002d74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cc4:	e042      	b.n	8002d4c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fb2a 	bl	8003324 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e04c      	b.n	8002d74 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d118      	bne.n	8002d4c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f47f aec2 	bne.w	8002ada <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e000      	b.n	8002d74 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d72:	2302      	movs	r3, #2
  }
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3728      	adds	r7, #40	; 0x28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	00010004 	.word	0x00010004

08002d80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	4608      	mov	r0, r1
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4603      	mov	r3, r0
 8002d90:	817b      	strh	r3, [r7, #10]
 8002d92:	460b      	mov	r3, r1
 8002d94:	813b      	strh	r3, [r7, #8]
 8002d96:	4613      	mov	r3, r2
 8002d98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f95c 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00c      	beq.n	8002ddc <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e05f      	b.n	8002e9c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ddc:	897b      	ldrh	r3, [r7, #10]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	6a3a      	ldr	r2, [r7, #32]
 8002df0:	492c      	ldr	r1, [pc, #176]	; (8002ea4 <I2C_RequestMemoryWrite+0x124>)
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f995 	bl	8003122 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e04c      	b.n	8002e9c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1a:	6a39      	ldr	r1, [r7, #32]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f9ff 	bl	8003220 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00d      	beq.n	8002e44 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d107      	bne.n	8002e40 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e02b      	b.n	8002e9c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d105      	bne.n	8002e56 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e4a:	893b      	ldrh	r3, [r7, #8]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	611a      	str	r2, [r3, #16]
 8002e54:	e021      	b.n	8002e9a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e56:	893b      	ldrh	r3, [r7, #8]
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e66:	6a39      	ldr	r1, [r7, #32]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f9d9 	bl	8003220 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00d      	beq.n	8002e90 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d107      	bne.n	8002e8c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e005      	b.n	8002e9c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e90:	893b      	ldrh	r3, [r7, #8]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	00010002 	.word	0x00010002

08002ea8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	4608      	mov	r0, r1
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	817b      	strh	r3, [r7, #10]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	813b      	strh	r3, [r7, #8]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ed0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f8c0 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00c      	beq.n	8002f14 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e0a9      	b.n	8003068 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f14:	897b      	ldrh	r3, [r7, #10]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	6a3a      	ldr	r2, [r7, #32]
 8002f28:	4951      	ldr	r1, [pc, #324]	; (8003070 <I2C_RequestMemoryRead+0x1c8>)
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f8f9 	bl	8003122 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e096      	b.n	8003068 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f52:	6a39      	ldr	r1, [r7, #32]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f963 	bl	8003220 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00d      	beq.n	8002f7c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d107      	bne.n	8002f78 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e075      	b.n	8003068 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d105      	bne.n	8002f8e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f82:	893b      	ldrh	r3, [r7, #8]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	611a      	str	r2, [r3, #16]
 8002f8c:	e021      	b.n	8002fd2 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f8e:	893b      	ldrh	r3, [r7, #8]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9e:	6a39      	ldr	r1, [r7, #32]
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f93d 	bl	8003220 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00d      	beq.n	8002fc8 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d107      	bne.n	8002fc4 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e04f      	b.n	8003068 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fc8:	893b      	ldrh	r3, [r7, #8]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd4:	6a39      	ldr	r1, [r7, #32]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f922 	bl	8003220 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00d      	beq.n	8002ffe <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d107      	bne.n	8002ffa <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e034      	b.n	8003068 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800300c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	2200      	movs	r2, #0
 8003016:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f82a 	bl	8003074 <I2C_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00c      	beq.n	8003040 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800303a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e013      	b.n	8003068 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003040:	897b      	ldrh	r3, [r7, #10]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	b2da      	uxtb	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	6a3a      	ldr	r2, [r7, #32]
 8003054:	4906      	ldr	r1, [pc, #24]	; (8003070 <I2C_RequestMemoryRead+0x1c8>)
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f863 	bl	8003122 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	00010002 	.word	0x00010002

08003074 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	4613      	mov	r3, r2
 8003082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003084:	e025      	b.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d021      	beq.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308e:	f7fd ffc1 	bl	8001014 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d302      	bcc.n	80030a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d116      	bne.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f043 0220 	orr.w	r2, r3, #32
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e023      	b.n	800311a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	0c1b      	lsrs	r3, r3, #16
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d10d      	bne.n	80030f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	43da      	mvns	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4013      	ands	r3, r2
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	bf0c      	ite	eq
 80030ee:	2301      	moveq	r3, #1
 80030f0:	2300      	movne	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	461a      	mov	r2, r3
 80030f6:	e00c      	b.n	8003112 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	43da      	mvns	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4013      	ands	r3, r2
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	bf0c      	ite	eq
 800310a:	2301      	moveq	r3, #1
 800310c:	2300      	movne	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	429a      	cmp	r2, r3
 8003116:	d0b6      	beq.n	8003086 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003130:	e051      	b.n	80031d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003140:	d123      	bne.n	800318a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003150:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800315a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f043 0204 	orr.w	r2, r3, #4
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e046      	b.n	8003218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d021      	beq.n	80031d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003192:	f7fd ff3f 	bl	8001014 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d116      	bne.n	80031d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f043 0220 	orr.w	r2, r3, #32
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e020      	b.n	8003218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	0c1b      	lsrs	r3, r3, #16
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d10c      	bne.n	80031fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	43da      	mvns	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4013      	ands	r3, r2
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bf14      	ite	ne
 80031f2:	2301      	movne	r3, #1
 80031f4:	2300      	moveq	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	e00b      	b.n	8003212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	43da      	mvns	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	4013      	ands	r3, r2
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf14      	ite	ne
 800320c:	2301      	movne	r3, #1
 800320e:	2300      	moveq	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d18d      	bne.n	8003132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800322c:	e02d      	b.n	800328a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f8ce 	bl	80033d0 <I2C_IsAcknowledgeFailed>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e02d      	b.n	800329a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003244:	d021      	beq.n	800328a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003246:	f7fd fee5 	bl	8001014 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	429a      	cmp	r2, r3
 8003254:	d302      	bcc.n	800325c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d116      	bne.n	800328a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f043 0220 	orr.w	r2, r3, #32
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e007      	b.n	800329a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003294:	2b80      	cmp	r3, #128	; 0x80
 8003296:	d1ca      	bne.n	800322e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032ae:	e02d      	b.n	800330c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f88d 	bl	80033d0 <I2C_IsAcknowledgeFailed>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e02d      	b.n	800331c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c6:	d021      	beq.n	800330c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c8:	f7fd fea4 	bl	8001014 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d302      	bcc.n	80032de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d116      	bne.n	800330c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f043 0220 	orr.w	r2, r3, #32
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e007      	b.n	800331c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b04      	cmp	r3, #4
 8003318:	d1ca      	bne.n	80032b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003330:	e042      	b.n	80033b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b10      	cmp	r3, #16
 800333e:	d119      	bne.n	8003374 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0210 	mvn.w	r2, #16
 8003348:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e029      	b.n	80033c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003374:	f7fd fe4e 	bl	8001014 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	429a      	cmp	r2, r3
 8003382:	d302      	bcc.n	800338a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d116      	bne.n	80033b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e007      	b.n	80033c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d1b5      	bne.n	8003332 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e6:	d11b      	bne.n	8003420 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	f043 0204 	orr.w	r2, r3, #4
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
	...

08003430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e25b      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d075      	beq.n	800353a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800344e:	4ba3      	ldr	r3, [pc, #652]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b04      	cmp	r3, #4
 8003458:	d00c      	beq.n	8003474 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345a:	4ba0      	ldr	r3, [pc, #640]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003462:	2b08      	cmp	r3, #8
 8003464:	d112      	bne.n	800348c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003466:	4b9d      	ldr	r3, [pc, #628]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003472:	d10b      	bne.n	800348c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003474:	4b99      	ldr	r3, [pc, #612]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d05b      	beq.n	8003538 <HAL_RCC_OscConfig+0x108>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d157      	bne.n	8003538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e236      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003494:	d106      	bne.n	80034a4 <HAL_RCC_OscConfig+0x74>
 8003496:	4b91      	ldr	r3, [pc, #580]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a90      	ldr	r2, [pc, #576]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e01d      	b.n	80034e0 <HAL_RCC_OscConfig+0xb0>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x98>
 80034ae:	4b8b      	ldr	r3, [pc, #556]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a8a      	ldr	r2, [pc, #552]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b88      	ldr	r3, [pc, #544]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a87      	ldr	r2, [pc, #540]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0xb0>
 80034c8:	4b84      	ldr	r3, [pc, #528]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a83      	ldr	r2, [pc, #524]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80034ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b81      	ldr	r3, [pc, #516]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a80      	ldr	r2, [pc, #512]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80034da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d013      	beq.n	8003510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fd fd94 	bl	8001014 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f0:	f7fd fd90 	bl	8001014 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e1fb      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	4b76      	ldr	r3, [pc, #472]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0xc0>
 800350e:	e014      	b.n	800353a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7fd fd80 	bl	8001014 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003518:	f7fd fd7c 	bl	8001014 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	; 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e1e7      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352a:	4b6c      	ldr	r3, [pc, #432]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0xe8>
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d063      	beq.n	800360e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003546:	4b65      	ldr	r3, [pc, #404]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003552:	4b62      	ldr	r3, [pc, #392]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800355a:	2b08      	cmp	r3, #8
 800355c:	d11c      	bne.n	8003598 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800355e:	4b5f      	ldr	r3, [pc, #380]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d116      	bne.n	8003598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356a:	4b5c      	ldr	r3, [pc, #368]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_RCC_OscConfig+0x152>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d001      	beq.n	8003582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e1bb      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003582:	4b56      	ldr	r3, [pc, #344]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4952      	ldr	r1, [pc, #328]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003596:	e03a      	b.n	800360e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d020      	beq.n	80035e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a0:	4b4f      	ldr	r3, [pc, #316]	; (80036e0 <HAL_RCC_OscConfig+0x2b0>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a6:	f7fd fd35 	bl	8001014 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ae:	f7fd fd31 	bl	8001014 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e19c      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c0:	4b46      	ldr	r3, [pc, #280]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035cc:	4b43      	ldr	r3, [pc, #268]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4940      	ldr	r1, [pc, #256]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	600b      	str	r3, [r1, #0]
 80035e0:	e015      	b.n	800360e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e2:	4b3f      	ldr	r3, [pc, #252]	; (80036e0 <HAL_RCC_OscConfig+0x2b0>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fd fd14 	bl	8001014 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035f0:	f7fd fd10 	bl	8001014 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e17b      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003602:	4b36      	ldr	r3, [pc, #216]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d030      	beq.n	800367c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d016      	beq.n	8003650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003622:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <HAL_RCC_OscConfig+0x2b4>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fd fcf4 	bl	8001014 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003630:	f7fd fcf0 	bl	8001014 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e15b      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003642:	4b26      	ldr	r3, [pc, #152]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x200>
 800364e:	e015      	b.n	800367c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003650:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <HAL_RCC_OscConfig+0x2b4>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003656:	f7fd fcdd 	bl	8001014 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800365e:	f7fd fcd9 	bl	8001014 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e144      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003670:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f0      	bne.n	800365e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80a0 	beq.w	80037ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800368a:	2300      	movs	r3, #0
 800368c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800368e:	4b13      	ldr	r3, [pc, #76]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10f      	bne.n	80036ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	4a0e      	ldr	r2, [pc, #56]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a8:	6413      	str	r3, [r2, #64]	; 0x40
 80036aa:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b6:	2301      	movs	r3, #1
 80036b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ba:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_RCC_OscConfig+0x2b8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d121      	bne.n	800370a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036c6:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <HAL_RCC_OscConfig+0x2b8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a07      	ldr	r2, [pc, #28]	; (80036e8 <HAL_RCC_OscConfig+0x2b8>)
 80036cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d2:	f7fd fc9f 	bl	8001014 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d8:	e011      	b.n	80036fe <HAL_RCC_OscConfig+0x2ce>
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800
 80036e0:	42470000 	.word	0x42470000
 80036e4:	42470e80 	.word	0x42470e80
 80036e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ec:	f7fd fc92 	bl	8001014 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e0fd      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fe:	4b81      	ldr	r3, [pc, #516]	; (8003904 <HAL_RCC_OscConfig+0x4d4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d106      	bne.n	8003720 <HAL_RCC_OscConfig+0x2f0>
 8003712:	4b7d      	ldr	r3, [pc, #500]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 8003714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003716:	4a7c      	ldr	r2, [pc, #496]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6713      	str	r3, [r2, #112]	; 0x70
 800371e:	e01c      	b.n	800375a <HAL_RCC_OscConfig+0x32a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b05      	cmp	r3, #5
 8003726:	d10c      	bne.n	8003742 <HAL_RCC_OscConfig+0x312>
 8003728:	4b77      	ldr	r3, [pc, #476]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372c:	4a76      	ldr	r2, [pc, #472]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 800372e:	f043 0304 	orr.w	r3, r3, #4
 8003732:	6713      	str	r3, [r2, #112]	; 0x70
 8003734:	4b74      	ldr	r3, [pc, #464]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	4a73      	ldr	r2, [pc, #460]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	6713      	str	r3, [r2, #112]	; 0x70
 8003740:	e00b      	b.n	800375a <HAL_RCC_OscConfig+0x32a>
 8003742:	4b71      	ldr	r3, [pc, #452]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4a70      	ldr	r2, [pc, #448]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	6713      	str	r3, [r2, #112]	; 0x70
 800374e:	4b6e      	ldr	r3, [pc, #440]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a6d      	ldr	r2, [pc, #436]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 8003754:	f023 0304 	bic.w	r3, r3, #4
 8003758:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d015      	beq.n	800378e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003762:	f7fd fc57 	bl	8001014 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003768:	e00a      	b.n	8003780 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800376a:	f7fd fc53 	bl	8001014 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f241 3288 	movw	r2, #5000	; 0x1388
 8003778:	4293      	cmp	r3, r2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e0bc      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003780:	4b61      	ldr	r3, [pc, #388]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ee      	beq.n	800376a <HAL_RCC_OscConfig+0x33a>
 800378c:	e014      	b.n	80037b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378e:	f7fd fc41 	bl	8001014 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003794:	e00a      	b.n	80037ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003796:	f7fd fc3d 	bl	8001014 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e0a6      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ac:	4b56      	ldr	r3, [pc, #344]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 80037ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1ee      	bne.n	8003796 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d105      	bne.n	80037ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037be:	4b52      	ldr	r3, [pc, #328]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	4a51      	ldr	r2, [pc, #324]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 80037c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 8092 	beq.w	80038f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037d4:	4b4c      	ldr	r3, [pc, #304]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 030c 	and.w	r3, r3, #12
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d05c      	beq.n	800389a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d141      	bne.n	800386c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e8:	4b48      	ldr	r3, [pc, #288]	; (800390c <HAL_RCC_OscConfig+0x4dc>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ee:	f7fd fc11 	bl	8001014 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f6:	f7fd fc0d 	bl	8001014 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e078      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003808:	4b3f      	ldr	r3, [pc, #252]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1f0      	bne.n	80037f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	019b      	lsls	r3, r3, #6
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	085b      	lsrs	r3, r3, #1
 800382c:	3b01      	subs	r3, #1
 800382e:	041b      	lsls	r3, r3, #16
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	061b      	lsls	r3, r3, #24
 8003838:	4933      	ldr	r1, [pc, #204]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 800383a:	4313      	orrs	r3, r2
 800383c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800383e:	4b33      	ldr	r3, [pc, #204]	; (800390c <HAL_RCC_OscConfig+0x4dc>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fd fbe6 	bl	8001014 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800384c:	f7fd fbe2 	bl	8001014 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e04d      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385e:	4b2a      	ldr	r3, [pc, #168]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x41c>
 800386a:	e045      	b.n	80038f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386c:	4b27      	ldr	r3, [pc, #156]	; (800390c <HAL_RCC_OscConfig+0x4dc>)
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003872:	f7fd fbcf 	bl	8001014 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800387a:	f7fd fbcb 	bl	8001014 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e036      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388c:	4b1e      	ldr	r3, [pc, #120]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1f0      	bne.n	800387a <HAL_RCC_OscConfig+0x44a>
 8003898:	e02e      	b.n	80038f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e029      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038a6:	4b18      	ldr	r3, [pc, #96]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d11c      	bne.n	80038f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d115      	bne.n	80038f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038ce:	4013      	ands	r3, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d10d      	bne.n	80038f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d106      	bne.n	80038f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40007000 	.word	0x40007000
 8003908:	40023800 	.word	0x40023800
 800390c:	42470060 	.word	0x42470060

08003910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0cc      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003924:	4b68      	ldr	r3, [pc, #416]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d90c      	bls.n	800394c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003932:	4b65      	ldr	r3, [pc, #404]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393a:	4b63      	ldr	r3, [pc, #396]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0b8      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d020      	beq.n	800399a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003964:	4b59      	ldr	r3, [pc, #356]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4a58      	ldr	r2, [pc, #352]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800396e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800397c:	4b53      	ldr	r3, [pc, #332]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4a52      	ldr	r2, [pc, #328]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003988:	4b50      	ldr	r3, [pc, #320]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	494d      	ldr	r1, [pc, #308]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d044      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d107      	bne.n	80039be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	4b47      	ldr	r3, [pc, #284]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d119      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e07f      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d003      	beq.n	80039ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ce:	4b3f      	ldr	r3, [pc, #252]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e06f      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039de:	4b3b      	ldr	r3, [pc, #236]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e067      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ee:	4b37      	ldr	r3, [pc, #220]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f023 0203 	bic.w	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4934      	ldr	r1, [pc, #208]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a00:	f7fd fb08 	bl	8001014 <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a08:	f7fd fb04 	bl	8001014 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e04f      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	4b2b      	ldr	r3, [pc, #172]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 020c 	and.w	r2, r3, #12
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d1eb      	bne.n	8003a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a30:	4b25      	ldr	r3, [pc, #148]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d20c      	bcs.n	8003a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b22      	ldr	r3, [pc, #136]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b20      	ldr	r3, [pc, #128]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e032      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a64:	4b19      	ldr	r3, [pc, #100]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4916      	ldr	r1, [pc, #88]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a82:	4b12      	ldr	r3, [pc, #72]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	490e      	ldr	r1, [pc, #56]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a96:	f000 f821 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8003a9a:	4601      	mov	r1, r0
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	5cd3      	ldrb	r3, [r2, r3]
 8003aaa:	fa21 f303 	lsr.w	r3, r1, r3
 8003aae:	4a09      	ldr	r2, [pc, #36]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fd fa68 	bl	8000f8c <HAL_InitTick>

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023c00 	.word	0x40023c00
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	0800fe84 	.word	0x0800fe84
 8003ad4:	2000000c 	.word	0x2000000c
 8003ad8:	20000000 	.word	0x20000000

08003adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	607b      	str	r3, [r7, #4]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	2300      	movs	r3, #0
 8003aec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af2:	4b63      	ldr	r3, [pc, #396]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d007      	beq.n	8003b0e <HAL_RCC_GetSysClockFreq+0x32>
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d008      	beq.n	8003b14 <HAL_RCC_GetSysClockFreq+0x38>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f040 80b4 	bne.w	8003c70 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b08:	4b5e      	ldr	r3, [pc, #376]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b0a:	60bb      	str	r3, [r7, #8]
       break;
 8003b0c:	e0b3      	b.n	8003c76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b0e:	4b5e      	ldr	r3, [pc, #376]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003b10:	60bb      	str	r3, [r7, #8]
      break;
 8003b12:	e0b0      	b.n	8003c76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b14:	4b5a      	ldr	r3, [pc, #360]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b1e:	4b58      	ldr	r3, [pc, #352]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d04a      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b2a:	4b55      	ldr	r3, [pc, #340]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	099b      	lsrs	r3, r3, #6
 8003b30:	f04f 0400 	mov.w	r4, #0
 8003b34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	ea03 0501 	and.w	r5, r3, r1
 8003b40:	ea04 0602 	and.w	r6, r4, r2
 8003b44:	4629      	mov	r1, r5
 8003b46:	4632      	mov	r2, r6
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	f04f 0400 	mov.w	r4, #0
 8003b50:	0154      	lsls	r4, r2, #5
 8003b52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b56:	014b      	lsls	r3, r1, #5
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	1b49      	subs	r1, r1, r5
 8003b5e:	eb62 0206 	sbc.w	r2, r2, r6
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	f04f 0400 	mov.w	r4, #0
 8003b6a:	0194      	lsls	r4, r2, #6
 8003b6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b70:	018b      	lsls	r3, r1, #6
 8003b72:	1a5b      	subs	r3, r3, r1
 8003b74:	eb64 0402 	sbc.w	r4, r4, r2
 8003b78:	f04f 0100 	mov.w	r1, #0
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	00e2      	lsls	r2, r4, #3
 8003b82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b86:	00d9      	lsls	r1, r3, #3
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4614      	mov	r4, r2
 8003b8c:	195b      	adds	r3, r3, r5
 8003b8e:	eb44 0406 	adc.w	r4, r4, r6
 8003b92:	f04f 0100 	mov.w	r1, #0
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	0262      	lsls	r2, r4, #9
 8003b9c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003ba0:	0259      	lsls	r1, r3, #9
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4614      	mov	r4, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	4621      	mov	r1, r4
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f04f 0400 	mov.w	r4, #0
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4623      	mov	r3, r4
 8003bb4:	f7fd f848 	bl	8000c48 <__aeabi_uldivmod>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	460c      	mov	r4, r1
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	e049      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc0:	4b2f      	ldr	r3, [pc, #188]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	099b      	lsrs	r3, r3, #6
 8003bc6:	f04f 0400 	mov.w	r4, #0
 8003bca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	ea03 0501 	and.w	r5, r3, r1
 8003bd6:	ea04 0602 	and.w	r6, r4, r2
 8003bda:	4629      	mov	r1, r5
 8003bdc:	4632      	mov	r2, r6
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	f04f 0400 	mov.w	r4, #0
 8003be6:	0154      	lsls	r4, r2, #5
 8003be8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003bec:	014b      	lsls	r3, r1, #5
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4622      	mov	r2, r4
 8003bf2:	1b49      	subs	r1, r1, r5
 8003bf4:	eb62 0206 	sbc.w	r2, r2, r6
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	f04f 0400 	mov.w	r4, #0
 8003c00:	0194      	lsls	r4, r2, #6
 8003c02:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c06:	018b      	lsls	r3, r1, #6
 8003c08:	1a5b      	subs	r3, r3, r1
 8003c0a:	eb64 0402 	sbc.w	r4, r4, r2
 8003c0e:	f04f 0100 	mov.w	r1, #0
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	00e2      	lsls	r2, r4, #3
 8003c18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c1c:	00d9      	lsls	r1, r3, #3
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4614      	mov	r4, r2
 8003c22:	195b      	adds	r3, r3, r5
 8003c24:	eb44 0406 	adc.w	r4, r4, r6
 8003c28:	f04f 0100 	mov.w	r1, #0
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	02a2      	lsls	r2, r4, #10
 8003c32:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003c36:	0299      	lsls	r1, r3, #10
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4614      	mov	r4, r2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	4621      	mov	r1, r4
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f04f 0400 	mov.w	r4, #0
 8003c46:	461a      	mov	r2, r3
 8003c48:	4623      	mov	r3, r4
 8003c4a:	f7fc fffd 	bl	8000c48 <__aeabi_uldivmod>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	460c      	mov	r4, r1
 8003c52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c54:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	0c1b      	lsrs	r3, r3, #16
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	60bb      	str	r3, [r7, #8]
      break;
 8003c6e:	e002      	b.n	8003c76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c70:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c72:	60bb      	str	r3, [r7, #8]
      break;
 8003c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c76:	68bb      	ldr	r3, [r7, #8]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c80:	40023800 	.word	0x40023800
 8003c84:	00f42400 	.word	0x00f42400
 8003c88:	007a1200 	.word	0x007a1200

08003c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c92:	681b      	ldr	r3, [r3, #0]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	2000000c 	.word	0x2000000c

08003ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ca8:	f7ff fff0 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003cac:	4601      	mov	r1, r0
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	0a9b      	lsrs	r3, r3, #10
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	4a03      	ldr	r2, [pc, #12]	; (8003cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cba:	5cd3      	ldrb	r3, [r2, r3]
 8003cbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	0800fe94 	.word	0x0800fe94

08003ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cd0:	f7ff ffdc 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003cd4:	4601      	mov	r1, r0
 8003cd6:	4b05      	ldr	r3, [pc, #20]	; (8003cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	0b5b      	lsrs	r3, r3, #13
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	4a03      	ldr	r2, [pc, #12]	; (8003cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ce2:	5cd3      	ldrb	r3, [r2, r3]
 8003ce4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	0800fe94 	.word	0x0800fe94

08003cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e03f      	b.n	8003d86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f008 fa96 	bl	800c24c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2224      	movs	r2, #36	; 0x24
 8003d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fbdb 	bl	80044f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695a      	ldr	r2, [r3, #20]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b088      	sub	sp, #32
 8003d92:	af02      	add	r7, sp, #8
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	603b      	str	r3, [r7, #0]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	f040 8083 	bne.w	8003eb6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_UART_Transmit+0x2e>
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e07b      	b.n	8003eb8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_UART_Transmit+0x40>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e074      	b.n	8003eb8 <HAL_UART_Transmit+0x12a>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2221      	movs	r2, #33	; 0x21
 8003de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003de4:	f7fd f916 	bl	8001014 <HAL_GetTick>
 8003de8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	88fa      	ldrh	r2, [r7, #6]
 8003dee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	88fa      	ldrh	r2, [r7, #6]
 8003df4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003dfe:	e042      	b.n	8003e86 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e16:	d122      	bne.n	8003e5e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2180      	movs	r1, #128	; 0x80
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f9fa 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e042      	b.n	8003eb8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e44:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d103      	bne.n	8003e56 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	3302      	adds	r3, #2
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	e017      	b.n	8003e86 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	e013      	b.n	8003e86 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2200      	movs	r2, #0
 8003e66:	2180      	movs	r1, #128	; 0x80
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f9d7 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e01f      	b.n	8003eb8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	60ba      	str	r2, [r7, #8]
 8003e7e:	781a      	ldrb	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1b7      	bne.n	8003e00 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2200      	movs	r2, #0
 8003e98:	2140      	movs	r1, #64	; 0x40
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f9be 	bl	800421c <UART_WaitOnFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e006      	b.n	8003eb8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e000      	b.n	8003eb8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
  }
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	d130      	bne.n	8003f3c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_UART_Transmit_IT+0x26>
 8003ee0:	88fb      	ldrh	r3, [r7, #6]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e029      	b.n	8003f3e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_UART_Transmit_IT+0x38>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e022      	b.n	8003f3e <HAL_UART_Transmit_IT+0x7e>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	88fa      	ldrh	r2, [r7, #6]
 8003f0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	88fa      	ldrh	r2, [r7, #6]
 8003f10:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2221      	movs	r2, #33	; 0x21
 8003f1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f36:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	e000      	b.n	8003f3e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003f3c:	2302      	movs	r3, #2
  }
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b085      	sub	sp, #20
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	4613      	mov	r3, r2
 8003f56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d140      	bne.n	8003fe6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <HAL_UART_Receive_IT+0x26>
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e039      	b.n	8003fe8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <HAL_UART_Receive_IT+0x38>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e032      	b.n	8003fe8 <HAL_UART_Receive_IT+0x9e>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	88fa      	ldrh	r2, [r7, #6]
 8003f94:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	88fa      	ldrh	r2, [r7, #6]
 8003f9a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2222      	movs	r2, #34	; 0x22
 8003fa6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695a      	ldr	r2, [r3, #20]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0220 	orr.w	r2, r2, #32
 8003fe0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e000      	b.n	8003fe8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
  }
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004014:	2300      	movs	r3, #0
 8004016:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	f003 0320 	and.w	r3, r3, #32
 8004030:	2b00      	cmp	r3, #0
 8004032:	d008      	beq.n	8004046 <HAL_UART_IRQHandler+0x52>
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f9d6 	bl	80043f0 <UART_Receive_IT>
      return;
 8004044:	e0d1      	b.n	80041ea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 80b0 	beq.w	80041ae <HAL_UART_IRQHandler+0x1ba>
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d105      	bne.n	8004064 <HAL_UART_IRQHandler+0x70>
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 80a5 	beq.w	80041ae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HAL_UART_IRQHandler+0x90>
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407c:	f043 0201 	orr.w	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_UART_IRQHandler+0xb0>
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409c:	f043 0202 	orr.w	r2, r3, #2
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_UART_IRQHandler+0xd0>
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040bc:	f043 0204 	orr.w	r2, r3, #4
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00f      	beq.n	80040ee <HAL_UART_IRQHandler+0xfa>
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	f003 0320 	and.w	r3, r3, #32
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d104      	bne.n	80040e2 <HAL_UART_IRQHandler+0xee>
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d005      	beq.n	80040ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e6:	f043 0208 	orr.w	r2, r3, #8
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d078      	beq.n	80041e8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <HAL_UART_IRQHandler+0x11c>
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f970 	bl	80043f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411a:	2b40      	cmp	r3, #64	; 0x40
 800411c:	bf0c      	ite	eq
 800411e:	2301      	moveq	r3, #1
 8004120:	2300      	movne	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d102      	bne.n	8004138 <HAL_UART_IRQHandler+0x144>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d031      	beq.n	800419c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f8b9 	bl	80042b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004148:	2b40      	cmp	r3, #64	; 0x40
 800414a:	d123      	bne.n	8004194 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800415a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004160:	2b00      	cmp	r3, #0
 8004162:	d013      	beq.n	800418c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004168:	4a21      	ldr	r2, [pc, #132]	; (80041f0 <HAL_UART_IRQHandler+0x1fc>)
 800416a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004170:	4618      	mov	r0, r3
 8004172:	f7fd fd89 	bl	8001c88 <HAL_DMA_Abort_IT>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d016      	beq.n	80041aa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004186:	4610      	mov	r0, r2
 8004188:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418a:	e00e      	b.n	80041aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f83b 	bl	8004208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004192:	e00a      	b.n	80041aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f837 	bl	8004208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419a:	e006      	b.n	80041aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f833 	bl	8004208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80041a8:	e01e      	b.n	80041e8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041aa:	bf00      	nop
    return;
 80041ac:	e01c      	b.n	80041e8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_UART_IRQHandler+0x1d6>
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f8a6 	bl	8004314 <UART_Transmit_IT>
    return;
 80041c8:	e00f      	b.n	80041ea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <HAL_UART_IRQHandler+0x1f6>
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f8ee 	bl	80043c0 <UART_EndTransmit_IT>
    return;
 80041e4:	bf00      	nop
 80041e6:	e000      	b.n	80041ea <HAL_UART_IRQHandler+0x1f6>
    return;
 80041e8:	bf00      	nop
  }
}
 80041ea:	3720      	adds	r7, #32
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	080042ed 	.word	0x080042ed

080041f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	4613      	mov	r3, r2
 800422a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800422c:	e02c      	b.n	8004288 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d028      	beq.n	8004288 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d007      	beq.n	800424c <UART_WaitOnFlagUntilTimeout+0x30>
 800423c:	f7fc feea 	bl	8001014 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	429a      	cmp	r2, r3
 800424a:	d21d      	bcs.n	8004288 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800425a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e00f      	b.n	80042a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4013      	ands	r3, r2
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	429a      	cmp	r2, r3
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d0c3      	beq.n	800422e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695a      	ldr	r2, [r3, #20]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0201 	bic.w	r2, r2, #1
 80042d6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f7ff ff7e 	bl	8004208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b21      	cmp	r3, #33	; 0x21
 8004326:	d144      	bne.n	80043b2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004330:	d11a      	bne.n	8004368 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004346:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d105      	bne.n	800435c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	1c9a      	adds	r2, r3, #2
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	621a      	str	r2, [r3, #32]
 800435a:	e00e      	b.n	800437a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	621a      	str	r2, [r3, #32]
 8004366:	e008      	b.n	800437a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	1c59      	adds	r1, r3, #1
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6211      	str	r1, [r2, #32]
 8004372:	781a      	ldrb	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29b      	uxth	r3, r3
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	4619      	mov	r1, r3
 8004388:	84d1      	strh	r1, [r2, #38]	; 0x26
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10f      	bne.n	80043ae <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800439c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e000      	b.n	80043b4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80043b2:	2302      	movs	r3, #2
  }
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff ff07 	bl	80041f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b22      	cmp	r3, #34	; 0x22
 8004402:	d171      	bne.n	80044e8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800440c:	d123      	bne.n	8004456 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004412:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10e      	bne.n	800443a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	b29b      	uxth	r3, r3
 8004424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004432:	1c9a      	adds	r2, r3, #2
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	629a      	str	r2, [r3, #40]	; 0x28
 8004438:	e029      	b.n	800448e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	b29b      	uxth	r3, r3
 8004442:	b2db      	uxtb	r3, r3
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	629a      	str	r2, [r3, #40]	; 0x28
 8004454:	e01b      	b.n	800448e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10a      	bne.n	8004474 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6858      	ldr	r0, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	1c59      	adds	r1, r3, #1
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6291      	str	r1, [r2, #40]	; 0x28
 800446e:	b2c2      	uxtb	r2, r0
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	e00c      	b.n	800448e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	b2da      	uxtb	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	1c58      	adds	r0, r3, #1
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	6288      	str	r0, [r1, #40]	; 0x28
 8004486:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29b      	uxth	r3, r3
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	4619      	mov	r1, r3
 800449c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d120      	bne.n	80044e4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0220 	bic.w	r2, r2, #32
 80044b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695a      	ldr	r2, [r3, #20]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0201 	bic.w	r2, r2, #1
 80044d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f006 fa54 	bl	800a988 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	e002      	b.n	80044ea <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	e000      	b.n	80044ea <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
  }
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004536:	f023 030c 	bic.w	r3, r3, #12
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	68f9      	ldr	r1, [r7, #12]
 8004540:	430b      	orrs	r3, r1
 8004542:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004562:	f040 818b 	bne.w	800487c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4ac1      	ldr	r2, [pc, #772]	; (8004870 <UART_SetConfig+0x37c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d005      	beq.n	800457c <UART_SetConfig+0x88>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4abf      	ldr	r2, [pc, #764]	; (8004874 <UART_SetConfig+0x380>)
 8004576:	4293      	cmp	r3, r2
 8004578:	f040 80bd 	bne.w	80046f6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800457c:	f7ff fba6 	bl	8003ccc <HAL_RCC_GetPCLK2Freq>
 8004580:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	461d      	mov	r5, r3
 8004586:	f04f 0600 	mov.w	r6, #0
 800458a:	46a8      	mov	r8, r5
 800458c:	46b1      	mov	r9, r6
 800458e:	eb18 0308 	adds.w	r3, r8, r8
 8004592:	eb49 0409 	adc.w	r4, r9, r9
 8004596:	4698      	mov	r8, r3
 8004598:	46a1      	mov	r9, r4
 800459a:	eb18 0805 	adds.w	r8, r8, r5
 800459e:	eb49 0906 	adc.w	r9, r9, r6
 80045a2:	f04f 0100 	mov.w	r1, #0
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80045ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80045b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80045b6:	4688      	mov	r8, r1
 80045b8:	4691      	mov	r9, r2
 80045ba:	eb18 0005 	adds.w	r0, r8, r5
 80045be:	eb49 0106 	adc.w	r1, r9, r6
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	461d      	mov	r5, r3
 80045c8:	f04f 0600 	mov.w	r6, #0
 80045cc:	196b      	adds	r3, r5, r5
 80045ce:	eb46 0406 	adc.w	r4, r6, r6
 80045d2:	461a      	mov	r2, r3
 80045d4:	4623      	mov	r3, r4
 80045d6:	f7fc fb37 	bl	8000c48 <__aeabi_uldivmod>
 80045da:	4603      	mov	r3, r0
 80045dc:	460c      	mov	r4, r1
 80045de:	461a      	mov	r2, r3
 80045e0:	4ba5      	ldr	r3, [pc, #660]	; (8004878 <UART_SetConfig+0x384>)
 80045e2:	fba3 2302 	umull	r2, r3, r3, r2
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	461d      	mov	r5, r3
 80045f0:	f04f 0600 	mov.w	r6, #0
 80045f4:	46a9      	mov	r9, r5
 80045f6:	46b2      	mov	sl, r6
 80045f8:	eb19 0309 	adds.w	r3, r9, r9
 80045fc:	eb4a 040a 	adc.w	r4, sl, sl
 8004600:	4699      	mov	r9, r3
 8004602:	46a2      	mov	sl, r4
 8004604:	eb19 0905 	adds.w	r9, r9, r5
 8004608:	eb4a 0a06 	adc.w	sl, sl, r6
 800460c:	f04f 0100 	mov.w	r1, #0
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004618:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800461c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004620:	4689      	mov	r9, r1
 8004622:	4692      	mov	sl, r2
 8004624:	eb19 0005 	adds.w	r0, r9, r5
 8004628:	eb4a 0106 	adc.w	r1, sl, r6
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	461d      	mov	r5, r3
 8004632:	f04f 0600 	mov.w	r6, #0
 8004636:	196b      	adds	r3, r5, r5
 8004638:	eb46 0406 	adc.w	r4, r6, r6
 800463c:	461a      	mov	r2, r3
 800463e:	4623      	mov	r3, r4
 8004640:	f7fc fb02 	bl	8000c48 <__aeabi_uldivmod>
 8004644:	4603      	mov	r3, r0
 8004646:	460c      	mov	r4, r1
 8004648:	461a      	mov	r2, r3
 800464a:	4b8b      	ldr	r3, [pc, #556]	; (8004878 <UART_SetConfig+0x384>)
 800464c:	fba3 1302 	umull	r1, r3, r3, r2
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	2164      	movs	r1, #100	; 0x64
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	3332      	adds	r3, #50	; 0x32
 800465e:	4a86      	ldr	r2, [pc, #536]	; (8004878 <UART_SetConfig+0x384>)
 8004660:	fba2 2303 	umull	r2, r3, r2, r3
 8004664:	095b      	lsrs	r3, r3, #5
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800466c:	4498      	add	r8, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	461d      	mov	r5, r3
 8004672:	f04f 0600 	mov.w	r6, #0
 8004676:	46a9      	mov	r9, r5
 8004678:	46b2      	mov	sl, r6
 800467a:	eb19 0309 	adds.w	r3, r9, r9
 800467e:	eb4a 040a 	adc.w	r4, sl, sl
 8004682:	4699      	mov	r9, r3
 8004684:	46a2      	mov	sl, r4
 8004686:	eb19 0905 	adds.w	r9, r9, r5
 800468a:	eb4a 0a06 	adc.w	sl, sl, r6
 800468e:	f04f 0100 	mov.w	r1, #0
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800469a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800469e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046a2:	4689      	mov	r9, r1
 80046a4:	4692      	mov	sl, r2
 80046a6:	eb19 0005 	adds.w	r0, r9, r5
 80046aa:	eb4a 0106 	adc.w	r1, sl, r6
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	461d      	mov	r5, r3
 80046b4:	f04f 0600 	mov.w	r6, #0
 80046b8:	196b      	adds	r3, r5, r5
 80046ba:	eb46 0406 	adc.w	r4, r6, r6
 80046be:	461a      	mov	r2, r3
 80046c0:	4623      	mov	r3, r4
 80046c2:	f7fc fac1 	bl	8000c48 <__aeabi_uldivmod>
 80046c6:	4603      	mov	r3, r0
 80046c8:	460c      	mov	r4, r1
 80046ca:	461a      	mov	r2, r3
 80046cc:	4b6a      	ldr	r3, [pc, #424]	; (8004878 <UART_SetConfig+0x384>)
 80046ce:	fba3 1302 	umull	r1, r3, r3, r2
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	2164      	movs	r1, #100	; 0x64
 80046d6:	fb01 f303 	mul.w	r3, r1, r3
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	3332      	adds	r3, #50	; 0x32
 80046e0:	4a65      	ldr	r2, [pc, #404]	; (8004878 <UART_SetConfig+0x384>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	f003 0207 	and.w	r2, r3, #7
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4442      	add	r2, r8
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	e26f      	b.n	8004bd6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046f6:	f7ff fad5 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 80046fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	461d      	mov	r5, r3
 8004700:	f04f 0600 	mov.w	r6, #0
 8004704:	46a8      	mov	r8, r5
 8004706:	46b1      	mov	r9, r6
 8004708:	eb18 0308 	adds.w	r3, r8, r8
 800470c:	eb49 0409 	adc.w	r4, r9, r9
 8004710:	4698      	mov	r8, r3
 8004712:	46a1      	mov	r9, r4
 8004714:	eb18 0805 	adds.w	r8, r8, r5
 8004718:	eb49 0906 	adc.w	r9, r9, r6
 800471c:	f04f 0100 	mov.w	r1, #0
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004728:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800472c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004730:	4688      	mov	r8, r1
 8004732:	4691      	mov	r9, r2
 8004734:	eb18 0005 	adds.w	r0, r8, r5
 8004738:	eb49 0106 	adc.w	r1, r9, r6
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	461d      	mov	r5, r3
 8004742:	f04f 0600 	mov.w	r6, #0
 8004746:	196b      	adds	r3, r5, r5
 8004748:	eb46 0406 	adc.w	r4, r6, r6
 800474c:	461a      	mov	r2, r3
 800474e:	4623      	mov	r3, r4
 8004750:	f7fc fa7a 	bl	8000c48 <__aeabi_uldivmod>
 8004754:	4603      	mov	r3, r0
 8004756:	460c      	mov	r4, r1
 8004758:	461a      	mov	r2, r3
 800475a:	4b47      	ldr	r3, [pc, #284]	; (8004878 <UART_SetConfig+0x384>)
 800475c:	fba3 2302 	umull	r2, r3, r3, r2
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	461d      	mov	r5, r3
 800476a:	f04f 0600 	mov.w	r6, #0
 800476e:	46a9      	mov	r9, r5
 8004770:	46b2      	mov	sl, r6
 8004772:	eb19 0309 	adds.w	r3, r9, r9
 8004776:	eb4a 040a 	adc.w	r4, sl, sl
 800477a:	4699      	mov	r9, r3
 800477c:	46a2      	mov	sl, r4
 800477e:	eb19 0905 	adds.w	r9, r9, r5
 8004782:	eb4a 0a06 	adc.w	sl, sl, r6
 8004786:	f04f 0100 	mov.w	r1, #0
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004792:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004796:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800479a:	4689      	mov	r9, r1
 800479c:	4692      	mov	sl, r2
 800479e:	eb19 0005 	adds.w	r0, r9, r5
 80047a2:	eb4a 0106 	adc.w	r1, sl, r6
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	461d      	mov	r5, r3
 80047ac:	f04f 0600 	mov.w	r6, #0
 80047b0:	196b      	adds	r3, r5, r5
 80047b2:	eb46 0406 	adc.w	r4, r6, r6
 80047b6:	461a      	mov	r2, r3
 80047b8:	4623      	mov	r3, r4
 80047ba:	f7fc fa45 	bl	8000c48 <__aeabi_uldivmod>
 80047be:	4603      	mov	r3, r0
 80047c0:	460c      	mov	r4, r1
 80047c2:	461a      	mov	r2, r3
 80047c4:	4b2c      	ldr	r3, [pc, #176]	; (8004878 <UART_SetConfig+0x384>)
 80047c6:	fba3 1302 	umull	r1, r3, r3, r2
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	2164      	movs	r1, #100	; 0x64
 80047ce:	fb01 f303 	mul.w	r3, r1, r3
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	3332      	adds	r3, #50	; 0x32
 80047d8:	4a27      	ldr	r2, [pc, #156]	; (8004878 <UART_SetConfig+0x384>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047e6:	4498      	add	r8, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	461d      	mov	r5, r3
 80047ec:	f04f 0600 	mov.w	r6, #0
 80047f0:	46a9      	mov	r9, r5
 80047f2:	46b2      	mov	sl, r6
 80047f4:	eb19 0309 	adds.w	r3, r9, r9
 80047f8:	eb4a 040a 	adc.w	r4, sl, sl
 80047fc:	4699      	mov	r9, r3
 80047fe:	46a2      	mov	sl, r4
 8004800:	eb19 0905 	adds.w	r9, r9, r5
 8004804:	eb4a 0a06 	adc.w	sl, sl, r6
 8004808:	f04f 0100 	mov.w	r1, #0
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004814:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004818:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800481c:	4689      	mov	r9, r1
 800481e:	4692      	mov	sl, r2
 8004820:	eb19 0005 	adds.w	r0, r9, r5
 8004824:	eb4a 0106 	adc.w	r1, sl, r6
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	461d      	mov	r5, r3
 800482e:	f04f 0600 	mov.w	r6, #0
 8004832:	196b      	adds	r3, r5, r5
 8004834:	eb46 0406 	adc.w	r4, r6, r6
 8004838:	461a      	mov	r2, r3
 800483a:	4623      	mov	r3, r4
 800483c:	f7fc fa04 	bl	8000c48 <__aeabi_uldivmod>
 8004840:	4603      	mov	r3, r0
 8004842:	460c      	mov	r4, r1
 8004844:	461a      	mov	r2, r3
 8004846:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <UART_SetConfig+0x384>)
 8004848:	fba3 1302 	umull	r1, r3, r3, r2
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	2164      	movs	r1, #100	; 0x64
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	3332      	adds	r3, #50	; 0x32
 800485a:	4a07      	ldr	r2, [pc, #28]	; (8004878 <UART_SetConfig+0x384>)
 800485c:	fba2 2303 	umull	r2, r3, r2, r3
 8004860:	095b      	lsrs	r3, r3, #5
 8004862:	f003 0207 	and.w	r2, r3, #7
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4442      	add	r2, r8
 800486c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800486e:	e1b2      	b.n	8004bd6 <UART_SetConfig+0x6e2>
 8004870:	40011000 	.word	0x40011000
 8004874:	40011400 	.word	0x40011400
 8004878:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4ad7      	ldr	r2, [pc, #860]	; (8004be0 <UART_SetConfig+0x6ec>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d005      	beq.n	8004892 <UART_SetConfig+0x39e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4ad6      	ldr	r2, [pc, #856]	; (8004be4 <UART_SetConfig+0x6f0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	f040 80d1 	bne.w	8004a34 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004892:	f7ff fa1b 	bl	8003ccc <HAL_RCC_GetPCLK2Freq>
 8004896:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	469a      	mov	sl, r3
 800489c:	f04f 0b00 	mov.w	fp, #0
 80048a0:	46d0      	mov	r8, sl
 80048a2:	46d9      	mov	r9, fp
 80048a4:	eb18 0308 	adds.w	r3, r8, r8
 80048a8:	eb49 0409 	adc.w	r4, r9, r9
 80048ac:	4698      	mov	r8, r3
 80048ae:	46a1      	mov	r9, r4
 80048b0:	eb18 080a 	adds.w	r8, r8, sl
 80048b4:	eb49 090b 	adc.w	r9, r9, fp
 80048b8:	f04f 0100 	mov.w	r1, #0
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80048c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80048cc:	4688      	mov	r8, r1
 80048ce:	4691      	mov	r9, r2
 80048d0:	eb1a 0508 	adds.w	r5, sl, r8
 80048d4:	eb4b 0609 	adc.w	r6, fp, r9
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	4619      	mov	r1, r3
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	f04f 0400 	mov.w	r4, #0
 80048ea:	0094      	lsls	r4, r2, #2
 80048ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048f0:	008b      	lsls	r3, r1, #2
 80048f2:	461a      	mov	r2, r3
 80048f4:	4623      	mov	r3, r4
 80048f6:	4628      	mov	r0, r5
 80048f8:	4631      	mov	r1, r6
 80048fa:	f7fc f9a5 	bl	8000c48 <__aeabi_uldivmod>
 80048fe:	4603      	mov	r3, r0
 8004900:	460c      	mov	r4, r1
 8004902:	461a      	mov	r2, r3
 8004904:	4bb8      	ldr	r3, [pc, #736]	; (8004be8 <UART_SetConfig+0x6f4>)
 8004906:	fba3 2302 	umull	r2, r3, r3, r2
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	469b      	mov	fp, r3
 8004914:	f04f 0c00 	mov.w	ip, #0
 8004918:	46d9      	mov	r9, fp
 800491a:	46e2      	mov	sl, ip
 800491c:	eb19 0309 	adds.w	r3, r9, r9
 8004920:	eb4a 040a 	adc.w	r4, sl, sl
 8004924:	4699      	mov	r9, r3
 8004926:	46a2      	mov	sl, r4
 8004928:	eb19 090b 	adds.w	r9, r9, fp
 800492c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004930:	f04f 0100 	mov.w	r1, #0
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800493c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004940:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004944:	4689      	mov	r9, r1
 8004946:	4692      	mov	sl, r2
 8004948:	eb1b 0509 	adds.w	r5, fp, r9
 800494c:	eb4c 060a 	adc.w	r6, ip, sl
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	4619      	mov	r1, r3
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	f04f 0400 	mov.w	r4, #0
 8004962:	0094      	lsls	r4, r2, #2
 8004964:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004968:	008b      	lsls	r3, r1, #2
 800496a:	461a      	mov	r2, r3
 800496c:	4623      	mov	r3, r4
 800496e:	4628      	mov	r0, r5
 8004970:	4631      	mov	r1, r6
 8004972:	f7fc f969 	bl	8000c48 <__aeabi_uldivmod>
 8004976:	4603      	mov	r3, r0
 8004978:	460c      	mov	r4, r1
 800497a:	461a      	mov	r2, r3
 800497c:	4b9a      	ldr	r3, [pc, #616]	; (8004be8 <UART_SetConfig+0x6f4>)
 800497e:	fba3 1302 	umull	r1, r3, r3, r2
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2164      	movs	r1, #100	; 0x64
 8004986:	fb01 f303 	mul.w	r3, r1, r3
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	3332      	adds	r3, #50	; 0x32
 8004990:	4a95      	ldr	r2, [pc, #596]	; (8004be8 <UART_SetConfig+0x6f4>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800499c:	4498      	add	r8, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	469b      	mov	fp, r3
 80049a2:	f04f 0c00 	mov.w	ip, #0
 80049a6:	46d9      	mov	r9, fp
 80049a8:	46e2      	mov	sl, ip
 80049aa:	eb19 0309 	adds.w	r3, r9, r9
 80049ae:	eb4a 040a 	adc.w	r4, sl, sl
 80049b2:	4699      	mov	r9, r3
 80049b4:	46a2      	mov	sl, r4
 80049b6:	eb19 090b 	adds.w	r9, r9, fp
 80049ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80049be:	f04f 0100 	mov.w	r1, #0
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049d2:	4689      	mov	r9, r1
 80049d4:	4692      	mov	sl, r2
 80049d6:	eb1b 0509 	adds.w	r5, fp, r9
 80049da:	eb4c 060a 	adc.w	r6, ip, sl
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	4619      	mov	r1, r3
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	f04f 0400 	mov.w	r4, #0
 80049f0:	0094      	lsls	r4, r2, #2
 80049f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049f6:	008b      	lsls	r3, r1, #2
 80049f8:	461a      	mov	r2, r3
 80049fa:	4623      	mov	r3, r4
 80049fc:	4628      	mov	r0, r5
 80049fe:	4631      	mov	r1, r6
 8004a00:	f7fc f922 	bl	8000c48 <__aeabi_uldivmod>
 8004a04:	4603      	mov	r3, r0
 8004a06:	460c      	mov	r4, r1
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4b77      	ldr	r3, [pc, #476]	; (8004be8 <UART_SetConfig+0x6f4>)
 8004a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a10:	095b      	lsrs	r3, r3, #5
 8004a12:	2164      	movs	r1, #100	; 0x64
 8004a14:	fb01 f303 	mul.w	r3, r1, r3
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	3332      	adds	r3, #50	; 0x32
 8004a1e:	4a72      	ldr	r2, [pc, #456]	; (8004be8 <UART_SetConfig+0x6f4>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	095b      	lsrs	r3, r3, #5
 8004a26:	f003 020f 	and.w	r2, r3, #15
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4442      	add	r2, r8
 8004a30:	609a      	str	r2, [r3, #8]
 8004a32:	e0d0      	b.n	8004bd6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a34:	f7ff f936 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 8004a38:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	469a      	mov	sl, r3
 8004a3e:	f04f 0b00 	mov.w	fp, #0
 8004a42:	46d0      	mov	r8, sl
 8004a44:	46d9      	mov	r9, fp
 8004a46:	eb18 0308 	adds.w	r3, r8, r8
 8004a4a:	eb49 0409 	adc.w	r4, r9, r9
 8004a4e:	4698      	mov	r8, r3
 8004a50:	46a1      	mov	r9, r4
 8004a52:	eb18 080a 	adds.w	r8, r8, sl
 8004a56:	eb49 090b 	adc.w	r9, r9, fp
 8004a5a:	f04f 0100 	mov.w	r1, #0
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a66:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a6a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a6e:	4688      	mov	r8, r1
 8004a70:	4691      	mov	r9, r2
 8004a72:	eb1a 0508 	adds.w	r5, sl, r8
 8004a76:	eb4b 0609 	adc.w	r6, fp, r9
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	f04f 0400 	mov.w	r4, #0
 8004a8c:	0094      	lsls	r4, r2, #2
 8004a8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a92:	008b      	lsls	r3, r1, #2
 8004a94:	461a      	mov	r2, r3
 8004a96:	4623      	mov	r3, r4
 8004a98:	4628      	mov	r0, r5
 8004a9a:	4631      	mov	r1, r6
 8004a9c:	f7fc f8d4 	bl	8000c48 <__aeabi_uldivmod>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	4b50      	ldr	r3, [pc, #320]	; (8004be8 <UART_SetConfig+0x6f4>)
 8004aa8:	fba3 2302 	umull	r2, r3, r3, r2
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	469b      	mov	fp, r3
 8004ab6:	f04f 0c00 	mov.w	ip, #0
 8004aba:	46d9      	mov	r9, fp
 8004abc:	46e2      	mov	sl, ip
 8004abe:	eb19 0309 	adds.w	r3, r9, r9
 8004ac2:	eb4a 040a 	adc.w	r4, sl, sl
 8004ac6:	4699      	mov	r9, r3
 8004ac8:	46a2      	mov	sl, r4
 8004aca:	eb19 090b 	adds.w	r9, r9, fp
 8004ace:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ad2:	f04f 0100 	mov.w	r1, #0
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ade:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ae2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ae6:	4689      	mov	r9, r1
 8004ae8:	4692      	mov	sl, r2
 8004aea:	eb1b 0509 	adds.w	r5, fp, r9
 8004aee:	eb4c 060a 	adc.w	r6, ip, sl
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	4619      	mov	r1, r3
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	f04f 0400 	mov.w	r4, #0
 8004b04:	0094      	lsls	r4, r2, #2
 8004b06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b0a:	008b      	lsls	r3, r1, #2
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	4623      	mov	r3, r4
 8004b10:	4628      	mov	r0, r5
 8004b12:	4631      	mov	r1, r6
 8004b14:	f7fc f898 	bl	8000c48 <__aeabi_uldivmod>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	4b32      	ldr	r3, [pc, #200]	; (8004be8 <UART_SetConfig+0x6f4>)
 8004b20:	fba3 1302 	umull	r1, r3, r3, r2
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	2164      	movs	r1, #100	; 0x64
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	3332      	adds	r3, #50	; 0x32
 8004b32:	4a2d      	ldr	r2, [pc, #180]	; (8004be8 <UART_SetConfig+0x6f4>)
 8004b34:	fba2 2303 	umull	r2, r3, r2, r3
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b3e:	4498      	add	r8, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	469b      	mov	fp, r3
 8004b44:	f04f 0c00 	mov.w	ip, #0
 8004b48:	46d9      	mov	r9, fp
 8004b4a:	46e2      	mov	sl, ip
 8004b4c:	eb19 0309 	adds.w	r3, r9, r9
 8004b50:	eb4a 040a 	adc.w	r4, sl, sl
 8004b54:	4699      	mov	r9, r3
 8004b56:	46a2      	mov	sl, r4
 8004b58:	eb19 090b 	adds.w	r9, r9, fp
 8004b5c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b60:	f04f 0100 	mov.w	r1, #0
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b74:	4689      	mov	r9, r1
 8004b76:	4692      	mov	sl, r2
 8004b78:	eb1b 0509 	adds.w	r5, fp, r9
 8004b7c:	eb4c 060a 	adc.w	r6, ip, sl
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	4619      	mov	r1, r3
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	f04f 0300 	mov.w	r3, #0
 8004b8e:	f04f 0400 	mov.w	r4, #0
 8004b92:	0094      	lsls	r4, r2, #2
 8004b94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b98:	008b      	lsls	r3, r1, #2
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	4623      	mov	r3, r4
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	4631      	mov	r1, r6
 8004ba2:	f7fc f851 	bl	8000c48 <__aeabi_uldivmod>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	460c      	mov	r4, r1
 8004baa:	461a      	mov	r2, r3
 8004bac:	4b0e      	ldr	r3, [pc, #56]	; (8004be8 <UART_SetConfig+0x6f4>)
 8004bae:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	2164      	movs	r1, #100	; 0x64
 8004bb6:	fb01 f303 	mul.w	r3, r1, r3
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	3332      	adds	r3, #50	; 0x32
 8004bc0:	4a09      	ldr	r2, [pc, #36]	; (8004be8 <UART_SetConfig+0x6f4>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	f003 020f 	and.w	r2, r3, #15
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4442      	add	r2, r8
 8004bd2:	609a      	str	r2, [r3, #8]
}
 8004bd4:	e7ff      	b.n	8004bd6 <UART_SetConfig+0x6e2>
 8004bd6:	bf00      	nop
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004be0:	40011000 	.word	0x40011000
 8004be4:	40011400 	.word	0x40011400
 8004be8:	51eb851f 	.word	0x51eb851f

08004bec <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b089      	sub	sp, #36	; 0x24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	fa93 f3a3 	rbit	r3, r3
 8004c06:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	fab3 f383 	clz	r3, r3
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	2103      	movs	r1, #3
 8004c14:	fa01 f303 	lsl.w	r3, r1, r3
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	401a      	ands	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	fa93 f3a3 	rbit	r3, r3
 8004c26:	61bb      	str	r3, [r7, #24]
  return result;
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	fab3 f383 	clz	r3, r3
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	fa01 f303 	lsl.w	r3, r1, r3
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	601a      	str	r2, [r3, #0]
}
 8004c3e:	bf00      	nop
 8004c40:	3724      	adds	r7, #36	; 0x24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b089      	sub	sp, #36	; 0x24
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, (GPIO_OTYPER_OT_0 << POSITION_VAL(Pin)), (OutputType << POSITION_VAL(Pin)));
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	fa93 f3a3 	rbit	r3, r3
 8004c64:	613b      	str	r3, [r7, #16]
  return result;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	fab3 f383 	clz	r3, r3
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	4619      	mov	r1, r3
 8004c70:	2301      	movs	r3, #1
 8004c72:	408b      	lsls	r3, r1
 8004c74:	43db      	mvns	r3, r3
 8004c76:	401a      	ands	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	fa93 f3a3 	rbit	r3, r3
 8004c82:	61bb      	str	r3, [r7, #24]
  return result;
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	fab3 f383 	clz	r3, r3
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	408b      	lsls	r3, r1
 8004c92:	431a      	orrs	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	605a      	str	r2, [r3, #4]
}
 8004c98:	bf00      	nop
 8004c9a:	3724      	adds	r7, #36	; 0x24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b089      	sub	sp, #36	; 0x24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	fa93 f3a3 	rbit	r3, r3
 8004cbe:	613b      	str	r3, [r7, #16]
  return result;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	fab3 f383 	clz	r3, r3
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	2103      	movs	r1, #3
 8004ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	401a      	ands	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	fa93 f3a3 	rbit	r3, r3
 8004cde:	61bb      	str	r3, [r7, #24]
  return result;
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	fab3 f383 	clz	r3, r3
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004cf6:	bf00      	nop
 8004cf8:	3724      	adds	r7, #36	; 0x24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b089      	sub	sp, #36	; 0x24
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	fa93 f3a3 	rbit	r3, r3
 8004d1c:	613b      	str	r3, [r7, #16]
  return result;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	fab3 f383 	clz	r3, r3
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	2103      	movs	r1, #3
 8004d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	401a      	ands	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	fa93 f3a3 	rbit	r3, r3
 8004d3c:	61bb      	str	r3, [r7, #24]
  return result;
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	fab3 f383 	clz	r3, r3
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	60da      	str	r2, [r3, #12]
}
 8004d54:	bf00      	nop
 8004d56:	3724      	adds	r7, #36	; 0x24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b089      	sub	sp, #36	; 0x24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a1a      	ldr	r2, [r3, #32]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	fa93 f3a3 	rbit	r3, r3
 8004d7a:	613b      	str	r3, [r7, #16]
  return result;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	fab3 f383 	clz	r3, r3
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	210f      	movs	r1, #15
 8004d88:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	401a      	ands	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	fa93 f3a3 	rbit	r3, r3
 8004d9a:	61bb      	str	r3, [r7, #24]
  return result;
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	fab3 f383 	clz	r3, r3
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dac:	431a      	orrs	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004db2:	bf00      	nop
 8004db4:	3724      	adds	r7, #36	; 0x24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b089      	sub	sp, #36	; 0x24
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	0a1b      	lsrs	r3, r3, #8
 8004dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	fa93 f3a3 	rbit	r3, r3
 8004dda:	613b      	str	r3, [r7, #16]
  return result;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	fab3 f383 	clz	r3, r3
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	210f      	movs	r1, #15
 8004de8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dec:	43db      	mvns	r3, r3
 8004dee:	401a      	ands	r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	0a1b      	lsrs	r3, r3, #8
 8004df4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	fa93 f3a3 	rbit	r3, r3
 8004dfc:	61bb      	str	r3, [r7, #24]
  return result;
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	fab3 f383 	clz	r3, r3
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8004e14:	bf00      	nop
 8004e16:	3724      	adds	r7, #36	; 0x24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	fa93 f3a3 	rbit	r3, r3
 8004e3e:	613b      	str	r3, [r7, #16]
  return result;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	fab3 f383 	clz	r3, r3
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004e4a:	e050      	b.n	8004eee <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	2101      	movs	r1, #1
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	fa01 f303 	lsl.w	r3, r1, r3
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d042      	beq.n	8004ee8 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d003      	beq.n	8004e72 <LL_GPIO_Init+0x52>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d10d      	bne.n	8004e8e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	461a      	mov	r2, r3
 8004e78:	69b9      	ldr	r1, [r7, #24]
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff ff12 	bl	8004ca4 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	461a      	mov	r2, r3
 8004e86:	69b9      	ldr	r1, [r7, #24]
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff fede 	bl	8004c4a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	461a      	mov	r2, r3
 8004e94:	69b9      	ldr	r1, [r7, #24]
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff ff33 	bl	8004d02 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d11a      	bne.n	8004eda <LL_GPIO_Init+0xba>
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	fa93 f3a3 	rbit	r3, r3
 8004eae:	60bb      	str	r3, [r7, #8]
  return result;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004eb2:	fab3 f383 	clz	r3, r3
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b07      	cmp	r3, #7
 8004eba:	d807      	bhi.n	8004ecc <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	69b9      	ldr	r1, [r7, #24]
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff ff4b 	bl	8004d60 <LL_GPIO_SetAFPin_0_7>
 8004eca:	e006      	b.n	8004eda <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	69b9      	ldr	r1, [r7, #24]
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff ff72 	bl	8004dbe <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	69b9      	ldr	r1, [r7, #24]
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff fe82 	bl	8004bec <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	3301      	adds	r3, #1
 8004eec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1a7      	bne.n	8004e4c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3720      	adds	r7, #32
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004f0c:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <LL_RCC_GetSysClkSource+0x18>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 030c 	and.w	r3, r3, #12
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40023800 	.word	0x40023800

08004f24 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004f28:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <LL_RCC_GetAHBPrescaler+0x18>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40023800 	.word	0x40023800

08004f40 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004f44:	4b04      	ldr	r3, [pc, #16]	; (8004f58 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	40023800 	.word	0x40023800

08004f5c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004f60:	4b04      	ldr	r3, [pc, #16]	; (8004f74 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40023800 	.word	0x40023800

08004f78 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004f7c:	4b04      	ldr	r3, [pc, #16]	; (8004f90 <LL_RCC_PLL_GetMainSource+0x18>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40023800 	.word	0x40023800

08004f94 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004f98:	4b04      	ldr	r3, [pc, #16]	; (8004fac <LL_RCC_PLL_GetN+0x18>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	099b      	lsrs	r3, r3, #6
 8004f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	40023800 	.word	0x40023800

08004fb0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004fb4:	4b04      	ldr	r3, [pc, #16]	; (8004fc8 <LL_RCC_PLL_GetP+0x18>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40023800 	.word	0x40023800

08004fcc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004fd0:	4b04      	ldr	r3, [pc, #16]	; (8004fe4 <LL_RCC_PLL_GetDivider+0x18>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40023800 	.word	0x40023800

08004fe8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004ff0:	f000 f820 	bl	8005034 <RCC_GetSystemClockFreq>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 f83e 	bl	8005080 <RCC_GetHCLKClockFreq>
 8005004:	4602      	mov	r2, r0
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	4618      	mov	r0, r3
 8005010:	f000 f84c 	bl	80050ac <RCC_GetPCLK1ClockFreq>
 8005014:	4602      	mov	r2, r0
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	4618      	mov	r0, r3
 8005020:	f000 f858 	bl	80050d4 <RCC_GetPCLK2ClockFreq>
 8005024:	4602      	mov	r2, r0
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60da      	str	r2, [r3, #12]
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800503e:	f7ff ff63 	bl	8004f08 <LL_RCC_GetSysClkSource>
 8005042:	4603      	mov	r3, r0
 8005044:	2b04      	cmp	r3, #4
 8005046:	d006      	beq.n	8005056 <RCC_GetSystemClockFreq+0x22>
 8005048:	2b08      	cmp	r3, #8
 800504a:	d007      	beq.n	800505c <RCC_GetSystemClockFreq+0x28>
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10a      	bne.n	8005066 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005050:	4b09      	ldr	r3, [pc, #36]	; (8005078 <RCC_GetSystemClockFreq+0x44>)
 8005052:	607b      	str	r3, [r7, #4]
      break;
 8005054:	e00a      	b.n	800506c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005056:	4b09      	ldr	r3, [pc, #36]	; (800507c <RCC_GetSystemClockFreq+0x48>)
 8005058:	607b      	str	r3, [r7, #4]
      break;
 800505a:	e007      	b.n	800506c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800505c:	2008      	movs	r0, #8
 800505e:	f000 f84d 	bl	80050fc <RCC_PLL_GetFreqDomain_SYS>
 8005062:	6078      	str	r0, [r7, #4]
      break;
 8005064:	e002      	b.n	800506c <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8005066:	4b04      	ldr	r3, [pc, #16]	; (8005078 <RCC_GetSystemClockFreq+0x44>)
 8005068:	607b      	str	r3, [r7, #4]
      break;
 800506a:	bf00      	nop
  }

  return frequency;
 800506c:	687b      	ldr	r3, [r7, #4]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	00f42400 	.word	0x00f42400
 800507c:	007a1200 	.word	0x007a1200

08005080 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005088:	f7ff ff4c 	bl	8004f24 <LL_RCC_GetAHBPrescaler>
 800508c:	4603      	mov	r3, r0
 800508e:	091b      	lsrs	r3, r3, #4
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	4a04      	ldr	r2, [pc, #16]	; (80050a8 <RCC_GetHCLKClockFreq+0x28>)
 8005096:	5cd3      	ldrb	r3, [r2, r3]
 8005098:	461a      	mov	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	40d3      	lsrs	r3, r2
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	0800fe84 	.word	0x0800fe84

080050ac <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80050b4:	f7ff ff44 	bl	8004f40 <LL_RCC_GetAPB1Prescaler>
 80050b8:	4603      	mov	r3, r0
 80050ba:	0a9b      	lsrs	r3, r3, #10
 80050bc:	4a04      	ldr	r2, [pc, #16]	; (80050d0 <RCC_GetPCLK1ClockFreq+0x24>)
 80050be:	5cd3      	ldrb	r3, [r2, r3]
 80050c0:	461a      	mov	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	40d3      	lsrs	r3, r2
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	0800fe94 	.word	0x0800fe94

080050d4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80050dc:	f7ff ff3e 	bl	8004f5c <LL_RCC_GetAPB2Prescaler>
 80050e0:	4603      	mov	r3, r0
 80050e2:	0b5b      	lsrs	r3, r3, #13
 80050e4:	4a04      	ldr	r2, [pc, #16]	; (80050f8 <RCC_GetPCLK2ClockFreq+0x24>)
 80050e6:	5cd3      	ldrb	r3, [r2, r3]
 80050e8:	461a      	mov	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	40d3      	lsrs	r3, r2
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	0800fe94 	.word	0x0800fe94

080050fc <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80050fc:	b590      	push	{r4, r7, lr}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	2300      	movs	r3, #0
 800510e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005110:	f7ff ff32 	bl	8004f78 <LL_RCC_PLL_GetMainSource>
 8005114:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800511c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005120:	d003      	beq.n	800512a <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8005122:	e005      	b.n	8005130 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005124:	4b12      	ldr	r3, [pc, #72]	; (8005170 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005126:	617b      	str	r3, [r7, #20]
      break;
 8005128:	e005      	b.n	8005136 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800512a:	4b12      	ldr	r3, [pc, #72]	; (8005174 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800512c:	617b      	str	r3, [r7, #20]
      break;
 800512e:	e002      	b.n	8005136 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8005130:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8005132:	617b      	str	r3, [r7, #20]
      break;
 8005134:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b08      	cmp	r3, #8
 800513a:	d113      	bne.n	8005164 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800513c:	f7ff ff46 	bl	8004fcc <LL_RCC_PLL_GetDivider>
 8005140:	4602      	mov	r2, r0
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	fbb3 f4f2 	udiv	r4, r3, r2
 8005148:	f7ff ff24 	bl	8004f94 <LL_RCC_PLL_GetN>
 800514c:	4603      	mov	r3, r0
 800514e:	fb03 f404 	mul.w	r4, r3, r4
 8005152:	f7ff ff2d 	bl	8004fb0 <LL_RCC_PLL_GetP>
 8005156:	4603      	mov	r3, r0
 8005158:	0c1b      	lsrs	r3, r3, #16
 800515a:	3301      	adds	r3, #1
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	fbb4 f3f3 	udiv	r3, r4, r3
 8005162:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8005164:	693b      	ldr	r3, [r7, #16]
}
 8005166:	4618      	mov	r0, r3
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	bd90      	pop	{r4, r7, pc}
 800516e:	bf00      	nop
 8005170:	00f42400 	.word	0x00f42400
 8005174:	007a1200 	.word	0x007a1200

08005178 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005188:	2b40      	cmp	r3, #64	; 0x40
 800518a:	d101      	bne.n	8005190 <LL_SPI_IsEnabled+0x18>
 800518c:	2301      	movs	r3, #1
 800518e:	e000      	b.n	8005192 <LL_SPI_IsEnabled+0x1a>
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	611a      	str	r2, [r3, #16]
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b084      	sub	sp, #16
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff ffd3 	bl	8005178 <LL_SPI_IsEnabled>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d139      	bne.n	800524c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051e0:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	6811      	ldr	r1, [r2, #0]
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	6852      	ldr	r2, [r2, #4]
 80051ec:	4311      	orrs	r1, r2
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	6892      	ldr	r2, [r2, #8]
 80051f2:	4311      	orrs	r1, r2
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	68d2      	ldr	r2, [r2, #12]
 80051f8:	4311      	orrs	r1, r2
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	6912      	ldr	r2, [r2, #16]
 80051fe:	4311      	orrs	r1, r2
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	6952      	ldr	r2, [r2, #20]
 8005204:	4311      	orrs	r1, r2
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	6992      	ldr	r2, [r2, #24]
 800520a:	4311      	orrs	r1, r2
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	69d2      	ldr	r2, [r2, #28]
 8005210:	4311      	orrs	r1, r2
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	6a12      	ldr	r2, [r2, #32]
 8005216:	430a      	orrs	r2, r1
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f023 0204 	bic.w	r2, r3, #4
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	0c1b      	lsrs	r3, r3, #16
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800523a:	d105      	bne.n	8005248 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	4619      	mov	r1, r3
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7ff ffab 	bl	800519e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8005248:	2300      	movs	r3, #0
 800524a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	61da      	str	r2, [r3, #28]
  return status;
 8005258:	7bfb      	ldrb	r3, [r7, #15]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8005262:	b480      	push	{r7}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	f043 0201 	orr.w	r2, r3, #1
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	615a      	str	r2, [r3, #20]
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a3d      	ldr	r2, [pc, #244]	; (8005450 <LL_TIM_Init+0x108>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d013      	beq.n	8005388 <LL_TIM_Init+0x40>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005366:	d00f      	beq.n	8005388 <LL_TIM_Init+0x40>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a3a      	ldr	r2, [pc, #232]	; (8005454 <LL_TIM_Init+0x10c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00b      	beq.n	8005388 <LL_TIM_Init+0x40>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a39      	ldr	r2, [pc, #228]	; (8005458 <LL_TIM_Init+0x110>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d007      	beq.n	8005388 <LL_TIM_Init+0x40>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a38      	ldr	r2, [pc, #224]	; (800545c <LL_TIM_Init+0x114>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d003      	beq.n	8005388 <LL_TIM_Init+0x40>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a37      	ldr	r2, [pc, #220]	; (8005460 <LL_TIM_Init+0x118>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d106      	bne.n	8005396 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a2d      	ldr	r2, [pc, #180]	; (8005450 <LL_TIM_Init+0x108>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d02b      	beq.n	80053f6 <LL_TIM_Init+0xae>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a4:	d027      	beq.n	80053f6 <LL_TIM_Init+0xae>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2a      	ldr	r2, [pc, #168]	; (8005454 <LL_TIM_Init+0x10c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d023      	beq.n	80053f6 <LL_TIM_Init+0xae>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a29      	ldr	r2, [pc, #164]	; (8005458 <LL_TIM_Init+0x110>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d01f      	beq.n	80053f6 <LL_TIM_Init+0xae>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a28      	ldr	r2, [pc, #160]	; (800545c <LL_TIM_Init+0x114>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01b      	beq.n	80053f6 <LL_TIM_Init+0xae>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a27      	ldr	r2, [pc, #156]	; (8005460 <LL_TIM_Init+0x118>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d017      	beq.n	80053f6 <LL_TIM_Init+0xae>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a26      	ldr	r2, [pc, #152]	; (8005464 <LL_TIM_Init+0x11c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <LL_TIM_Init+0xae>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a25      	ldr	r2, [pc, #148]	; (8005468 <LL_TIM_Init+0x120>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00f      	beq.n	80053f6 <LL_TIM_Init+0xae>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a24      	ldr	r2, [pc, #144]	; (800546c <LL_TIM_Init+0x124>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00b      	beq.n	80053f6 <LL_TIM_Init+0xae>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a23      	ldr	r2, [pc, #140]	; (8005470 <LL_TIM_Init+0x128>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d007      	beq.n	80053f6 <LL_TIM_Init+0xae>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a22      	ldr	r2, [pc, #136]	; (8005474 <LL_TIM_Init+0x12c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d003      	beq.n	80053f6 <LL_TIM_Init+0xae>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a21      	ldr	r2, [pc, #132]	; (8005478 <LL_TIM_Init+0x130>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d106      	bne.n	8005404 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	4619      	mov	r1, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7ff ff34 	bl	800527e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	4619      	mov	r1, r3
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff ff20 	bl	8005262 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a0a      	ldr	r2, [pc, #40]	; (8005450 <LL_TIM_Init+0x108>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d003      	beq.n	8005432 <LL_TIM_Init+0xea>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a0c      	ldr	r2, [pc, #48]	; (8005460 <LL_TIM_Init+0x118>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d105      	bne.n	800543e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	7c1b      	ldrb	r3, [r3, #16]
 8005436:	4619      	mov	r1, r3
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff ff2e 	bl	800529a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff ff71 	bl	8005326 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	40010000 	.word	0x40010000
 8005454:	40000400 	.word	0x40000400
 8005458:	40000800 	.word	0x40000800
 800545c:	40000c00 	.word	0x40000c00
 8005460:	40010400 	.word	0x40010400
 8005464:	40014000 	.word	0x40014000
 8005468:	40014400 	.word	0x40014400
 800546c:	40014800 	.word	0x40014800
 8005470:	40001800 	.word	0x40001800
 8005474:	40001c00 	.word	0x40001c00
 8005478:	40002000 	.word	0x40002000

0800547c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b10      	cmp	r3, #16
 8005490:	d012      	beq.n	80054b8 <LL_TIM_OC_Init+0x3c>
 8005492:	2b10      	cmp	r3, #16
 8005494:	d802      	bhi.n	800549c <LL_TIM_OC_Init+0x20>
 8005496:	2b01      	cmp	r3, #1
 8005498:	d007      	beq.n	80054aa <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800549a:	e022      	b.n	80054e2 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 800549c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a0:	d011      	beq.n	80054c6 <LL_TIM_OC_Init+0x4a>
 80054a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a6:	d015      	beq.n	80054d4 <LL_TIM_OC_Init+0x58>
      break;
 80054a8:	e01b      	b.n	80054e2 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f81d 	bl	80054ec <OC1Config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	75fb      	strb	r3, [r7, #23]
      break;
 80054b6:	e014      	b.n	80054e2 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 f882 	bl	80055c4 <OC2Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	75fb      	strb	r3, [r7, #23]
      break;
 80054c4:	e00d      	b.n	80054e2 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 f8eb 	bl	80056a4 <OC3Config>
 80054ce:	4603      	mov	r3, r0
 80054d0:	75fb      	strb	r3, [r7, #23]
      break;
 80054d2:	e006      	b.n	80054e2 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 f954 	bl	8005784 <OC4Config>
 80054dc:	4603      	mov	r3, r0
 80054de:	75fb      	strb	r3, [r7, #23]
      break;
 80054e0:	bf00      	nop
  }

  return result;
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	f023 0201 	bic.w	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0303 	bic.w	r3, r3, #3
 800551a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f023 0202 	bic.w	r2, r3, #2
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f023 0201 	bic.w	r2, r3, #1
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	4313      	orrs	r3, r2
 8005544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a1c      	ldr	r2, [pc, #112]	; (80055bc <OC1Config+0xd0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d003      	beq.n	8005556 <OC1Config+0x6a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a1b      	ldr	r2, [pc, #108]	; (80055c0 <OC1Config+0xd4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d11e      	bne.n	8005594 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f023 0208 	bic.w	r2, r3, #8
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f023 0204 	bic.w	r2, r3, #4
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4313      	orrs	r3, r2
 8005574:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	4619      	mov	r1, r3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff fe85 	bl	80052b6 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40010000 	.word	0x40010000
 80055c0:	40010400 	.word	0x40010400

080055c4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	f023 0210 	bic.w	r2, r3, #16
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	021b      	lsls	r3, r3, #8
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f023 0220 	bic.w	r2, r3, #32
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f023 0210 	bic.w	r2, r3, #16
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a1d      	ldr	r2, [pc, #116]	; (800569c <OC2Config+0xd8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d003      	beq.n	8005634 <OC2Config+0x70>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a1c      	ldr	r2, [pc, #112]	; (80056a0 <OC2Config+0xdc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d11f      	bne.n	8005674 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	019b      	lsls	r3, r3, #6
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	019b      	lsls	r3, r3, #6
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4313      	orrs	r3, r2
 8005662:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	4619      	mov	r1, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff fe23 	bl	80052d2 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40010000 	.word	0x40010000
 80056a0:	40010400 	.word	0x40010400

080056a4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0303 	bic.w	r3, r3, #3
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	021b      	lsls	r3, r3, #8
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	021b      	lsls	r3, r3, #8
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a1d      	ldr	r2, [pc, #116]	; (800577c <OC3Config+0xd8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <OC3Config+0x6e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a1c      	ldr	r2, [pc, #112]	; (8005780 <OC3Config+0xdc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d11f      	bne.n	8005752 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	029b      	lsls	r3, r3, #10
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	029b      	lsls	r3, r3, #10
 800572e:	4313      	orrs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	4313      	orrs	r3, r2
 8005740:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	015b      	lsls	r3, r3, #5
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7ff fdc2 	bl	80052ee <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	40010000 	.word	0x40010000
 8005780:	40010400 	.word	0x40010400

08005784 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	021b      	lsls	r3, r3, #8
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	031b      	lsls	r3, r3, #12
 80057d0:	4313      	orrs	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	031b      	lsls	r3, r3, #12
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a11      	ldr	r2, [pc, #68]	; (800582c <OC4Config+0xa8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <OC4Config+0x70>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a10      	ldr	r2, [pc, #64]	; (8005830 <OC4Config+0xac>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d107      	bne.n	8005804 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	019b      	lsls	r3, r3, #6
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	4619      	mov	r1, r3
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff fd77 	bl	800530a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40010000 	.word	0x40010000
 8005830:	40010400 	.word	0x40010400

08005834 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005848:	bf0c      	ite	eq
 800584a:	2301      	moveq	r3, #1
 800584c:	2300      	movne	r3, #0
 800584e:	b2db      	uxtb	r3, r3
}
 8005850:	4618      	mov	r0, r3
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	431a      	orrs	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	611a      	str	r2, [r3, #16]
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	615a      	str	r2, [r3, #20]
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 80058a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ac:	b085      	sub	sp, #20
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	607a      	str	r2, [r7, #4]
 80058b6:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058be:	f040 80c1 	bne.w	8005a44 <LL_USART_SetBaudRate+0x19c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	461d      	mov	r5, r3
 80058c6:	f04f 0600 	mov.w	r6, #0
 80058ca:	46a8      	mov	r8, r5
 80058cc:	46b1      	mov	r9, r6
 80058ce:	eb18 0308 	adds.w	r3, r8, r8
 80058d2:	eb49 0409 	adc.w	r4, r9, r9
 80058d6:	4698      	mov	r8, r3
 80058d8:	46a1      	mov	r9, r4
 80058da:	eb18 0805 	adds.w	r8, r8, r5
 80058de:	eb49 0906 	adc.w	r9, r9, r6
 80058e2:	f04f 0100 	mov.w	r1, #0
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80058ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80058f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80058f6:	4688      	mov	r8, r1
 80058f8:	4691      	mov	r9, r2
 80058fa:	eb18 0005 	adds.w	r0, r8, r5
 80058fe:	eb49 0106 	adc.w	r1, r9, r6
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	461d      	mov	r5, r3
 8005906:	f04f 0600 	mov.w	r6, #0
 800590a:	196b      	adds	r3, r5, r5
 800590c:	eb46 0406 	adc.w	r4, r6, r6
 8005910:	461a      	mov	r2, r3
 8005912:	4623      	mov	r3, r4
 8005914:	f7fb f998 	bl	8000c48 <__aeabi_uldivmod>
 8005918:	4603      	mov	r3, r0
 800591a:	460c      	mov	r4, r1
 800591c:	461a      	mov	r2, r3
 800591e:	4bb5      	ldr	r3, [pc, #724]	; (8005bf4 <LL_USART_SetBaudRate+0x34c>)
 8005920:	fba3 2302 	umull	r2, r3, r3, r2
 8005924:	095b      	lsrs	r3, r3, #5
 8005926:	b29b      	uxth	r3, r3
 8005928:	011b      	lsls	r3, r3, #4
 800592a:	fa1f f883 	uxth.w	r8, r3
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	461d      	mov	r5, r3
 8005932:	f04f 0600 	mov.w	r6, #0
 8005936:	46a9      	mov	r9, r5
 8005938:	46b2      	mov	sl, r6
 800593a:	eb19 0309 	adds.w	r3, r9, r9
 800593e:	eb4a 040a 	adc.w	r4, sl, sl
 8005942:	4699      	mov	r9, r3
 8005944:	46a2      	mov	sl, r4
 8005946:	eb19 0905 	adds.w	r9, r9, r5
 800594a:	eb4a 0a06 	adc.w	sl, sl, r6
 800594e:	f04f 0100 	mov.w	r1, #0
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800595a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800595e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005962:	4689      	mov	r9, r1
 8005964:	4692      	mov	sl, r2
 8005966:	eb19 0005 	adds.w	r0, r9, r5
 800596a:	eb4a 0106 	adc.w	r1, sl, r6
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	461d      	mov	r5, r3
 8005972:	f04f 0600 	mov.w	r6, #0
 8005976:	196b      	adds	r3, r5, r5
 8005978:	eb46 0406 	adc.w	r4, r6, r6
 800597c:	461a      	mov	r2, r3
 800597e:	4623      	mov	r3, r4
 8005980:	f7fb f962 	bl	8000c48 <__aeabi_uldivmod>
 8005984:	4603      	mov	r3, r0
 8005986:	460c      	mov	r4, r1
 8005988:	461a      	mov	r2, r3
 800598a:	4b9a      	ldr	r3, [pc, #616]	; (8005bf4 <LL_USART_SetBaudRate+0x34c>)
 800598c:	fba3 1302 	umull	r1, r3, r3, r2
 8005990:	095b      	lsrs	r3, r3, #5
 8005992:	2164      	movs	r1, #100	; 0x64
 8005994:	fb01 f303 	mul.w	r3, r1, r3
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	3332      	adds	r3, #50	; 0x32
 800599e:	4a95      	ldr	r2, [pc, #596]	; (8005bf4 <LL_USART_SetBaudRate+0x34c>)
 80059a0:	fba2 2303 	umull	r2, r3, r2, r3
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	4443      	add	r3, r8
 80059b4:	fa1f f883 	uxth.w	r8, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	461d      	mov	r5, r3
 80059bc:	f04f 0600 	mov.w	r6, #0
 80059c0:	46a9      	mov	r9, r5
 80059c2:	46b2      	mov	sl, r6
 80059c4:	eb19 0309 	adds.w	r3, r9, r9
 80059c8:	eb4a 040a 	adc.w	r4, sl, sl
 80059cc:	4699      	mov	r9, r3
 80059ce:	46a2      	mov	sl, r4
 80059d0:	eb19 0905 	adds.w	r9, r9, r5
 80059d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80059d8:	f04f 0100 	mov.w	r1, #0
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059ec:	4689      	mov	r9, r1
 80059ee:	4692      	mov	sl, r2
 80059f0:	eb19 0005 	adds.w	r0, r9, r5
 80059f4:	eb4a 0106 	adc.w	r1, sl, r6
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	461d      	mov	r5, r3
 80059fc:	f04f 0600 	mov.w	r6, #0
 8005a00:	196b      	adds	r3, r5, r5
 8005a02:	eb46 0406 	adc.w	r4, r6, r6
 8005a06:	461a      	mov	r2, r3
 8005a08:	4623      	mov	r3, r4
 8005a0a:	f7fb f91d 	bl	8000c48 <__aeabi_uldivmod>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	460c      	mov	r4, r1
 8005a12:	461a      	mov	r2, r3
 8005a14:	4b77      	ldr	r3, [pc, #476]	; (8005bf4 <LL_USART_SetBaudRate+0x34c>)
 8005a16:	fba3 1302 	umull	r1, r3, r3, r2
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	2164      	movs	r1, #100	; 0x64
 8005a1e:	fb01 f303 	mul.w	r3, r1, r3
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	3332      	adds	r3, #50	; 0x32
 8005a28:	4a72      	ldr	r2, [pc, #456]	; (8005bf4 <LL_USART_SetBaudRate+0x34c>)
 8005a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	4443      	add	r3, r8
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8005a42:	e0d2      	b.n	8005bea <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	469a      	mov	sl, r3
 8005a48:	f04f 0b00 	mov.w	fp, #0
 8005a4c:	46d0      	mov	r8, sl
 8005a4e:	46d9      	mov	r9, fp
 8005a50:	eb18 0308 	adds.w	r3, r8, r8
 8005a54:	eb49 0409 	adc.w	r4, r9, r9
 8005a58:	4698      	mov	r8, r3
 8005a5a:	46a1      	mov	r9, r4
 8005a5c:	eb18 080a 	adds.w	r8, r8, sl
 8005a60:	eb49 090b 	adc.w	r9, r9, fp
 8005a64:	f04f 0100 	mov.w	r1, #0
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a70:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a74:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a78:	4688      	mov	r8, r1
 8005a7a:	4691      	mov	r9, r2
 8005a7c:	eb1a 0508 	adds.w	r5, sl, r8
 8005a80:	eb4b 0609 	adc.w	r6, fp, r9
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	4619      	mov	r1, r3
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	f04f 0400 	mov.w	r4, #0
 8005a94:	0094      	lsls	r4, r2, #2
 8005a96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a9a:	008b      	lsls	r3, r1, #2
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	4623      	mov	r3, r4
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	f7fb f8d0 	bl	8000c48 <__aeabi_uldivmod>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	460c      	mov	r4, r1
 8005aac:	461a      	mov	r2, r3
 8005aae:	4b51      	ldr	r3, [pc, #324]	; (8005bf4 <LL_USART_SetBaudRate+0x34c>)
 8005ab0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	fa1f f883 	uxth.w	r8, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	469b      	mov	fp, r3
 8005ac2:	f04f 0c00 	mov.w	ip, #0
 8005ac6:	46d9      	mov	r9, fp
 8005ac8:	46e2      	mov	sl, ip
 8005aca:	eb19 0309 	adds.w	r3, r9, r9
 8005ace:	eb4a 040a 	adc.w	r4, sl, sl
 8005ad2:	4699      	mov	r9, r3
 8005ad4:	46a2      	mov	sl, r4
 8005ad6:	eb19 090b 	adds.w	r9, r9, fp
 8005ada:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ade:	f04f 0100 	mov.w	r1, #0
 8005ae2:	f04f 0200 	mov.w	r2, #0
 8005ae6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005aea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005aee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005af2:	4689      	mov	r9, r1
 8005af4:	4692      	mov	sl, r2
 8005af6:	eb1b 0509 	adds.w	r5, fp, r9
 8005afa:	eb4c 060a 	adc.w	r6, ip, sl
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	4619      	mov	r1, r3
 8005b02:	f04f 0200 	mov.w	r2, #0
 8005b06:	f04f 0300 	mov.w	r3, #0
 8005b0a:	f04f 0400 	mov.w	r4, #0
 8005b0e:	0094      	lsls	r4, r2, #2
 8005b10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b14:	008b      	lsls	r3, r1, #2
 8005b16:	461a      	mov	r2, r3
 8005b18:	4623      	mov	r3, r4
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	4631      	mov	r1, r6
 8005b1e:	f7fb f893 	bl	8000c48 <__aeabi_uldivmod>
 8005b22:	4603      	mov	r3, r0
 8005b24:	460c      	mov	r4, r1
 8005b26:	461a      	mov	r2, r3
 8005b28:	4b32      	ldr	r3, [pc, #200]	; (8005bf4 <LL_USART_SetBaudRate+0x34c>)
 8005b2a:	fba3 1302 	umull	r1, r3, r3, r2
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	2164      	movs	r1, #100	; 0x64
 8005b32:	fb01 f303 	mul.w	r3, r1, r3
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	3332      	adds	r3, #50	; 0x32
 8005b3c:	4a2d      	ldr	r2, [pc, #180]	; (8005bf4 <LL_USART_SetBaudRate+0x34c>)
 8005b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	4443      	add	r3, r8
 8005b4e:	fa1f f883 	uxth.w	r8, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	469b      	mov	fp, r3
 8005b56:	f04f 0c00 	mov.w	ip, #0
 8005b5a:	46d9      	mov	r9, fp
 8005b5c:	46e2      	mov	sl, ip
 8005b5e:	eb19 0309 	adds.w	r3, r9, r9
 8005b62:	eb4a 040a 	adc.w	r4, sl, sl
 8005b66:	4699      	mov	r9, r3
 8005b68:	46a2      	mov	sl, r4
 8005b6a:	eb19 090b 	adds.w	r9, r9, fp
 8005b6e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b72:	f04f 0100 	mov.w	r1, #0
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b86:	4689      	mov	r9, r1
 8005b88:	4692      	mov	sl, r2
 8005b8a:	eb1b 0509 	adds.w	r5, fp, r9
 8005b8e:	eb4c 060a 	adc.w	r6, ip, sl
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	4619      	mov	r1, r3
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	f04f 0400 	mov.w	r4, #0
 8005ba2:	0094      	lsls	r4, r2, #2
 8005ba4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ba8:	008b      	lsls	r3, r1, #2
 8005baa:	461a      	mov	r2, r3
 8005bac:	4623      	mov	r3, r4
 8005bae:	4628      	mov	r0, r5
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	f7fb f849 	bl	8000c48 <__aeabi_uldivmod>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	460c      	mov	r4, r1
 8005bba:	461a      	mov	r2, r3
 8005bbc:	4b0d      	ldr	r3, [pc, #52]	; (8005bf4 <LL_USART_SetBaudRate+0x34c>)
 8005bbe:	fba3 1302 	umull	r1, r3, r3, r2
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	2164      	movs	r1, #100	; 0x64
 8005bc6:	fb01 f303 	mul.w	r3, r1, r3
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	3332      	adds	r3, #50	; 0x32
 8005bd0:	4a08      	ldr	r2, [pc, #32]	; (8005bf4 <LL_USART_SetBaudRate+0x34c>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	4443      	add	r3, r8
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	461a      	mov	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	609a      	str	r2, [r3, #8]
}
 8005bea:	bf00      	nop
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf4:	51eb851f 	.word	0x51eb851f

08005bf8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005c06:	2300      	movs	r3, #0
 8005c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff fe12 	bl	8005834 <LL_USART_IsEnabled>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d15e      	bne.n	8005cd4 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c1e:	f023 030c 	bic.w	r3, r3, #12
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	6851      	ldr	r1, [r2, #4]
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	68d2      	ldr	r2, [r2, #12]
 8005c2a:	4311      	orrs	r1, r2
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	6912      	ldr	r2, [r2, #16]
 8005c30:	4311      	orrs	r1, r2
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	6992      	ldr	r2, [r2, #24]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	4619      	mov	r1, r3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7ff fe09 	bl	800585c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7ff fe16 	bl	8005882 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005c56:	f107 0308 	add.w	r3, r7, #8
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff f9c4 	bl	8004fe8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a1f      	ldr	r2, [pc, #124]	; (8005ce0 <LL_USART_Init+0xe8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d102      	bne.n	8005c6e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	e021      	b.n	8005cb2 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a1c      	ldr	r2, [pc, #112]	; (8005ce4 <LL_USART_Init+0xec>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d102      	bne.n	8005c7c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	61bb      	str	r3, [r7, #24]
 8005c7a:	e01a      	b.n	8005cb2 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a1a      	ldr	r2, [pc, #104]	; (8005ce8 <LL_USART_Init+0xf0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d102      	bne.n	8005c8a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	61bb      	str	r3, [r7, #24]
 8005c88:	e013      	b.n	8005cb2 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a17      	ldr	r2, [pc, #92]	; (8005cec <LL_USART_Init+0xf4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d102      	bne.n	8005c98 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	61bb      	str	r3, [r7, #24]
 8005c96:	e00c      	b.n	8005cb2 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a15      	ldr	r2, [pc, #84]	; (8005cf0 <LL_USART_Init+0xf8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d102      	bne.n	8005ca6 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	61bb      	str	r3, [r7, #24]
 8005ca4:	e005      	b.n	8005cb2 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a12      	ldr	r2, [pc, #72]	; (8005cf4 <LL_USART_Init+0xfc>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d101      	bne.n	8005cb2 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00d      	beq.n	8005cd4 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d009      	beq.n	8005cd4 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	699a      	ldr	r2, [r3, #24]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69b9      	ldr	r1, [r7, #24]
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff fdea 	bl	80058a8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005cd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3720      	adds	r7, #32
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40011000 	.word	0x40011000
 8005ce4:	40004400 	.word	0x40004400
 8005ce8:	40004800 	.word	0x40004800
 8005cec:	40011400 	.word	0x40011400
 8005cf0:	40004c00 	.word	0x40004c00
 8005cf4:	40005000 	.word	0x40005000

08005cf8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	619a      	str	r2, [r3, #24]
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	041a      	lsls	r2, r3, #16
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	619a      	str	r2, [r3, #24]
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
	...

08005d34 <AT24C08_Page_Write>:

#include "i2c.h"
#include "AT24C08.h"

void AT24C08_Page_Write(unsigned char page, unsigned char* data, unsigned char len)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af04      	add	r7, sp, #16
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	6039      	str	r1, [r7, #0]
 8005d3e:	71fb      	strb	r3, [r7, #7]
 8005d40:	4613      	mov	r3, r2
 8005d42:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page*16)>>8)<<1 | 0xA0;
 8005d44:	79fb      	ldrb	r3, [r7, #7]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	121b      	asrs	r3, r3, #8
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	b25b      	sxtb	r3, r3
 8005d4e:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8005d52:	b25b      	sxtb	r3, r3
 8005d54:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page*16) & 0xff;
 8005d56:	79fb      	ldrb	r3, [r7, #7]
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	73bb      	strb	r3, [r7, #14]

	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8005d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d60:	480e      	ldr	r0, [pc, #56]	; (8005d9c <AT24C08_Page_Write+0x68>)
 8005d62:	f7ff ffd7 	bl	8005d14 <LL_GPIO_ResetOutputPin>
	HAL_I2C_Mem_Write(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
 8005d68:	b299      	uxth	r1, r3
 8005d6a:	7bbb      	ldrb	r3, [r7, #14]
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	2301      	movs	r3, #1
 8005d70:	9302      	str	r3, [sp, #8]
 8005d72:	2310      	movs	r3, #16
 8005d74:	9301      	str	r3, [sp, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4808      	ldr	r0, [pc, #32]	; (8005da0 <AT24C08_Page_Write+0x6c>)
 8005d7e:	f7fc fcdf 	bl	8002740 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8005d82:	2001      	movs	r0, #1
 8005d84:	f7fb f952 	bl	800102c <HAL_Delay>
	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8005d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d8c:	4803      	ldr	r0, [pc, #12]	; (8005d9c <AT24C08_Page_Write+0x68>)
 8005d8e:	f7ff ffb3 	bl	8005cf8 <LL_GPIO_SetOutputPin>
}
 8005d92:	bf00      	nop
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40020800 	.word	0x40020800
 8005da0:	200005ac 	.word	0x200005ac

08005da4 <AT24C08_Page_Read>:

void AT24C08_Page_Read(unsigned char page, unsigned char* data, unsigned char len)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af04      	add	r7, sp, #16
 8005daa:	4603      	mov	r3, r0
 8005dac:	6039      	str	r1, [r7, #0]
 8005dae:	71fb      	strb	r3, [r7, #7]
 8005db0:	4613      	mov	r3, r2
 8005db2:	71bb      	strb	r3, [r7, #6]
	unsigned char devAddress = ((page*16)>>8)<<1 | 0xA0;
 8005db4:	79fb      	ldrb	r3, [r7, #7]
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	121b      	asrs	r3, r3, #8
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	b25b      	sxtb	r3, r3
 8005dbe:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8005dc2:	b25b      	sxtb	r3, r3
 8005dc4:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page*16) & 0xff;
 8005dc6:	79fb      	ldrb	r3, [r7, #7]
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], 16, 1);
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	b299      	uxth	r1, r3
 8005dd0:	7bbb      	ldrb	r3, [r7, #14]
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	9302      	str	r3, [sp, #8]
 8005dd8:	2310      	movs	r3, #16
 8005dda:	9301      	str	r3, [sp, #4]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	2301      	movs	r3, #1
 8005de2:	4803      	ldr	r0, [pc, #12]	; (8005df0 <AT24C08_Page_Read+0x4c>)
 8005de4:	f7fc fda6 	bl	8002934 <HAL_I2C_Mem_Read>
}
 8005de8:	bf00      	nop
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	200005ac 	.word	0x200005ac

08005df4 <EP_PIDGain_Write>:

void EP_PIDGain_Write(unsigned char id, float PGain, float IGain, float DGain)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08c      	sub	sp, #48	; 0x30
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	ed87 0a02 	vstr	s0, [r7, #8]
 8005e00:	edc7 0a01 	vstr	s1, [r7, #4]
 8005e04:	ed87 1a00 	vstr	s2, [r7]
 8005e08:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_write[16];
	Parser parser;

	buf_write[0] = 0x45;
 8005e0a:	2345      	movs	r3, #69	; 0x45
 8005e0c:	763b      	strb	r3, [r7, #24]
	buf_write[1] = 0x50;
 8005e0e:	2350      	movs	r3, #80	; 0x50
 8005e10:	767b      	strb	r3, [r7, #25]
	buf_write[2] = id;
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	76bb      	strb	r3, [r7, #26]
	parser.f = PGain;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	617b      	str	r3, [r7, #20]
	buf_write[3] = parser.byte[0];
 8005e1a:	7d3b      	ldrb	r3, [r7, #20]
 8005e1c:	76fb      	strb	r3, [r7, #27]
	buf_write[4] = parser.byte[1];
 8005e1e:	7d7b      	ldrb	r3, [r7, #21]
 8005e20:	773b      	strb	r3, [r7, #28]
	buf_write[5] = parser.byte[2];
 8005e22:	7dbb      	ldrb	r3, [r7, #22]
 8005e24:	777b      	strb	r3, [r7, #29]
	buf_write[6] = parser.byte[3];
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
 8005e28:	77bb      	strb	r3, [r7, #30]

	parser.f = IGain;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	617b      	str	r3, [r7, #20]
	buf_write[7] = parser.byte[0];
 8005e2e:	7d3b      	ldrb	r3, [r7, #20]
 8005e30:	77fb      	strb	r3, [r7, #31]
	buf_write[8] = parser.byte[1];
 8005e32:	7d7b      	ldrb	r3, [r7, #21]
 8005e34:	f887 3020 	strb.w	r3, [r7, #32]
	buf_write[9] = parser.byte[2];
 8005e38:	7dbb      	ldrb	r3, [r7, #22]
 8005e3a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buf_write[10] = parser.byte[3];
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
 8005e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	parser.f = DGain;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	617b      	str	r3, [r7, #20]
	buf_write[11] = parser.byte[0];
 8005e48:	7d3b      	ldrb	r3, [r7, #20]
 8005e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buf_write[12] = parser.byte[1];
 8005e4e:	7d7b      	ldrb	r3, [r7, #21]
 8005e50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buf_write[13] = parser.byte[2];
 8005e54:	7dbb      	ldrb	r3, [r7, #22]
 8005e56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buf_write[14] = parser.byte[3];
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
 8005e5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	unsigned char chksum = 0xff;
 8005e60:	23ff      	movs	r3, #255	; 0xff
 8005e62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(int i=0;i<15;i++) chksum -= buf_write[i];
 8005e66:	2300      	movs	r3, #0
 8005e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e6a:	e00c      	b.n	8005e86 <EP_PIDGain_Write+0x92>
 8005e6c:	f107 0218 	add.w	r2, r7, #24
 8005e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e72:	4413      	add	r3, r2
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e82:	3301      	adds	r3, #1
 8005e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e88:	2b0e      	cmp	r3, #14
 8005e8a:	ddef      	ble.n	8005e6c <EP_PIDGain_Write+0x78>

	buf_write[15] = chksum;
 8005e8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	switch(id)
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	2b05      	cmp	r3, #5
 8005e98:	d83e      	bhi.n	8005f18 <EP_PIDGain_Write+0x124>
 8005e9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ea0 <EP_PIDGain_Write+0xac>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005eb9 	.word	0x08005eb9
 8005ea4:	08005ec9 	.word	0x08005ec9
 8005ea8:	08005ed9 	.word	0x08005ed9
 8005eac:	08005ee9 	.word	0x08005ee9
 8005eb0:	08005ef9 	.word	0x08005ef9
 8005eb4:	08005f09 	.word	0x08005f09
	{
	case 0:
		AT24C08_Page_Write(0, &buf_write[0], 16);
 8005eb8:	f107 0318 	add.w	r3, r7, #24
 8005ebc:	2210      	movs	r2, #16
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	f7ff ff37 	bl	8005d34 <AT24C08_Page_Write>
		break;
 8005ec6:	e027      	b.n	8005f18 <EP_PIDGain_Write+0x124>
	case 1:
		AT24C08_Page_Write(1, &buf_write[0], 16);
 8005ec8:	f107 0318 	add.w	r3, r7, #24
 8005ecc:	2210      	movs	r2, #16
 8005ece:	4619      	mov	r1, r3
 8005ed0:	2001      	movs	r0, #1
 8005ed2:	f7ff ff2f 	bl	8005d34 <AT24C08_Page_Write>
		break;
 8005ed6:	e01f      	b.n	8005f18 <EP_PIDGain_Write+0x124>
	case 2:
		AT24C08_Page_Write(2, &buf_write[0], 16);
 8005ed8:	f107 0318 	add.w	r3, r7, #24
 8005edc:	2210      	movs	r2, #16
 8005ede:	4619      	mov	r1, r3
 8005ee0:	2002      	movs	r0, #2
 8005ee2:	f7ff ff27 	bl	8005d34 <AT24C08_Page_Write>
		break;
 8005ee6:	e017      	b.n	8005f18 <EP_PIDGain_Write+0x124>
	case 3:
		AT24C08_Page_Write(3, &buf_write[0], 16);
 8005ee8:	f107 0318 	add.w	r3, r7, #24
 8005eec:	2210      	movs	r2, #16
 8005eee:	4619      	mov	r1, r3
 8005ef0:	2003      	movs	r0, #3
 8005ef2:	f7ff ff1f 	bl	8005d34 <AT24C08_Page_Write>
		break;
 8005ef6:	e00f      	b.n	8005f18 <EP_PIDGain_Write+0x124>
	case 4:
		AT24C08_Page_Write(4, &buf_write[0], 16);
 8005ef8:	f107 0318 	add.w	r3, r7, #24
 8005efc:	2210      	movs	r2, #16
 8005efe:	4619      	mov	r1, r3
 8005f00:	2004      	movs	r0, #4
 8005f02:	f7ff ff17 	bl	8005d34 <AT24C08_Page_Write>
		break;
 8005f06:	e007      	b.n	8005f18 <EP_PIDGain_Write+0x124>
	case 5:
		AT24C08_Page_Write(5, &buf_write[0], 16);
 8005f08:	f107 0318 	add.w	r3, r7, #24
 8005f0c:	2210      	movs	r2, #16
 8005f0e:	4619      	mov	r1, r3
 8005f10:	2005      	movs	r0, #5
 8005f12:	f7ff ff0f 	bl	8005d34 <AT24C08_Page_Write>
		break;
 8005f16:	bf00      	nop
	}
}
 8005f18:	bf00      	nop
 8005f1a:	3730      	adds	r7, #48	; 0x30
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <EP_PIDGain_Read>:

unsigned char EP_PIDGain_Read(unsigned char id, float* PGain, float* IGain, float* DGain)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08c      	sub	sp, #48	; 0x30
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	607a      	str	r2, [r7, #4]
 8005f2a:	603b      	str	r3, [r7, #0]
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_read[16];
	Parser parser;

	switch(id)
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	2b05      	cmp	r3, #5
 8005f34:	d83e      	bhi.n	8005fb4 <EP_PIDGain_Read+0x94>
 8005f36:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <EP_PIDGain_Read+0x1c>)
 8005f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3c:	08005f55 	.word	0x08005f55
 8005f40:	08005f65 	.word	0x08005f65
 8005f44:	08005f75 	.word	0x08005f75
 8005f48:	08005f85 	.word	0x08005f85
 8005f4c:	08005f95 	.word	0x08005f95
 8005f50:	08005fa5 	.word	0x08005fa5
	{
	case 0:
		AT24C08_Page_Read(0, &buf_read[0], 16);
 8005f54:	f107 0318 	add.w	r3, r7, #24
 8005f58:	2210      	movs	r2, #16
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	f7ff ff21 	bl	8005da4 <AT24C08_Page_Read>
		break;
 8005f62:	e027      	b.n	8005fb4 <EP_PIDGain_Read+0x94>
	case 1:
		AT24C08_Page_Read(1, &buf_read[0], 16);
 8005f64:	f107 0318 	add.w	r3, r7, #24
 8005f68:	2210      	movs	r2, #16
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	2001      	movs	r0, #1
 8005f6e:	f7ff ff19 	bl	8005da4 <AT24C08_Page_Read>
		break;
 8005f72:	e01f      	b.n	8005fb4 <EP_PIDGain_Read+0x94>
	case 2:
		AT24C08_Page_Read(2, &buf_read[0], 16);
 8005f74:	f107 0318 	add.w	r3, r7, #24
 8005f78:	2210      	movs	r2, #16
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	2002      	movs	r0, #2
 8005f7e:	f7ff ff11 	bl	8005da4 <AT24C08_Page_Read>
		break;
 8005f82:	e017      	b.n	8005fb4 <EP_PIDGain_Read+0x94>
	case 3:
		AT24C08_Page_Read(3, &buf_read[0], 16);
 8005f84:	f107 0318 	add.w	r3, r7, #24
 8005f88:	2210      	movs	r2, #16
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	2003      	movs	r0, #3
 8005f8e:	f7ff ff09 	bl	8005da4 <AT24C08_Page_Read>
		break;
 8005f92:	e00f      	b.n	8005fb4 <EP_PIDGain_Read+0x94>
	case 4:
		AT24C08_Page_Read(4, &buf_read[0], 16);
 8005f94:	f107 0318 	add.w	r3, r7, #24
 8005f98:	2210      	movs	r2, #16
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	2004      	movs	r0, #4
 8005f9e:	f7ff ff01 	bl	8005da4 <AT24C08_Page_Read>
		break;
 8005fa2:	e007      	b.n	8005fb4 <EP_PIDGain_Read+0x94>
	case 5:
		AT24C08_Page_Read(5, &buf_read[0], 16);
 8005fa4:	f107 0318 	add.w	r3, r7, #24
 8005fa8:	2210      	movs	r2, #16
 8005faa:	4619      	mov	r1, r3
 8005fac:	2005      	movs	r0, #5
 8005fae:	f7ff fef9 	bl	8005da4 <AT24C08_Page_Read>
		break;
 8005fb2:	bf00      	nop
	}

	unsigned char chksum = 0xff;
 8005fb4:	23ff      	movs	r3, #255	; 0xff
 8005fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(int i=0;i<15;i++) chksum -= buf_read[i];
 8005fba:	2300      	movs	r3, #0
 8005fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fbe:	e00c      	b.n	8005fda <EP_PIDGain_Read+0xba>
 8005fc0:	f107 0218 	add.w	r2, r7, #24
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	4413      	add	r3, r2
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	2b0e      	cmp	r3, #14
 8005fde:	ddef      	ble.n	8005fc0 <EP_PIDGain_Read+0xa0>

	if(buf_read[15] == chksum && buf_read[0] == 0x45 && buf_read[1] == 0x50)
 8005fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fe4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d12f      	bne.n	800604c <EP_PIDGain_Read+0x12c>
 8005fec:	7e3b      	ldrb	r3, [r7, #24]
 8005fee:	2b45      	cmp	r3, #69	; 0x45
 8005ff0:	d12c      	bne.n	800604c <EP_PIDGain_Read+0x12c>
 8005ff2:	7e7b      	ldrb	r3, [r7, #25]
 8005ff4:	2b50      	cmp	r3, #80	; 0x50
 8005ff6:	d129      	bne.n	800604c <EP_PIDGain_Read+0x12c>
	{
		parser.byte[0] = buf_read[3];
 8005ff8:	7efb      	ldrb	r3, [r7, #27]
 8005ffa:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[4];
 8005ffc:	7f3b      	ldrb	r3, [r7, #28]
 8005ffe:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[5];
 8006000:	7f7b      	ldrb	r3, [r7, #29]
 8006002:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[6];
 8006004:	7fbb      	ldrb	r3, [r7, #30]
 8006006:	75fb      	strb	r3, [r7, #23]
		*PGain = parser.f;
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[7];
 800600e:	7ffb      	ldrb	r3, [r7, #31]
 8006010:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[8];
 8006012:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006016:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[9];
 8006018:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800601c:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[10];
 800601e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006022:	75fb      	strb	r3, [r7, #23]
		*IGain = parser.f;
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[11];
 800602a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800602e:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[12];
 8006030:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006034:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[13];
 8006036:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800603a:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[14];
 800603c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006040:	75fb      	strb	r3, [r7, #23]
		*DGain = parser.f;
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	601a      	str	r2, [r3, #0]

		return 0;
 8006048:	2300      	movs	r3, #0
 800604a:	e000      	b.n	800604e <EP_PIDGain_Read+0x12e>
	}

	return 1;
 800604c:	2301      	movs	r3, #1
}
 800604e:	4618      	mov	r0, r3
 8006050:	3730      	adds	r7, #48	; 0x30
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop

08006058 <LL_SPI_Enable>:
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	601a      	str	r2, [r3, #0]
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <LL_SPI_SetStandard>:
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f023 0210 	bic.w	r2, r3, #16
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	431a      	orrs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	605a      	str	r2, [r3, #4]
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d101      	bne.n	80060dc <LL_SPI_IsActiveFlag_TXE+0x18>
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <LL_SPI_IsActiveFlag_TXE+0x1a>
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	b2db      	uxtb	r3, r3
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	330c      	adds	r3, #12
 8006114:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	78fa      	ldrb	r2, [r7, #3]
 800611a:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800611c:	bf00      	nop
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <LL_GPIO_IsInputPinSet>:
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691a      	ldr	r2, [r3, #16]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	4013      	ands	r3, r2
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	bf0c      	ite	eq
 8006140:	2301      	moveq	r3, #1
 8006142:	2300      	movne	r3, #0
 8006144:	b2db      	uxtb	r3, r3
}
 8006146:	4618      	mov	r0, r3
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <LL_GPIO_SetOutputPin>:
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	619a      	str	r2, [r3, #24]
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <LL_GPIO_ResetOutputPin>:
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	041a      	lsls	r2, r3, #16
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	619a      	str	r2, [r3, #24]
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8006194:	4b08      	ldr	r3, [pc, #32]	; (80061b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006198:	4907      	ldr	r1, [pc, #28]	; (80061b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4313      	orrs	r3, r2
 800619e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80061a0:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80061a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4013      	ands	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80061aa:	68fb      	ldr	r3, [r7, #12]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	40023800 	.word	0x40023800

080061bc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80061c4:	4b08      	ldr	r3, [pc, #32]	; (80061e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80061c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061c8:	4907      	ldr	r1, [pc, #28]	; (80061e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80061d0:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80061d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4013      	ands	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80061da:	68fb      	ldr	r3, [r7, #12]
}
 80061dc:	bf00      	nop
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	40023800 	.word	0x40023800

080061ec <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b090      	sub	sp, #64	; 0x40
 80061f0:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80061f2:	f107 0318 	add.w	r3, r7, #24
 80061f6:	2228      	movs	r2, #40	; 0x28
 80061f8:	2100      	movs	r1, #0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f006 f8ca 	bl	800c394 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006200:	463b      	mov	r3, r7
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	605a      	str	r2, [r3, #4]
 8006208:	609a      	str	r2, [r3, #8]
 800620a:	60da      	str	r2, [r3, #12]
 800620c:	611a      	str	r2, [r3, #16]
 800620e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8006210:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006214:	f7ff ffd2 	bl	80061bc <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8006218:	2002      	movs	r0, #2
 800621a:	f7ff ffb7 	bl	800618c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800621e:	2004      	movs	r0, #4
 8006220:	f7ff ffb4 	bl	800618c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006224:	2001      	movs	r0, #1
 8006226:	f7ff ffb1 	bl	800618c <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800622a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800622e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006230:	2302      	movs	r3, #2
 8006232:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006234:	2303      	movs	r3, #3
 8006236:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006238:	2300      	movs	r3, #0
 800623a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800623c:	2300      	movs	r3, #0
 800623e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8006240:	2305      	movs	r3, #5
 8006242:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006244:	463b      	mov	r3, r7
 8006246:	4619      	mov	r1, r3
 8006248:	4841      	ldr	r0, [pc, #260]	; (8006350 <BNO080_GPIO_SPI_Initialization+0x164>)
 800624a:	f7fe fde9 	bl	8004e20 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800624e:	2300      	movs	r3, #0
 8006250:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8006252:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006256:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8006258:	2300      	movs	r3, #0
 800625a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800625c:	2302      	movs	r3, #2
 800625e:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8006260:	2301      	movs	r3, #1
 8006262:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8006264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006268:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800626a:	2318      	movs	r3, #24
 800626c:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800626e:	2300      	movs	r3, #0
 8006270:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8006272:	2300      	movs	r3, #0
 8006274:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8006276:	230a      	movs	r3, #10
 8006278:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 800627a:	f107 0318 	add.w	r3, r7, #24
 800627e:	4619      	mov	r1, r3
 8006280:	4834      	ldr	r0, [pc, #208]	; (8006354 <BNO080_GPIO_SPI_Initialization+0x168>)
 8006282:	f7fe ff9c 	bl	80051be <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8006286:	2100      	movs	r1, #0
 8006288:	4832      	ldr	r0, [pc, #200]	; (8006354 <BNO080_GPIO_SPI_Initialization+0x168>)
 800628a:	f7ff fef5 	bl	8006078 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 800628e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006292:	4831      	ldr	r0, [pc, #196]	; (8006358 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8006294:	f7ff ff6b 	bl	800616e <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 8006298:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800629c:	482c      	ldr	r0, [pc, #176]	; (8006350 <BNO080_GPIO_SPI_Initialization+0x164>)
 800629e:	f7ff ff66 	bl	800616e <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 80062a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062a6:	482d      	ldr	r0, [pc, #180]	; (800635c <BNO080_GPIO_SPI_Initialization+0x170>)
 80062a8:	f7ff ff61 	bl	800616e <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 80062ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062b0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80062b2:	2301      	movs	r3, #1
 80062b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80062b6:	2303      	movs	r3, #3
 80062b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80062be:	2300      	movs	r3, #0
 80062c0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 80062c2:	463b      	mov	r3, r7
 80062c4:	4619      	mov	r1, r3
 80062c6:	4822      	ldr	r0, [pc, #136]	; (8006350 <BNO080_GPIO_SPI_Initialization+0x164>)
 80062c8:	f7fe fdaa 	bl	8004e20 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 80062cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062d0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80062d2:	2301      	movs	r3, #1
 80062d4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80062d6:	2303      	movs	r3, #3
 80062d8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80062de:	2300      	movs	r3, #0
 80062e0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 80062e2:	463b      	mov	r3, r7
 80062e4:	4619      	mov	r1, r3
 80062e6:	481c      	ldr	r0, [pc, #112]	; (8006358 <BNO080_GPIO_SPI_Initialization+0x16c>)
 80062e8:	f7fe fd9a 	bl	8004e20 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 80062ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062f0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80062f2:	2301      	movs	r3, #1
 80062f4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80062f6:	2303      	movs	r3, #3
 80062f8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80062fe:	2300      	movs	r3, #0
 8006300:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 8006302:	463b      	mov	r3, r7
 8006304:	4619      	mov	r1, r3
 8006306:	4815      	ldr	r0, [pc, #84]	; (800635c <BNO080_GPIO_SPI_Initialization+0x170>)
 8006308:	f7fe fd8a 	bl	8004e20 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 800630c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006310:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8006312:	2300      	movs	r3, #0
 8006314:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8006316:	2301      	movs	r3, #1
 8006318:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 800631a:	463b      	mov	r3, r7
 800631c:	4619      	mov	r1, r3
 800631e:	480e      	ldr	r0, [pc, #56]	; (8006358 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8006320:	f7fe fd7e 	bl	8004e20 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8006324:	480b      	ldr	r0, [pc, #44]	; (8006354 <BNO080_GPIO_SPI_Initialization+0x168>)
 8006326:	f7ff fe97 	bl	8006058 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800632a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800632e:	4808      	ldr	r0, [pc, #32]	; (8006350 <BNO080_GPIO_SPI_Initialization+0x164>)
 8006330:	f7ff ff0f 	bl	8006152 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8006334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006338:	4808      	ldr	r0, [pc, #32]	; (800635c <BNO080_GPIO_SPI_Initialization+0x170>)
 800633a:	f7ff ff0a 	bl	8006152 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 800633e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006342:	4805      	ldr	r0, [pc, #20]	; (8006358 <BNO080_GPIO_SPI_Initialization+0x16c>)
 8006344:	f7ff ff05 	bl	8006152 <LL_GPIO_SetOutputPin>
}
 8006348:	bf00      	nop
 800634a:	3740      	adds	r7, #64	; 0x40
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	40020400 	.word	0x40020400
 8006354:	40003800 	.word	0x40003800
 8006358:	40020800 	.word	0x40020800
 800635c:	40020000 	.word	0x40020000

08006360 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 8006366:	f7ff ff41 	bl	80061ec <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 800636a:	482e      	ldr	r0, [pc, #184]	; (8006424 <BNO080_Initialization+0xc4>)
 800636c:	f006 fc76 	bl	800cc5c <iprintf>
	
	CHIP_DESELECT(BNO080);
 8006370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006374:	482c      	ldr	r0, [pc, #176]	; (8006428 <BNO080_Initialization+0xc8>)
 8006376:	f7ff feec 	bl	8006152 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 800637a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800637e:	482b      	ldr	r0, [pc, #172]	; (800642c <BNO080_Initialization+0xcc>)
 8006380:	f7ff fee7 	bl	8006152 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8006384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006388:	4829      	ldr	r0, [pc, #164]	; (8006430 <BNO080_Initialization+0xd0>)
 800638a:	f7ff fef0 	bl	800616e <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 800638e:	20c8      	movs	r0, #200	; 0xc8
 8006390:	f7fa fe4c 	bl	800102c <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8006394:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006398:	4825      	ldr	r0, [pc, #148]	; (8006430 <BNO080_Initialization+0xd0>)
 800639a:	f7ff feda 	bl	8006152 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 800639e:	f000 fc15 	bl	8006bcc <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 80063a2:	f000 fc13 	bl	8006bcc <BNO080_waitForSPI>
	BNO080_receivePacket();
 80063a6:	f000 fc35 	bl	8006c14 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 80063aa:	f000 fc0f 	bl	8006bcc <BNO080_waitForSPI>
	BNO080_receivePacket();
 80063ae:	f000 fc31 	bl	8006c14 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 80063b2:	4b20      	ldr	r3, [pc, #128]	; (8006434 <BNO080_Initialization+0xd4>)
 80063b4:	22f9      	movs	r2, #249	; 0xf9
 80063b6:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 80063b8:	4b1e      	ldr	r3, [pc, #120]	; (8006434 <BNO080_Initialization+0xd4>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 80063be:	2102      	movs	r1, #2
 80063c0:	2002      	movs	r0, #2
 80063c2:	f000 fc97 	bl	8006cf4 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 80063c6:	f000 fc01 	bl	8006bcc <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 80063ca:	f000 fc23 	bl	8006c14 <BNO080_receivePacket>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d11b      	bne.n	800640c <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 80063d4:	4b18      	ldr	r3, [pc, #96]	; (8006438 <BNO080_Initialization+0xd8>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	4619      	mov	r1, r3
 80063da:	4b17      	ldr	r3, [pc, #92]	; (8006438 <BNO080_Initialization+0xd8>)
 80063dc:	785b      	ldrb	r3, [r3, #1]
 80063de:	461a      	mov	r2, r3
 80063e0:	4b15      	ldr	r3, [pc, #84]	; (8006438 <BNO080_Initialization+0xd8>)
 80063e2:	789b      	ldrb	r3, [r3, #2]
 80063e4:	4618      	mov	r0, r3
 80063e6:	4b14      	ldr	r3, [pc, #80]	; (8006438 <BNO080_Initialization+0xd8>)
 80063e8:	78db      	ldrb	r3, [r3, #3]
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	4603      	mov	r3, r0
 80063ee:	4813      	ldr	r0, [pc, #76]	; (800643c <BNO080_Initialization+0xdc>)
 80063f0:	f006 fc34 	bl	800cc5c <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 80063f4:	4b0f      	ldr	r3, [pc, #60]	; (8006434 <BNO080_Initialization+0xd4>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2bf8      	cmp	r3, #248	; 0xf8
 80063fa:	d107      	bne.n	800640c <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 80063fc:	4b0d      	ldr	r3, [pc, #52]	; (8006434 <BNO080_Initialization+0xd4>)
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	4619      	mov	r1, r3
 8006402:	480f      	ldr	r0, [pc, #60]	; (8006440 <BNO080_Initialization+0xe0>)
 8006404:	f006 fc2a 	bl	800cc5c <iprintf>
			return (0);
 8006408:	2300      	movs	r3, #0
 800640a:	e007      	b.n	800641c <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 800640c:	4b09      	ldr	r3, [pc, #36]	; (8006434 <BNO080_Initialization+0xd4>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	22f8      	movs	r2, #248	; 0xf8
 8006412:	4619      	mov	r1, r3
 8006414:	480b      	ldr	r0, [pc, #44]	; (8006444 <BNO080_Initialization+0xe4>)
 8006416:	f006 fc21 	bl	800cc5c <iprintf>
	return (1); //Something went wrong
 800641a:	2301      	movs	r3, #1
}
 800641c:	4618      	mov	r0, r3
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	0800fa80 	.word	0x0800fa80
 8006428:	40020400 	.word	0x40020400
 800642c:	40020000 	.word	0x40020000
 8006430:	40020800 	.word	0x40020800
 8006434:	2000028c 	.word	0x2000028c
 8006438:	20000238 	.word	0x20000238
 800643c:	0800fa94 	.word	0x0800fa94
 8006440:	0800faac 	.word	0x0800faac
 8006444:	0800facc 	.word	0x0800facc

08006448 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	4603      	mov	r3, r0
 8006450:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 8006452:	bf00      	nop
 8006454:	480c      	ldr	r0, [pc, #48]	; (8006488 <SPI2_SendByte+0x40>)
 8006456:	f7ff fe35 	bl	80060c4 <LL_SPI_IsActiveFlag_TXE>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d0f9      	beq.n	8006454 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	4619      	mov	r1, r3
 8006464:	4808      	ldr	r0, [pc, #32]	; (8006488 <SPI2_SendByte+0x40>)
 8006466:	f7ff fe4d 	bl	8006104 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 800646a:	bf00      	nop
 800646c:	4806      	ldr	r0, [pc, #24]	; (8006488 <SPI2_SendByte+0x40>)
 800646e:	f7ff fe16 	bl	800609e <LL_SPI_IsActiveFlag_RXNE>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0f9      	beq.n	800646c <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 8006478:	4803      	ldr	r0, [pc, #12]	; (8006488 <SPI2_SendByte+0x40>)
 800647a:	f7ff fe36 	bl	80060ea <LL_SPI_ReceiveData8>
 800647e:	4603      	mov	r3, r0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	40003800 	.word	0x40003800

0800648c <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8006490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006494:	4811      	ldr	r0, [pc, #68]	; (80064dc <BNO080_dataAvailable+0x50>)
 8006496:	f7ff fe47 	bl	8006128 <LL_GPIO_IsInputPinSet>
 800649a:	4603      	mov	r3, r0
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <BNO080_dataAvailable+0x18>
		return (0);
 80064a0:	2300      	movs	r3, #0
 80064a2:	e019      	b.n	80064d8 <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 80064a4:	f000 fbb6 	bl	8006c14 <BNO080_receivePacket>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d113      	bne.n	80064d6 <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 80064ae:	4b0c      	ldr	r3, [pc, #48]	; (80064e0 <BNO080_dataAvailable+0x54>)
 80064b0:	789b      	ldrb	r3, [r3, #2]
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d107      	bne.n	80064c6 <BNO080_dataAvailable+0x3a>
 80064b6:	4b0b      	ldr	r3, [pc, #44]	; (80064e4 <BNO080_dataAvailable+0x58>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2bfb      	cmp	r3, #251	; 0xfb
 80064bc:	d103      	bne.n	80064c6 <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 80064be:	f000 f82f 	bl	8006520 <BNO080_parseInputReport>
			return (1);
 80064c2:	2301      	movs	r3, #1
 80064c4:	e008      	b.n	80064d8 <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 80064c6:	4b06      	ldr	r3, [pc, #24]	; (80064e0 <BNO080_dataAvailable+0x54>)
 80064c8:	789b      	ldrb	r3, [r3, #2]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d103      	bne.n	80064d6 <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 80064ce:	f000 f80b 	bl	80064e8 <BNO080_parseCommandReport>
			return (1);
 80064d2:	2301      	movs	r3, #1
 80064d4:	e000      	b.n	80064d8 <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40020800 	.word	0x40020800
 80064e0:	20000238 	.word	0x20000238
 80064e4:	2000028c 	.word	0x2000028c

080064e8 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 80064ee:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <BNO080_parseCommandReport+0x30>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2bf1      	cmp	r3, #241	; 0xf1
 80064f4:	d109      	bne.n	800650a <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 80064f6:	4b08      	ldr	r3, [pc, #32]	; (8006518 <BNO080_parseCommandReport+0x30>)
 80064f8:	789b      	ldrb	r3, [r3, #2]
 80064fa:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 80064fc:	79fb      	ldrb	r3, [r7, #7]
 80064fe:	2b07      	cmp	r3, #7
 8006500:	d103      	bne.n	800650a <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 8006502:	4b05      	ldr	r3, [pc, #20]	; (8006518 <BNO080_parseCommandReport+0x30>)
 8006504:	795a      	ldrb	r2, [r3, #5]
 8006506:	4b05      	ldr	r3, [pc, #20]	; (800651c <BNO080_parseCommandReport+0x34>)
 8006508:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	2000028c 	.word	0x2000028c
 800651c:	2000030f 	.word	0x2000030f

08006520 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8006526:	4b81      	ldr	r3, [pc, #516]	; (800672c <BNO080_parseInputReport+0x20c>)
 8006528:	785b      	ldrb	r3, [r3, #1]
 800652a:	021b      	lsls	r3, r3, #8
 800652c:	b21a      	sxth	r2, r3
 800652e:	4b7f      	ldr	r3, [pc, #508]	; (800672c <BNO080_parseInputReport+0x20c>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	b21b      	sxth	r3, r3
 8006534:	4313      	orrs	r3, r2
 8006536:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 8006538:	8a3b      	ldrh	r3, [r7, #16]
 800653a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800653e:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8006540:	8a3b      	ldrh	r3, [r7, #16]
 8006542:	3b04      	subs	r3, #4
 8006544:	b29b      	uxth	r3, r3
 8006546:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 8006548:	4b79      	ldr	r3, [pc, #484]	; (8006730 <BNO080_parseInputReport+0x210>)
 800654a:	791b      	ldrb	r3, [r3, #4]
 800654c:	061b      	lsls	r3, r3, #24
 800654e:	4a78      	ldr	r2, [pc, #480]	; (8006730 <BNO080_parseInputReport+0x210>)
 8006550:	78d2      	ldrb	r2, [r2, #3]
 8006552:	0412      	lsls	r2, r2, #16
 8006554:	4313      	orrs	r3, r2
 8006556:	4a76      	ldr	r2, [pc, #472]	; (8006730 <BNO080_parseInputReport+0x210>)
 8006558:	7892      	ldrb	r2, [r2, #2]
 800655a:	0212      	lsls	r2, r2, #8
 800655c:	4313      	orrs	r3, r2
 800655e:	4a74      	ldr	r2, [pc, #464]	; (8006730 <BNO080_parseInputReport+0x210>)
 8006560:	7852      	ldrb	r2, [r2, #1]
 8006562:	4313      	orrs	r3, r2
 8006564:	4a73      	ldr	r2, [pc, #460]	; (8006734 <BNO080_parseInputReport+0x214>)
 8006566:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 8006568:	4b71      	ldr	r3, [pc, #452]	; (8006730 <BNO080_parseInputReport+0x210>)
 800656a:	79db      	ldrb	r3, [r3, #7]
 800656c:	f003 0303 	and.w	r3, r3, #3
 8006570:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 8006572:	4b6f      	ldr	r3, [pc, #444]	; (8006730 <BNO080_parseInputReport+0x210>)
 8006574:	7a9b      	ldrb	r3, [r3, #10]
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	b21a      	sxth	r2, r3
 800657a:	4b6d      	ldr	r3, [pc, #436]	; (8006730 <BNO080_parseInputReport+0x210>)
 800657c:	7a5b      	ldrb	r3, [r3, #9]
 800657e:	b21b      	sxth	r3, r3
 8006580:	4313      	orrs	r3, r2
 8006582:	b21b      	sxth	r3, r3
 8006584:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 8006586:	4b6a      	ldr	r3, [pc, #424]	; (8006730 <BNO080_parseInputReport+0x210>)
 8006588:	7b1b      	ldrb	r3, [r3, #12]
 800658a:	021b      	lsls	r3, r3, #8
 800658c:	b21a      	sxth	r2, r3
 800658e:	4b68      	ldr	r3, [pc, #416]	; (8006730 <BNO080_parseInputReport+0x210>)
 8006590:	7adb      	ldrb	r3, [r3, #11]
 8006592:	b21b      	sxth	r3, r3
 8006594:	4313      	orrs	r3, r2
 8006596:	b21b      	sxth	r3, r3
 8006598:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 800659a:	4b65      	ldr	r3, [pc, #404]	; (8006730 <BNO080_parseInputReport+0x210>)
 800659c:	7b9b      	ldrb	r3, [r3, #14]
 800659e:	021b      	lsls	r3, r3, #8
 80065a0:	b21a      	sxth	r2, r3
 80065a2:	4b63      	ldr	r3, [pc, #396]	; (8006730 <BNO080_parseInputReport+0x210>)
 80065a4:	7b5b      	ldrb	r3, [r3, #13]
 80065a6:	b21b      	sxth	r3, r3
 80065a8:	4313      	orrs	r3, r2
 80065aa:	b21b      	sxth	r3, r3
 80065ac:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 80065ae:	2300      	movs	r3, #0
 80065b0:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 80065b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80065ba:	2b0e      	cmp	r3, #14
 80065bc:	dd09      	ble.n	80065d2 <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 80065be:	4b5c      	ldr	r3, [pc, #368]	; (8006730 <BNO080_parseInputReport+0x210>)
 80065c0:	7c1b      	ldrb	r3, [r3, #16]
 80065c2:	021b      	lsls	r3, r3, #8
 80065c4:	b21a      	sxth	r2, r3
 80065c6:	4b5a      	ldr	r3, [pc, #360]	; (8006730 <BNO080_parseInputReport+0x210>)
 80065c8:	7bdb      	ldrb	r3, [r3, #15]
 80065ca:	b21b      	sxth	r3, r3
 80065cc:	4313      	orrs	r3, r2
 80065ce:	b21b      	sxth	r3, r3
 80065d0:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 80065d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80065d6:	2b10      	cmp	r3, #16
 80065d8:	dd09      	ble.n	80065ee <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 80065da:	4b55      	ldr	r3, [pc, #340]	; (8006730 <BNO080_parseInputReport+0x210>)
 80065dc:	7c9b      	ldrb	r3, [r3, #18]
 80065de:	021b      	lsls	r3, r3, #8
 80065e0:	b21a      	sxth	r2, r3
 80065e2:	4b53      	ldr	r3, [pc, #332]	; (8006730 <BNO080_parseInputReport+0x210>)
 80065e4:	7c5b      	ldrb	r3, [r3, #17]
 80065e6:	b21b      	sxth	r3, r3
 80065e8:	4313      	orrs	r3, r2
 80065ea:	b21b      	sxth	r3, r3
 80065ec:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 80065ee:	4b50      	ldr	r3, [pc, #320]	; (8006730 <BNO080_parseInputReport+0x210>)
 80065f0:	795b      	ldrb	r3, [r3, #5]
 80065f2:	2b05      	cmp	r3, #5
 80065f4:	d053      	beq.n	800669e <BNO080_parseInputReport+0x17e>
 80065f6:	2b05      	cmp	r3, #5
 80065f8:	dc0b      	bgt.n	8006612 <BNO080_parseInputReport+0xf2>
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d033      	beq.n	8006666 <BNO080_parseInputReport+0x146>
 80065fe:	2b02      	cmp	r3, #2
 8006600:	dc02      	bgt.n	8006608 <BNO080_parseInputReport+0xe8>
 8006602:	2b01      	cmp	r3, #1
 8006604:	d013      	beq.n	800662e <BNO080_parseInputReport+0x10e>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8006606:	e08a      	b.n	800671e <BNO080_parseInputReport+0x1fe>
	switch(shtpData[5])
 8006608:	2b03      	cmp	r3, #3
 800660a:	d03a      	beq.n	8006682 <BNO080_parseInputReport+0x162>
 800660c:	2b04      	cmp	r3, #4
 800660e:	d01c      	beq.n	800664a <BNO080_parseInputReport+0x12a>
}
 8006610:	e085      	b.n	800671e <BNO080_parseInputReport+0x1fe>
	switch(shtpData[5])
 8006612:	2b13      	cmp	r3, #19
 8006614:	d05b      	beq.n	80066ce <BNO080_parseInputReport+0x1ae>
 8006616:	2b13      	cmp	r3, #19
 8006618:	dc04      	bgt.n	8006624 <BNO080_parseInputReport+0x104>
 800661a:	2b08      	cmp	r3, #8
 800661c:	d03f      	beq.n	800669e <BNO080_parseInputReport+0x17e>
 800661e:	2b11      	cmp	r3, #17
 8006620:	d051      	beq.n	80066c6 <BNO080_parseInputReport+0x1a6>
}
 8006622:	e07c      	b.n	800671e <BNO080_parseInputReport+0x1fe>
	switch(shtpData[5])
 8006624:	2b1e      	cmp	r3, #30
 8006626:	d057      	beq.n	80066d8 <BNO080_parseInputReport+0x1b8>
 8006628:	2bf1      	cmp	r3, #241	; 0xf1
 800662a:	d06d      	beq.n	8006708 <BNO080_parseInputReport+0x1e8>
}
 800662c:	e077      	b.n	800671e <BNO080_parseInputReport+0x1fe>
			accelAccuracy = status;
 800662e:	7bfb      	ldrb	r3, [r7, #15]
 8006630:	b29a      	uxth	r2, r3
 8006632:	4b41      	ldr	r3, [pc, #260]	; (8006738 <BNO080_parseInputReport+0x218>)
 8006634:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 8006636:	4a41      	ldr	r2, [pc, #260]	; (800673c <BNO080_parseInputReport+0x21c>)
 8006638:	89bb      	ldrh	r3, [r7, #12]
 800663a:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 800663c:	4a40      	ldr	r2, [pc, #256]	; (8006740 <BNO080_parseInputReport+0x220>)
 800663e:	897b      	ldrh	r3, [r7, #10]
 8006640:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 8006642:	4a40      	ldr	r2, [pc, #256]	; (8006744 <BNO080_parseInputReport+0x224>)
 8006644:	893b      	ldrh	r3, [r7, #8]
 8006646:	8013      	strh	r3, [r2, #0]
			break;
 8006648:	e069      	b.n	800671e <BNO080_parseInputReport+0x1fe>
			accelLinAccuracy = status;
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	b29a      	uxth	r2, r3
 800664e:	4b3e      	ldr	r3, [pc, #248]	; (8006748 <BNO080_parseInputReport+0x228>)
 8006650:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 8006652:	4a3e      	ldr	r2, [pc, #248]	; (800674c <BNO080_parseInputReport+0x22c>)
 8006654:	89bb      	ldrh	r3, [r7, #12]
 8006656:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8006658:	4a3d      	ldr	r2, [pc, #244]	; (8006750 <BNO080_parseInputReport+0x230>)
 800665a:	897b      	ldrh	r3, [r7, #10]
 800665c:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 800665e:	4a3d      	ldr	r2, [pc, #244]	; (8006754 <BNO080_parseInputReport+0x234>)
 8006660:	893b      	ldrh	r3, [r7, #8]
 8006662:	8013      	strh	r3, [r2, #0]
			break;
 8006664:	e05b      	b.n	800671e <BNO080_parseInputReport+0x1fe>
			gyroAccuracy = status;
 8006666:	7bfb      	ldrb	r3, [r7, #15]
 8006668:	b29a      	uxth	r2, r3
 800666a:	4b3b      	ldr	r3, [pc, #236]	; (8006758 <BNO080_parseInputReport+0x238>)
 800666c:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 800666e:	4a3b      	ldr	r2, [pc, #236]	; (800675c <BNO080_parseInputReport+0x23c>)
 8006670:	89bb      	ldrh	r3, [r7, #12]
 8006672:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 8006674:	4a3a      	ldr	r2, [pc, #232]	; (8006760 <BNO080_parseInputReport+0x240>)
 8006676:	897b      	ldrh	r3, [r7, #10]
 8006678:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 800667a:	4a3a      	ldr	r2, [pc, #232]	; (8006764 <BNO080_parseInputReport+0x244>)
 800667c:	893b      	ldrh	r3, [r7, #8]
 800667e:	8013      	strh	r3, [r2, #0]
			break;
 8006680:	e04d      	b.n	800671e <BNO080_parseInputReport+0x1fe>
			magAccuracy = status;
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	b29a      	uxth	r2, r3
 8006686:	4b38      	ldr	r3, [pc, #224]	; (8006768 <BNO080_parseInputReport+0x248>)
 8006688:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 800668a:	4a38      	ldr	r2, [pc, #224]	; (800676c <BNO080_parseInputReport+0x24c>)
 800668c:	89bb      	ldrh	r3, [r7, #12]
 800668e:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8006690:	4a37      	ldr	r2, [pc, #220]	; (8006770 <BNO080_parseInputReport+0x250>)
 8006692:	897b      	ldrh	r3, [r7, #10]
 8006694:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 8006696:	4a37      	ldr	r2, [pc, #220]	; (8006774 <BNO080_parseInputReport+0x254>)
 8006698:	893b      	ldrh	r3, [r7, #8]
 800669a:	8013      	strh	r3, [r2, #0]
			break;
 800669c:	e03f      	b.n	800671e <BNO080_parseInputReport+0x1fe>
			quatAccuracy = status;
 800669e:	7bfb      	ldrb	r3, [r7, #15]
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	4b35      	ldr	r3, [pc, #212]	; (8006778 <BNO080_parseInputReport+0x258>)
 80066a4:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 80066a6:	4a35      	ldr	r2, [pc, #212]	; (800677c <BNO080_parseInputReport+0x25c>)
 80066a8:	89bb      	ldrh	r3, [r7, #12]
 80066aa:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 80066ac:	4a34      	ldr	r2, [pc, #208]	; (8006780 <BNO080_parseInputReport+0x260>)
 80066ae:	897b      	ldrh	r3, [r7, #10]
 80066b0:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 80066b2:	4a34      	ldr	r2, [pc, #208]	; (8006784 <BNO080_parseInputReport+0x264>)
 80066b4:	893b      	ldrh	r3, [r7, #8]
 80066b6:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 80066b8:	4a33      	ldr	r2, [pc, #204]	; (8006788 <BNO080_parseInputReport+0x268>)
 80066ba:	8afb      	ldrh	r3, [r7, #22]
 80066bc:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 80066be:	4a33      	ldr	r2, [pc, #204]	; (800678c <BNO080_parseInputReport+0x26c>)
 80066c0:	8abb      	ldrh	r3, [r7, #20]
 80066c2:	8013      	strh	r3, [r2, #0]
			break;
 80066c4:	e02b      	b.n	800671e <BNO080_parseInputReport+0x1fe>
			stepCount = data3; //Bytes 8/9
 80066c6:	4a32      	ldr	r2, [pc, #200]	; (8006790 <BNO080_parseInputReport+0x270>)
 80066c8:	893b      	ldrh	r3, [r7, #8]
 80066ca:	8013      	strh	r3, [r2, #0]
			break;
 80066cc:	e027      	b.n	800671e <BNO080_parseInputReport+0x1fe>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 80066ce:	4b18      	ldr	r3, [pc, #96]	; (8006730 <BNO080_parseInputReport+0x210>)
 80066d0:	7a5a      	ldrb	r2, [r3, #9]
 80066d2:	4b30      	ldr	r3, [pc, #192]	; (8006794 <BNO080_parseInputReport+0x274>)
 80066d4:	701a      	strb	r2, [r3, #0]
			break;
 80066d6:	e022      	b.n	800671e <BNO080_parseInputReport+0x1fe>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 80066d8:	4b15      	ldr	r3, [pc, #84]	; (8006730 <BNO080_parseInputReport+0x210>)
 80066da:	7a9a      	ldrb	r2, [r3, #10]
 80066dc:	4b2e      	ldr	r3, [pc, #184]	; (8006798 <BNO080_parseInputReport+0x278>)
 80066de:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80066e0:	2300      	movs	r3, #0
 80066e2:	74fb      	strb	r3, [r7, #19]
 80066e4:	e00c      	b.n	8006700 <BNO080_parseInputReport+0x1e0>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 80066e6:	7cfb      	ldrb	r3, [r7, #19]
 80066e8:	f103 020b 	add.w	r2, r3, #11
 80066ec:	4b2b      	ldr	r3, [pc, #172]	; (800679c <BNO080_parseInputReport+0x27c>)
 80066ee:	6819      	ldr	r1, [r3, #0]
 80066f0:	7cfb      	ldrb	r3, [r7, #19]
 80066f2:	440b      	add	r3, r1
 80066f4:	490e      	ldr	r1, [pc, #56]	; (8006730 <BNO080_parseInputReport+0x210>)
 80066f6:	5c8a      	ldrb	r2, [r1, r2]
 80066f8:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80066fa:	7cfb      	ldrb	r3, [r7, #19]
 80066fc:	3301      	adds	r3, #1
 80066fe:	74fb      	strb	r3, [r7, #19]
 8006700:	7cfb      	ldrb	r3, [r7, #19]
 8006702:	2b08      	cmp	r3, #8
 8006704:	d9ef      	bls.n	80066e6 <BNO080_parseInputReport+0x1c6>
			break;
 8006706:	e00a      	b.n	800671e <BNO080_parseInputReport+0x1fe>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8006708:	4b09      	ldr	r3, [pc, #36]	; (8006730 <BNO080_parseInputReport+0x210>)
 800670a:	79db      	ldrb	r3, [r3, #7]
 800670c:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	2b07      	cmp	r3, #7
 8006712:	d103      	bne.n	800671c <BNO080_parseInputReport+0x1fc>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8006714:	4b06      	ldr	r3, [pc, #24]	; (8006730 <BNO080_parseInputReport+0x210>)
 8006716:	7a9a      	ldrb	r2, [r3, #10]
 8006718:	4b21      	ldr	r3, [pc, #132]	; (80067a0 <BNO080_parseInputReport+0x280>)
 800671a:	701a      	strb	r2, [r3, #0]
			break;
 800671c:	bf00      	nop
}
 800671e:	bf00      	nop
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	20000238 	.word	0x20000238
 8006730:	2000028c 	.word	0x2000028c
 8006734:	20000240 	.word	0x20000240
 8006738:	20000314 	.word	0x20000314
 800673c:	2000030c 	.word	0x2000030c
 8006740:	20000318 	.word	0x20000318
 8006744:	20000276 	.word	0x20000276
 8006748:	20000272 	.word	0x20000272
 800674c:	20000246 	.word	0x20000246
 8006750:	20000310 	.word	0x20000310
 8006754:	20000282 	.word	0x20000282
 8006758:	20000284 	.word	0x20000284
 800675c:	20000286 	.word	0x20000286
 8006760:	2000026e 	.word	0x2000026e
 8006764:	2000026c 	.word	0x2000026c
 8006768:	2000023c 	.word	0x2000023c
 800676c:	20000270 	.word	0x20000270
 8006770:	20000312 	.word	0x20000312
 8006774:	20000274 	.word	0x20000274
 8006778:	20000244 	.word	0x20000244
 800677c:	20000316 	.word	0x20000316
 8006780:	20000280 	.word	0x20000280
 8006784:	20000234 	.word	0x20000234
 8006788:	2000023e 	.word	0x2000023e
 800678c:	20000278 	.word	0x20000278
 8006790:	2000031a 	.word	0x2000031a
 8006794:	20000288 	.word	0x20000288
 8006798:	2000030e 	.word	0x2000030e
 800679c:	2000027c 	.word	0x2000027c
 80067a0:	2000030f 	.word	0x2000030f

080067a4 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 80067a8:	4b07      	ldr	r3, [pc, #28]	; (80067c8 <BNO080_getQuatI+0x24>)
 80067aa:	881b      	ldrh	r3, [r3, #0]
 80067ac:	b21a      	sxth	r2, r3
 80067ae:	4b07      	ldr	r3, [pc, #28]	; (80067cc <BNO080_getQuatI+0x28>)
 80067b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	4619      	mov	r1, r3
 80067b8:	4610      	mov	r0, r2
 80067ba:	f000 f8bb 	bl	8006934 <BNO080_qToFloat>
 80067be:	eef0 7a40 	vmov.f32	s15, s0
}
 80067c2:	eeb0 0a67 	vmov.f32	s0, s15
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	20000316 	.word	0x20000316
 80067cc:	20000006 	.word	0x20000006

080067d0 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 80067d4:	4b07      	ldr	r3, [pc, #28]	; (80067f4 <BNO080_getQuatJ+0x24>)
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	b21a      	sxth	r2, r3
 80067da:	4b07      	ldr	r3, [pc, #28]	; (80067f8 <BNO080_getQuatJ+0x28>)
 80067dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	4619      	mov	r1, r3
 80067e4:	4610      	mov	r0, r2
 80067e6:	f000 f8a5 	bl	8006934 <BNO080_qToFloat>
 80067ea:	eef0 7a40 	vmov.f32	s15, s0
}
 80067ee:	eeb0 0a67 	vmov.f32	s0, s15
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	20000280 	.word	0x20000280
 80067f8:	20000006 	.word	0x20000006

080067fc <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 8006800:	4b07      	ldr	r3, [pc, #28]	; (8006820 <BNO080_getQuatK+0x24>)
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	b21a      	sxth	r2, r3
 8006806:	4b07      	ldr	r3, [pc, #28]	; (8006824 <BNO080_getQuatK+0x28>)
 8006808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800680c:	b2db      	uxtb	r3, r3
 800680e:	4619      	mov	r1, r3
 8006810:	4610      	mov	r0, r2
 8006812:	f000 f88f 	bl	8006934 <BNO080_qToFloat>
 8006816:	eef0 7a40 	vmov.f32	s15, s0
}
 800681a:	eeb0 0a67 	vmov.f32	s0, s15
 800681e:	bd80      	pop	{r7, pc}
 8006820:	20000234 	.word	0x20000234
 8006824:	20000006 	.word	0x20000006

08006828 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8006828:	b580      	push	{r7, lr}
 800682a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 800682c:	4b07      	ldr	r3, [pc, #28]	; (800684c <BNO080_getQuatReal+0x24>)
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	b21a      	sxth	r2, r3
 8006832:	4b07      	ldr	r3, [pc, #28]	; (8006850 <BNO080_getQuatReal+0x28>)
 8006834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006838:	b2db      	uxtb	r3, r3
 800683a:	4619      	mov	r1, r3
 800683c:	4610      	mov	r0, r2
 800683e:	f000 f879 	bl	8006934 <BNO080_qToFloat>
 8006842:	eef0 7a40 	vmov.f32	s15, s0
}
 8006846:	eeb0 0a67 	vmov.f32	s0, s15
 800684a:	bd80      	pop	{r7, pc}
 800684c:	2000023e 	.word	0x2000023e
 8006850:	20000006 	.word	0x20000006

08006854 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8006854:	b580      	push	{r7, lr}
 8006856:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8006858:	4b07      	ldr	r3, [pc, #28]	; (8006878 <BNO080_getQuatRadianAccuracy+0x24>)
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	b21a      	sxth	r2, r3
 800685e:	4b07      	ldr	r3, [pc, #28]	; (800687c <BNO080_getQuatRadianAccuracy+0x28>)
 8006860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006864:	b2db      	uxtb	r3, r3
 8006866:	4619      	mov	r1, r3
 8006868:	4610      	mov	r0, r2
 800686a:	f000 f863 	bl	8006934 <BNO080_qToFloat>
 800686e:	eef0 7a40 	vmov.f32	s15, s0
}
 8006872:	eeb0 0a67 	vmov.f32	s0, s15
 8006876:	bd80      	pop	{r7, pc}
 8006878:	20000278 	.word	0x20000278
 800687c:	20000006 	.word	0x20000006

08006880 <BNO080_getQuatAccuracy>:

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8006884:	4b03      	ldr	r3, [pc, #12]	; (8006894 <BNO080_getQuatAccuracy+0x14>)
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	b2db      	uxtb	r3, r3
}
 800688a:	4618      	mov	r0, r3
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	20000244 	.word	0x20000244

08006898 <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 8006898:	b580      	push	{r7, lr}
 800689a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 800689c:	4b07      	ldr	r3, [pc, #28]	; (80068bc <BNO080_getMagX+0x24>)
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b21a      	sxth	r2, r3
 80068a2:	4b07      	ldr	r3, [pc, #28]	; (80068c0 <BNO080_getMagX+0x28>)
 80068a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	4619      	mov	r1, r3
 80068ac:	4610      	mov	r0, r2
 80068ae:	f000 f841 	bl	8006934 <BNO080_qToFloat>
 80068b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80068b6:	eeb0 0a67 	vmov.f32	s0, s15
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	20000270 	.word	0x20000270
 80068c0:	20000008 	.word	0x20000008

080068c4 <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 80068c8:	4b07      	ldr	r3, [pc, #28]	; (80068e8 <BNO080_getMagY+0x24>)
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	b21a      	sxth	r2, r3
 80068ce:	4b07      	ldr	r3, [pc, #28]	; (80068ec <BNO080_getMagY+0x28>)
 80068d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	4619      	mov	r1, r3
 80068d8:	4610      	mov	r0, r2
 80068da:	f000 f82b 	bl	8006934 <BNO080_qToFloat>
 80068de:	eef0 7a40 	vmov.f32	s15, s0
}
 80068e2:	eeb0 0a67 	vmov.f32	s0, s15
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	20000312 	.word	0x20000312
 80068ec:	20000008 	.word	0x20000008

080068f0 <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 80068f4:	4b07      	ldr	r3, [pc, #28]	; (8006914 <BNO080_getMagZ+0x24>)
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b21a      	sxth	r2, r3
 80068fa:	4b07      	ldr	r3, [pc, #28]	; (8006918 <BNO080_getMagZ+0x28>)
 80068fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006900:	b2db      	uxtb	r3, r3
 8006902:	4619      	mov	r1, r3
 8006904:	4610      	mov	r0, r2
 8006906:	f000 f815 	bl	8006934 <BNO080_qToFloat>
 800690a:	eef0 7a40 	vmov.f32	s15, s0
}
 800690e:	eeb0 0a67 	vmov.f32	s0, s15
 8006912:	bd80      	pop	{r7, pc}
 8006914:	20000274 	.word	0x20000274
 8006918:	20000008 	.word	0x20000008

0800691c <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
	return (magAccuracy);
 8006920:	4b03      	ldr	r3, [pc, #12]	; (8006930 <BNO080_getMagAccuracy+0x14>)
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	b2db      	uxtb	r3, r3
}
 8006926:	4618      	mov	r0, r3
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	2000023c 	.word	0x2000023c

08006934 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	ed2d 8b02 	vpush	{d8}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	4603      	mov	r3, r0
 8006940:	460a      	mov	r2, r1
 8006942:	80fb      	strh	r3, [r7, #6]
 8006944:	4613      	mov	r3, r2
 8006946:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8006948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800694c:	ee07 3a90 	vmov	s15, r3
 8006950:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8006954:	797b      	ldrb	r3, [r7, #5]
 8006956:	425b      	negs	r3, r3
 8006958:	ee07 3a90 	vmov	s15, r3
 800695c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006960:	eef0 0a67 	vmov.f32	s1, s15
 8006964:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006968:	f008 f902 	bl	800eb70 <powf>
 800696c:	eef0 7a40 	vmov.f32	s15, s0
 8006970:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8006974:	eeb0 0a67 	vmov.f32	s0, s15
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	ecbd 8b02 	vpop	{d8}
 8006980:	bd80      	pop	{r7, pc}

08006982 <BNO080_enableGameRotationVector>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
}

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b082      	sub	sp, #8
 8006986:	af00      	add	r7, sp, #0
 8006988:	4603      	mov	r3, r0
 800698a:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 800698c:	88fb      	ldrh	r3, [r7, #6]
 800698e:	2200      	movs	r2, #0
 8006990:	4619      	mov	r1, r3
 8006992:	2008      	movs	r0, #8
 8006994:	f000 f82a 	bl	80069ec <BNO080_setFeatureCommand>
}
 8006998:	bf00      	nop
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <BNO080_enableMagnetometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
}

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	4603      	mov	r3, r0
 80069a8:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 80069aa:	88fb      	ldrh	r3, [r7, #6]
 80069ac:	2200      	movs	r2, #0
 80069ae:	4619      	mov	r1, r3
 80069b0:	2003      	movs	r0, #3
 80069b2:	f000 f81b 	bl	80069ec <BNO080_setFeatureCommand>
}
 80069b6:	bf00      	nop
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 80069c2:	2004      	movs	r0, #4
 80069c4:	f000 f884 	bl	8006ad0 <BNO080_sendCalibrateCommand>
}
 80069c8:	bf00      	nop
 80069ca:	bd80      	pop	{r7, pc}

080069cc <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 80069d0:	4b05      	ldr	r3, [pc, #20]	; (80069e8 <BNO080_calibrationComplete+0x1c>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <BNO080_calibrationComplete+0x10>
		return (1);
 80069d8:	2301      	movs	r3, #1
 80069da:	e000      	b.n	80069de <BNO080_calibrationComplete+0x12>
	return (0);
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	2000030f 	.word	0x2000030f

080069ec <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	4603      	mov	r3, r0
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80069fa:	4b24      	ldr	r3, [pc, #144]	; (8006a8c <BNO080_setFeatureCommand+0xa0>)
 80069fc:	22fd      	movs	r2, #253	; 0xfd
 80069fe:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8006a00:	4a22      	ldr	r2, [pc, #136]	; (8006a8c <BNO080_setFeatureCommand+0xa0>)
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
 8006a04:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8006a06:	4b21      	ldr	r3, [pc, #132]	; (8006a8c <BNO080_setFeatureCommand+0xa0>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8006a0c:	4b1f      	ldr	r3, [pc, #124]	; (8006a8c <BNO080_setFeatureCommand+0xa0>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8006a12:	4b1e      	ldr	r3, [pc, #120]	; (8006a8c <BNO080_setFeatureCommand+0xa0>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	4b1b      	ldr	r3, [pc, #108]	; (8006a8c <BNO080_setFeatureCommand+0xa0>)
 8006a1e:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	0a1b      	lsrs	r3, r3, #8
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	4b19      	ldr	r3, [pc, #100]	; (8006a8c <BNO080_setFeatureCommand+0xa0>)
 8006a28:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	0c1b      	lsrs	r3, r3, #16
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	4b16      	ldr	r3, [pc, #88]	; (8006a8c <BNO080_setFeatureCommand+0xa0>)
 8006a32:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	0e1b      	lsrs	r3, r3, #24
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	4b14      	ldr	r3, [pc, #80]	; (8006a8c <BNO080_setFeatureCommand+0xa0>)
 8006a3c:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8006a3e:	4b13      	ldr	r3, [pc, #76]	; (8006a8c <BNO080_setFeatureCommand+0xa0>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8006a44:	4b11      	ldr	r3, [pc, #68]	; (8006a8c <BNO080_setFeatureCommand+0xa0>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8006a4a:	4b10      	ldr	r3, [pc, #64]	; (8006a8c <BNO080_setFeatureCommand+0xa0>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8006a50:	4b0e      	ldr	r3, [pc, #56]	; (8006a8c <BNO080_setFeatureCommand+0xa0>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <BNO080_setFeatureCommand+0xa0>)
 8006a5c:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	0a1b      	lsrs	r3, r3, #8
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	4b09      	ldr	r3, [pc, #36]	; (8006a8c <BNO080_setFeatureCommand+0xa0>)
 8006a66:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	0c1b      	lsrs	r3, r3, #16
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	4b07      	ldr	r3, [pc, #28]	; (8006a8c <BNO080_setFeatureCommand+0xa0>)
 8006a70:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	0e1b      	lsrs	r3, r3, #24
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	4b04      	ldr	r3, [pc, #16]	; (8006a8c <BNO080_setFeatureCommand+0xa0>)
 8006a7a:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8006a7c:	2111      	movs	r1, #17
 8006a7e:	2002      	movs	r0, #2
 8006a80:	f000 f938 	bl	8006cf4 <BNO080_sendPacket>
}
 8006a84:	bf00      	nop
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	2000028c 	.word	0x2000028c

08006a90 <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	4603      	mov	r3, r0
 8006a98:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8006a9a:	4b0b      	ldr	r3, [pc, #44]	; (8006ac8 <BNO080_sendCommand+0x38>)
 8006a9c:	22f2      	movs	r2, #242	; 0xf2
 8006a9e:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8006aa0:	4b0a      	ldr	r3, [pc, #40]	; (8006acc <BNO080_sendCommand+0x3c>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	b2d1      	uxtb	r1, r2
 8006aa8:	4a08      	ldr	r2, [pc, #32]	; (8006acc <BNO080_sendCommand+0x3c>)
 8006aaa:	7011      	strb	r1, [r2, #0]
 8006aac:	4a06      	ldr	r2, [pc, #24]	; (8006ac8 <BNO080_sendCommand+0x38>)
 8006aae:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8006ab0:	4a05      	ldr	r2, [pc, #20]	; (8006ac8 <BNO080_sendCommand+0x38>)
 8006ab2:	79fb      	ldrb	r3, [r7, #7]
 8006ab4:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 8006ab6:	210c      	movs	r1, #12
 8006ab8:	2002      	movs	r0, #2
 8006aba:	f000 f91b 	bl	8006cf4 <BNO080_sendPacket>
}
 8006abe:	bf00      	nop
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	2000028c 	.word	0x2000028c
 8006acc:	2000020a 	.word	0x2000020a

08006ad0 <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8006ada:	2303      	movs	r3, #3
 8006adc:	73fb      	strb	r3, [r7, #15]
 8006ade:	e006      	b.n	8006aee <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
 8006ae2:	4a1d      	ldr	r2, [pc, #116]	; (8006b58 <BNO080_sendCalibrateCommand+0x88>)
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	3301      	adds	r3, #1
 8006aec:	73fb      	strb	r3, [r7, #15]
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	2b0b      	cmp	r3, #11
 8006af2:	d9f5      	bls.n	8006ae0 <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8006af4:	79fb      	ldrb	r3, [r7, #7]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d103      	bne.n	8006b02 <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 8006afa:	4b17      	ldr	r3, [pc, #92]	; (8006b58 <BNO080_sendCalibrateCommand+0x88>)
 8006afc:	2201      	movs	r2, #1
 8006afe:	70da      	strb	r2, [r3, #3]
 8006b00:	e020      	b.n	8006b44 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d103      	bne.n	8006b10 <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 8006b08:	4b13      	ldr	r3, [pc, #76]	; (8006b58 <BNO080_sendCalibrateCommand+0x88>)
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	711a      	strb	r2, [r3, #4]
 8006b0e:	e019      	b.n	8006b44 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 8006b10:	79fb      	ldrb	r3, [r7, #7]
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d103      	bne.n	8006b1e <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 8006b16:	4b10      	ldr	r3, [pc, #64]	; (8006b58 <BNO080_sendCalibrateCommand+0x88>)
 8006b18:	2201      	movs	r2, #1
 8006b1a:	715a      	strb	r2, [r3, #5]
 8006b1c:	e012      	b.n	8006b44 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 8006b1e:	79fb      	ldrb	r3, [r7, #7]
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	d103      	bne.n	8006b2c <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8006b24:	4b0c      	ldr	r3, [pc, #48]	; (8006b58 <BNO080_sendCalibrateCommand+0x88>)
 8006b26:	2201      	movs	r2, #1
 8006b28:	71da      	strb	r2, [r3, #7]
 8006b2a:	e00b      	b.n	8006b44 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 8006b2c:	79fb      	ldrb	r3, [r7, #7]
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d108      	bne.n	8006b44 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 8006b32:	4b09      	ldr	r3, [pc, #36]	; (8006b58 <BNO080_sendCalibrateCommand+0x88>)
 8006b34:	2201      	movs	r2, #1
 8006b36:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8006b38:	4b07      	ldr	r3, [pc, #28]	; (8006b58 <BNO080_sendCalibrateCommand+0x88>)
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 8006b3e:	4b06      	ldr	r3, [pc, #24]	; (8006b58 <BNO080_sendCalibrateCommand+0x88>)
 8006b40:	2201      	movs	r2, #1
 8006b42:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8006b44:	4b05      	ldr	r3, [pc, #20]	; (8006b5c <BNO080_sendCalibrateCommand+0x8c>)
 8006b46:	2201      	movs	r2, #1
 8006b48:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8006b4a:	2007      	movs	r0, #7
 8006b4c:	f7ff ffa0 	bl	8006a90 <BNO080_sendCommand>
}
 8006b50:	bf00      	nop
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	2000028c 	.word	0x2000028c
 8006b5c:	2000030f 	.word	0x2000030f

08006b60 <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8006b66:	2303      	movs	r3, #3
 8006b68:	71fb      	strb	r3, [r7, #7]
 8006b6a:	e006      	b.n	8006b7a <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8006b6c:	79fb      	ldrb	r3, [r7, #7]
 8006b6e:	4a09      	ldr	r2, [pc, #36]	; (8006b94 <BNO080_requestCalibrationStatus+0x34>)
 8006b70:	2100      	movs	r1, #0
 8006b72:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8006b74:	79fb      	ldrb	r3, [r7, #7]
 8006b76:	3301      	adds	r3, #1
 8006b78:	71fb      	strb	r3, [r7, #7]
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	2b0b      	cmp	r3, #11
 8006b7e:	d9f5      	bls.n	8006b6c <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8006b80:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <BNO080_requestCalibrationStatus+0x34>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8006b86:	2007      	movs	r0, #7
 8006b88:	f7ff ff82 	bl	8006a90 <BNO080_sendCommand>
}
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	2000028c 	.word	0x2000028c

08006b98 <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	71fb      	strb	r3, [r7, #7]
 8006ba2:	e006      	b.n	8006bb2 <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	4a08      	ldr	r2, [pc, #32]	; (8006bc8 <BNO080_saveCalibration+0x30>)
 8006ba8:	2100      	movs	r1, #0
 8006baa:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8006bac:	79fb      	ldrb	r3, [r7, #7]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	71fb      	strb	r3, [r7, #7]
 8006bb2:	79fb      	ldrb	r3, [r7, #7]
 8006bb4:	2b0b      	cmp	r3, #11
 8006bb6:	d9f5      	bls.n	8006ba4 <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 8006bb8:	2006      	movs	r0, #6
 8006bba:	f7ff ff69 	bl	8006a90 <BNO080_sendCommand>
}
 8006bbe:	bf00      	nop
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	2000028c 	.word	0x2000028c

08006bcc <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	607b      	str	r3, [r7, #4]
 8006bd6:	e00c      	b.n	8006bf2 <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8006bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006bdc:	480b      	ldr	r0, [pc, #44]	; (8006c0c <BNO080_waitForSPI+0x40>)
 8006bde:	f7ff faa3 	bl	8006128 <LL_GPIO_IsInputPinSet>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8006be8:	2301      	movs	r3, #1
 8006bea:	e00a      	b.n	8006c02 <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	607b      	str	r3, [r7, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf8:	d1ee      	bne.n	8006bd8 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8006bfa:	4805      	ldr	r0, [pc, #20]	; (8006c10 <BNO080_waitForSPI+0x44>)
 8006bfc:	f006 f8a2 	bl	800cd44 <puts>
	return (0);
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	40020800 	.word	0x40020800
 8006c10:	0800fb18 	.word	0x0800fb18

08006c14 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8006c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c1e:	4831      	ldr	r0, [pc, #196]	; (8006ce4 <BNO080_receivePacket+0xd0>)
 8006c20:	f7ff fa82 	bl	8006128 <LL_GPIO_IsInputPinSet>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	e056      	b.n	8006cdc <BNO080_receivePacket+0xc8>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8006c2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c32:	482d      	ldr	r0, [pc, #180]	; (8006ce8 <BNO080_receivePacket+0xd4>)
 8006c34:	f7ff fa9b 	bl	800616e <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8006c38:	2000      	movs	r0, #0
 8006c3a:	f7ff fc05 	bl	8006448 <SPI2_SendByte>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8006c42:	2000      	movs	r0, #0
 8006c44:	f7ff fc00 	bl	8006448 <SPI2_SendByte>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	f7ff fbfb 	bl	8006448 <SPI2_SendByte>
 8006c52:	4603      	mov	r3, r0
 8006c54:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8006c56:	2000      	movs	r0, #0
 8006c58:	f7ff fbf6 	bl	8006448 <SPI2_SendByte>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8006c60:	4a22      	ldr	r2, [pc, #136]	; (8006cec <BNO080_receivePacket+0xd8>)
 8006c62:	7b7b      	ldrb	r3, [r7, #13]
 8006c64:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8006c66:	4a21      	ldr	r2, [pc, #132]	; (8006cec <BNO080_receivePacket+0xd8>)
 8006c68:	7b3b      	ldrb	r3, [r7, #12]
 8006c6a:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8006c6c:	4a1f      	ldr	r2, [pc, #124]	; (8006cec <BNO080_receivePacket+0xd8>)
 8006c6e:	7afb      	ldrb	r3, [r7, #11]
 8006c70:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8006c72:	4a1e      	ldr	r2, [pc, #120]	; (8006cec <BNO080_receivePacket+0xd8>)
 8006c74:	7abb      	ldrb	r3, [r7, #10]
 8006c76:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8006c78:	7b3b      	ldrb	r3, [r7, #12]
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	b21a      	sxth	r2, r3
 8006c7e:	7b7b      	ldrb	r3, [r7, #13]
 8006c80:	b21b      	sxth	r3, r3
 8006c82:	4313      	orrs	r3, r2
 8006c84:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8006c86:	893b      	ldrh	r3, [r7, #8]
 8006c88:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006c8c:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8006c8e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <BNO080_receivePacket+0x86>
	{
		//Packet is empty
		return (0); //All done
 8006c96:	2300      	movs	r3, #0
 8006c98:	e020      	b.n	8006cdc <BNO080_receivePacket+0xc8>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8006c9a:	893b      	ldrh	r3, [r7, #8]
 8006c9c:	3b04      	subs	r3, #4
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	81fb      	strh	r3, [r7, #14]
 8006ca6:	e00e      	b.n	8006cc6 <BNO080_receivePacket+0xb2>
	{
		incoming = SPI2_SendByte(0xFF);
 8006ca8:	20ff      	movs	r0, #255	; 0xff
 8006caa:	f7ff fbcd 	bl	8006448 <SPI2_SendByte>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8006cb2:	89fb      	ldrh	r3, [r7, #14]
 8006cb4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cb6:	d803      	bhi.n	8006cc0 <BNO080_receivePacket+0xac>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8006cb8:	89fb      	ldrh	r3, [r7, #14]
 8006cba:	490d      	ldr	r1, [pc, #52]	; (8006cf0 <BNO080_receivePacket+0xdc>)
 8006cbc:	79fa      	ldrb	r2, [r7, #7]
 8006cbe:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8006cc0:	89fb      	ldrh	r3, [r7, #14]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	81fb      	strh	r3, [r7, #14]
 8006cc6:	89fa      	ldrh	r2, [r7, #14]
 8006cc8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	dbeb      	blt.n	8006ca8 <BNO080_receivePacket+0x94>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8006cd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006cd4:	4804      	ldr	r0, [pc, #16]	; (8006ce8 <BNO080_receivePacket+0xd4>)
 8006cd6:	f7ff fa3c 	bl	8006152 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8006cda:	2301      	movs	r3, #1
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	40020800 	.word	0x40020800
 8006ce8:	40020400 	.word	0x40020400
 8006cec:	20000238 	.word	0x20000238
 8006cf0:	2000028c 	.word	0x2000028c

08006cf4 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	460a      	mov	r2, r1
 8006cfe:	71fb      	strb	r3, [r7, #7]
 8006d00:	4613      	mov	r3, r2
 8006d02:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8006d04:	79bb      	ldrb	r3, [r7, #6]
 8006d06:	3304      	adds	r3, #4
 8006d08:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8006d0a:	f7ff ff5f 	bl	8006bcc <BNO080_waitForSPI>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8006d14:	2300      	movs	r3, #0
 8006d16:	e032      	b.n	8006d7e <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8006d18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d1c:	481a      	ldr	r0, [pc, #104]	; (8006d88 <BNO080_sendPacket+0x94>)
 8006d1e:	f7ff fa26 	bl	800616e <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff fb8f 	bl	8006448 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	121b      	asrs	r3, r3, #8
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff fb89 	bl	8006448 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8006d36:	79fb      	ldrb	r3, [r7, #7]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff fb85 	bl	8006448 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8006d3e:	79fb      	ldrb	r3, [r7, #7]
 8006d40:	4a12      	ldr	r2, [pc, #72]	; (8006d8c <BNO080_sendPacket+0x98>)
 8006d42:	5cd2      	ldrb	r2, [r2, r3]
 8006d44:	1c51      	adds	r1, r2, #1
 8006d46:	b2c8      	uxtb	r0, r1
 8006d48:	4910      	ldr	r1, [pc, #64]	; (8006d8c <BNO080_sendPacket+0x98>)
 8006d4a:	54c8      	strb	r0, [r1, r3]
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	f7ff fb7b 	bl	8006448 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]
 8006d56:	e008      	b.n	8006d6a <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
 8006d5a:	4a0d      	ldr	r2, [pc, #52]	; (8006d90 <BNO080_sendPacket+0x9c>)
 8006d5c:	5cd3      	ldrb	r3, [r2, r3]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7ff fb72 	bl	8006448 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
 8006d66:	3301      	adds	r3, #1
 8006d68:	73fb      	strb	r3, [r7, #15]
 8006d6a:	7bfa      	ldrb	r2, [r7, #15]
 8006d6c:	79bb      	ldrb	r3, [r7, #6]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d3f2      	bcc.n	8006d58 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8006d72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d76:	4804      	ldr	r0, [pc, #16]	; (8006d88 <BNO080_sendPacket+0x94>)
 8006d78:	f7ff f9eb 	bl	8006152 <LL_GPIO_SetOutputPin>

	return (1);
 8006d7c:	2301      	movs	r3, #1
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	40020400 	.word	0x40020400
 8006d8c:	20000204 	.word	0x20000204
 8006d90:	2000028c 	.word	0x2000028c

08006d94 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8006da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006da4:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<len-2;i++)
 8006da6:	2300      	movs	r3, #0
 8006da8:	60bb      	str	r3, [r7, #8]
 8006daa:	e00a      	b.n	8006dc2 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	4413      	add	r3, r2
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	89fa      	ldrh	r2, [r7, #14]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<len-2;i++)
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	60bb      	str	r3, [r7, #8]
 8006dc2:	78fb      	ldrb	r3, [r7, #3]
 8006dc4:	3b02      	subs	r3, #2
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	dbef      	blt.n	8006dac <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 8006dcc:	89fb      	ldrh	r3, [r7, #14]
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	321e      	adds	r2, #30
 8006dd4:	7812      	ldrb	r2, [r2, #0]
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d10a      	bne.n	8006df0 <iBus_Check_CHKSUM+0x5c>
 8006dda:	89fb      	ldrh	r3, [r7, #14]
 8006ddc:	0a1b      	lsrs	r3, r3, #8
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	331f      	adds	r3, #31
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d101      	bne.n	8006df0 <iBus_Check_CHKSUM+0x5c>
 8006dec:	2301      	movs	r3, #1
 8006dee:	e000      	b.n	8006df2 <iBus_Check_CHKSUM+0x5e>
 8006df0:	2300      	movs	r3, #0
 8006df2:	b2db      	uxtb	r3, r3
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]

	iBus->RH = (data[2] | data[3]<<8) & 0x0fff;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	3302      	adds	r3, #2
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	b21a      	sxth	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3303      	adds	r3, #3
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	021b      	lsls	r3, r3, #8
 8006e1a:	b21b      	sxth	r3, r3
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	b21b      	sxth	r3, r3
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	b21a      	sxth	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	3305      	adds	r3, #5
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	021b      	lsls	r3, r3, #8
 8006e3c:	b21b      	sxth	r3, r3
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	b21b      	sxth	r3, r3
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	3306      	adds	r3, #6
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	b21a      	sxth	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	3307      	adds	r3, #7
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	021b      	lsls	r3, r3, #8
 8006e5e:	b21b      	sxth	r3, r3
 8006e60:	4313      	orrs	r3, r2
 8006e62:	b21b      	sxth	r3, r3
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3308      	adds	r3, #8
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	b21a      	sxth	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	3309      	adds	r3, #9
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	021b      	lsls	r3, r3, #8
 8006e80:	b21b      	sxth	r3, r3
 8006e82:	4313      	orrs	r3, r2
 8006e84:	b21b      	sxth	r3, r3
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	330a      	adds	r3, #10
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	b21a      	sxth	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	330b      	adds	r3, #11
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	021b      	lsls	r3, r3, #8
 8006ea2:	b21b      	sxth	r3, r3
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	b21b      	sxth	r3, r3
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	811a      	strh	r2, [r3, #8]
	iBus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	330c      	adds	r3, #12
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	b21a      	sxth	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	330d      	adds	r3, #13
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	021b      	lsls	r3, r3, #8
 8006ec4:	b21b      	sxth	r3, r3
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	b21b      	sxth	r3, r3
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	819a      	strh	r2, [r3, #12]

#define _USE_FS_I6
#ifdef _USE_FS_I6
	iBus->FailSafe = (data[13] >> 4);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	330d      	adds	r3, #13
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	091b      	lsrs	r3, r3, #4
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	751a      	strb	r2, [r3, #20]

#ifdef _USE_FS_I6X
	iBus->SwD = (data[14] | data[15]<<8) & 0x0fff;
	iBus->FailSafe = iBus->SwD == 1500;
#endif
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <iBus_isActiveFailsafe>:

unsigned char iBus_isActiveFailsafe(FSiA6B_iBus* iBus)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	7d1b      	ldrb	r3, [r3, #20]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	bf14      	ite	ne
 8006f00:	2301      	movne	r3, #1
 8006f02:	2300      	moveq	r3, #0
 8006f04:	b2db      	uxtb	r3, r3
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <LL_SPI_Enable>:
{
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	601a      	str	r2, [r3, #0]
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <LL_SPI_SetStandard>:
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f023 0210 	bic.w	r2, r3, #16
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	431a      	orrs	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	605a      	str	r2, [r3, #4]
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <LL_SPI_IsActiveFlag_RXNE>:
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d101      	bne.n	8006f70 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e000      	b.n	8006f72 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <LL_SPI_IsActiveFlag_TXE>:
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b083      	sub	sp, #12
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d101      	bne.n	8006f96 <LL_SPI_IsActiveFlag_TXE+0x18>
 8006f92:	2301      	movs	r3, #1
 8006f94:	e000      	b.n	8006f98 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <LL_SPI_ReceiveData8>:
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	b2db      	uxtb	r3, r3
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <LL_SPI_TransmitData8>:
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b085      	sub	sp, #20
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	330c      	adds	r3, #12
 8006fce:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	78fa      	ldrb	r2, [r7, #3]
 8006fd4:	701a      	strb	r2, [r3, #0]
}
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <LL_GPIO_IsInputPinSet>:
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	691a      	ldr	r2, [r3, #16]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	bf0c      	ite	eq
 8006ffa:	2301      	moveq	r3, #1
 8006ffc:	2300      	movne	r3, #0
 8006ffe:	b2db      	uxtb	r3, r3
}
 8007000:	4618      	mov	r0, r3
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <LL_GPIO_SetOutputPin>:
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	619a      	str	r2, [r3, #24]
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <LL_GPIO_ResetOutputPin>:
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	041a      	lsls	r2, r3, #16
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	619a      	str	r2, [r3, #24]
}
 800703a:	bf00      	nop
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
	...

08007048 <LL_AHB1_GRP1_EnableClock>:
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007050:	4b08      	ldr	r3, [pc, #32]	; (8007074 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007054:	4907      	ldr	r1, [pc, #28]	; (8007074 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4313      	orrs	r3, r2
 800705a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800705c:	4b05      	ldr	r3, [pc, #20]	; (8007074 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800705e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4013      	ands	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007066:	68fb      	ldr	r3, [r7, #12]
}
 8007068:	bf00      	nop
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	40023800 	.word	0x40023800

08007078 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8007080:	4b08      	ldr	r3, [pc, #32]	; (80070a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007082:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007084:	4907      	ldr	r1, [pc, #28]	; (80070a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4313      	orrs	r3, r2
 800708a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800708c:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800708e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4013      	ands	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007096:	68fb      	ldr	r3, [r7, #12]
}
 8007098:	bf00      	nop
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	40023800 	.word	0x40023800

080070a8 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b090      	sub	sp, #64	; 0x40
 80070ac:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80070ae:	f107 0318 	add.w	r3, r7, #24
 80070b2:	2228      	movs	r2, #40	; 0x28
 80070b4:	2100      	movs	r1, #0
 80070b6:	4618      	mov	r0, r3
 80070b8:	f005 f96c 	bl	800c394 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070bc:	463b      	mov	r3, r7
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	605a      	str	r2, [r3, #4]
 80070c4:	609a      	str	r2, [r3, #8]
 80070c6:	60da      	str	r2, [r3, #12]
 80070c8:	611a      	str	r2, [r3, #16]
 80070ca:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80070cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80070d0:	f7ff ffd2 	bl	8007078 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80070d4:	2001      	movs	r0, #1
 80070d6:	f7ff ffb7 	bl	8007048 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80070da:	2004      	movs	r0, #4
 80070dc:	f7ff ffb4 	bl	8007048 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80070e0:	23e0      	movs	r3, #224	; 0xe0
 80070e2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80070e4:	2302      	movs	r3, #2
 80070e6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80070e8:	2303      	movs	r3, #3
 80070ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80070ec:	2300      	movs	r3, #0
 80070ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80070f0:	2300      	movs	r3, #0
 80070f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80070f4:	2305      	movs	r3, #5
 80070f6:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070f8:	463b      	mov	r3, r7
 80070fa:	4619      	mov	r1, r3
 80070fc:	4825      	ldr	r0, [pc, #148]	; (8007194 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80070fe:	f7fd fe8f 	bl	8004e20 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8007102:	2300      	movs	r3, #0
 8007104:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8007106:	f44f 7382 	mov.w	r3, #260	; 0x104
 800710a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800710c:	2300      	movs	r3, #0
 800710e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8007110:	2302      	movs	r3, #2
 8007112:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8007114:	2301      	movs	r3, #1
 8007116:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8007118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800711c:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800711e:	2310      	movs	r3, #16
 8007120:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8007122:	2300      	movs	r3, #0
 8007124:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8007126:	2300      	movs	r3, #0
 8007128:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800712a:	230a      	movs	r3, #10
 800712c:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 800712e:	f107 0318 	add.w	r3, r7, #24
 8007132:	4619      	mov	r1, r3
 8007134:	4818      	ldr	r0, [pc, #96]	; (8007198 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8007136:	f7fe f842 	bl	80051be <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800713a:	2100      	movs	r1, #0
 800713c:	4816      	ldr	r0, [pc, #88]	; (8007198 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800713e:	f7ff fef8 	bl	8006f32 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8007142:	2110      	movs	r1, #16
 8007144:	4815      	ldr	r0, [pc, #84]	; (800719c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8007146:	f7ff ff6f 	bl	8007028 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 800714a:	2310      	movs	r3, #16
 800714c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800714e:	2301      	movs	r3, #1
 8007150:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007152:	2303      	movs	r3, #3
 8007154:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800715a:	2300      	movs	r3, #0
 800715c:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 800715e:	463b      	mov	r3, r7
 8007160:	4619      	mov	r1, r3
 8007162:	480e      	ldr	r0, [pc, #56]	; (800719c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8007164:	f7fd fe5c 	bl	8004e20 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8007168:	2320      	movs	r3, #32
 800716a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800716c:	2300      	movs	r3, #0
 800716e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007170:	2301      	movs	r3, #1
 8007172:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8007174:	463b      	mov	r3, r7
 8007176:	4619      	mov	r1, r3
 8007178:	4808      	ldr	r0, [pc, #32]	; (800719c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800717a:	f7fd fe51 	bl	8004e20 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 800717e:	4806      	ldr	r0, [pc, #24]	; (8007198 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8007180:	f7ff fec7 	bl	8006f12 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8007184:	2110      	movs	r1, #16
 8007186:	4805      	ldr	r0, [pc, #20]	; (800719c <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8007188:	f7ff ff40 	bl	800700c <LL_GPIO_SetOutputPin>
}
 800718c:	bf00      	nop
 800718e:	3740      	adds	r7, #64	; 0x40
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	40020000 	.word	0x40020000
 8007198:	40013000 	.word	0x40013000
 800719c:	40020800 	.word	0x40020800

080071a0 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 80071aa:	bf00      	nop
 80071ac:	480c      	ldr	r0, [pc, #48]	; (80071e0 <SPI1_SendByte+0x40>)
 80071ae:	f7ff fee6 	bl	8006f7e <LL_SPI_IsActiveFlag_TXE>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0f9      	beq.n	80071ac <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	4619      	mov	r1, r3
 80071bc:	4808      	ldr	r0, [pc, #32]	; (80071e0 <SPI1_SendByte+0x40>)
 80071be:	f7ff fefe 	bl	8006fbe <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80071c2:	bf00      	nop
 80071c4:	4806      	ldr	r0, [pc, #24]	; (80071e0 <SPI1_SendByte+0x40>)
 80071c6:	f7ff fec7 	bl	8006f58 <LL_SPI_IsActiveFlag_RXNE>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0f9      	beq.n	80071c4 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80071d0:	4803      	ldr	r0, [pc, #12]	; (80071e0 <SPI1_SendByte+0x40>)
 80071d2:	f7ff fee7 	bl	8006fa4 <LL_SPI_ReceiveData8>
 80071d6:	4603      	mov	r3, r0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	40013000 	.word	0x40013000

080071e4 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	4603      	mov	r3, r0
 80071ec:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 80071ee:	2110      	movs	r1, #16
 80071f0:	480b      	ldr	r0, [pc, #44]	; (8007220 <ICM20602_Readbyte+0x3c>)
 80071f2:	f7ff ff19 	bl	8007028 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80071f6:	79fb      	ldrb	r3, [r7, #7]
 80071f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	4618      	mov	r0, r3
 8007200:	f7ff ffce 	bl	80071a0 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8007204:	2000      	movs	r0, #0
 8007206:	f7ff ffcb 	bl	80071a0 <SPI1_SendByte>
 800720a:	4603      	mov	r3, r0
 800720c:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800720e:	2110      	movs	r1, #16
 8007210:	4803      	ldr	r0, [pc, #12]	; (8007220 <ICM20602_Readbyte+0x3c>)
 8007212:	f7ff fefb 	bl	800700c <LL_GPIO_SetOutputPin>
	
	return val;
 8007216:	7bfb      	ldrb	r3, [r7, #15]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	40020800 	.word	0x40020800

08007224 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8007224:	b590      	push	{r4, r7, lr}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	4603      	mov	r3, r0
 800722c:	603a      	str	r2, [r7, #0]
 800722e:	71fb      	strb	r3, [r7, #7]
 8007230:	460b      	mov	r3, r1
 8007232:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8007234:	2300      	movs	r3, #0
 8007236:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8007238:	2110      	movs	r1, #16
 800723a:	4810      	ldr	r0, [pc, #64]	; (800727c <ICM20602_Readbytes+0x58>)
 800723c:	f7ff fef4 	bl	8007028 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8007240:	79fb      	ldrb	r3, [r7, #7]
 8007242:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007246:	b2db      	uxtb	r3, r3
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff ffa9 	bl	80071a0 <SPI1_SendByte>
	while(i < len)
 800724e:	e009      	b.n	8007264 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	60fa      	str	r2, [r7, #12]
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	18d4      	adds	r4, r2, r3
 800725a:	2000      	movs	r0, #0
 800725c:	f7ff ffa0 	bl	80071a0 <SPI1_SendByte>
 8007260:	4603      	mov	r3, r0
 8007262:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8007264:	79bb      	ldrb	r3, [r7, #6]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	429a      	cmp	r2, r3
 800726a:	d3f1      	bcc.n	8007250 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 800726c:	2110      	movs	r1, #16
 800726e:	4803      	ldr	r0, [pc, #12]	; (800727c <ICM20602_Readbytes+0x58>)
 8007270:	f7ff fecc 	bl	800700c <LL_GPIO_SetOutputPin>
}
 8007274:	bf00      	nop
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	bd90      	pop	{r4, r7, pc}
 800727c:	40020800 	.word	0x40020800

08007280 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	4603      	mov	r3, r0
 8007288:	460a      	mov	r2, r1
 800728a:	71fb      	strb	r3, [r7, #7]
 800728c:	4613      	mov	r3, r2
 800728e:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8007290:	2110      	movs	r1, #16
 8007292:	480b      	ldr	r0, [pc, #44]	; (80072c0 <ICM20602_Writebyte+0x40>)
 8007294:	f7ff fec8 	bl	8007028 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff ff7d 	bl	80071a0 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80072a6:	79bb      	ldrb	r3, [r7, #6]
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7ff ff79 	bl	80071a0 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80072ae:	2110      	movs	r1, #16
 80072b0:	4803      	ldr	r0, [pc, #12]	; (80072c0 <ICM20602_Writebyte+0x40>)
 80072b2:	f7ff feab 	bl	800700c <LL_GPIO_SetOutputPin>
}
 80072b6:	bf00      	nop
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	40020800 	.word	0x40020800

080072c4 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80072ce:	f107 0308 	add.w	r3, r7, #8
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80072d8:	463b      	mov	r3, r7
 80072da:	2200      	movs	r2, #0
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 80072e0:	f7ff fee2 	bl	80070a8 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 80072e4:	4833      	ldr	r0, [pc, #204]	; (80073b4 <ICM20602_Initialization+0xf0>)
 80072e6:	f005 fcb9 	bl	800cc5c <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80072ea:	2075      	movs	r0, #117	; 0x75
 80072ec:	f7ff ff7a 	bl	80071e4 <ICM20602_Readbyte>
 80072f0:	4603      	mov	r3, r0
 80072f2:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
 80072f6:	2b12      	cmp	r3, #18
 80072f8:	d105      	bne.n	8007306 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
 80072fc:	4619      	mov	r1, r3
 80072fe:	482e      	ldr	r0, [pc, #184]	; (80073b8 <ICM20602_Initialization+0xf4>)
 8007300:	f005 fcac 	bl	800cc5c <iprintf>
 8007304:	e012      	b.n	800732c <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	2b12      	cmp	r3, #18
 800730a:	d00f      	beq.n	800732c <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 800730c:	2075      	movs	r0, #117	; 0x75
 800730e:	f7ff ff69 	bl	80071e4 <ICM20602_Readbyte>
 8007312:	4603      	mov	r3, r0
 8007314:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	2b12      	cmp	r3, #18
 800731a:	d007      	beq.n	800732c <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 800731c:	7bfb      	ldrb	r3, [r7, #15]
 800731e:	2212      	movs	r2, #18
 8007320:	4619      	mov	r1, r3
 8007322:	4826      	ldr	r0, [pc, #152]	; (80073bc <ICM20602_Initialization+0xf8>)
 8007324:	f005 fc9a 	bl	800cc5c <iprintf>
			return 1; //ERROR
 8007328:	2301      	movs	r3, #1
 800732a:	e03f      	b.n	80073ac <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 800732c:	2180      	movs	r1, #128	; 0x80
 800732e:	206b      	movs	r0, #107	; 0x6b
 8007330:	f7ff ffa6 	bl	8007280 <ICM20602_Writebyte>
	HAL_Delay(50);
 8007334:	2032      	movs	r0, #50	; 0x32
 8007336:	f7f9 fe79 	bl	800102c <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 800733a:	2101      	movs	r1, #1
 800733c:	206b      	movs	r0, #107	; 0x6b
 800733e:	f7ff ff9f 	bl	8007280 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 8007342:	2032      	movs	r0, #50	; 0x32
 8007344:	f7f9 fe72 	bl	800102c <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 8007348:	2138      	movs	r1, #56	; 0x38
 800734a:	206c      	movs	r0, #108	; 0x6c
 800734c:	f7ff ff98 	bl	8007280 <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 8007350:	2032      	movs	r0, #50	; 0x32
 8007352:	f7f9 fe6b 	bl	800102c <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8007356:	2100      	movs	r1, #0
 8007358:	2019      	movs	r0, #25
 800735a:	f7ff ff91 	bl	8007280 <ICM20602_Writebyte>
	HAL_Delay(50);
 800735e:	2032      	movs	r0, #50	; 0x32
 8007360:	f7f9 fe64 	bl	800102c <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8007364:	2105      	movs	r1, #5
 8007366:	201a      	movs	r0, #26
 8007368:	f7ff ff8a 	bl	8007280 <ICM20602_Writebyte>
	HAL_Delay(50);
 800736c:	2032      	movs	r0, #50	; 0x32
 800736e:	f7f9 fe5d 	bl	800102c <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8007372:	2118      	movs	r1, #24
 8007374:	201b      	movs	r0, #27
 8007376:	f7ff ff83 	bl	8007280 <ICM20602_Writebyte>
	HAL_Delay(50);
 800737a:	2032      	movs	r0, #50	; 0x32
 800737c:	f7f9 fe56 	bl	800102c <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8007380:	2118      	movs	r1, #24
 8007382:	201c      	movs	r0, #28
 8007384:	f7ff ff7c 	bl	8007280 <ICM20602_Writebyte>
	HAL_Delay(50);
 8007388:	2032      	movs	r0, #50	; 0x32
 800738a:	f7f9 fe4f 	bl	800102c <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 800738e:	2103      	movs	r1, #3
 8007390:	201d      	movs	r0, #29
 8007392:	f7ff ff75 	bl	8007280 <ICM20602_Writebyte>
	HAL_Delay(50);
 8007396:	2032      	movs	r0, #50	; 0x32
 8007398:	f7f9 fe48 	bl	800102c <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 800739c:	2101      	movs	r1, #1
 800739e:	2038      	movs	r0, #56	; 0x38
 80073a0:	f7ff ff6e 	bl	8007280 <ICM20602_Writebyte>
	HAL_Delay(50);
 80073a4:	2032      	movs	r0, #50	; 0x32
 80073a6:	f7f9 fe41 	bl	800102c <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	0800fb2c 	.word	0x0800fb2c
 80073b8:	0800fb44 	.word	0x0800fb44
 80073bc:	0800fb68 	.word	0x0800fb68

080073c0 <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 80073c8:	f107 0308 	add.w	r3, r7, #8
 80073cc:	461a      	mov	r2, r3
 80073ce:	2106      	movs	r1, #6
 80073d0:	2043      	movs	r0, #67	; 0x43
 80073d2:	f7ff ff27 	bl	8007224 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 80073d6:	7a3b      	ldrb	r3, [r7, #8]
 80073d8:	021b      	lsls	r3, r3, #8
 80073da:	b21a      	sxth	r2, r3
 80073dc:	7a7b      	ldrb	r3, [r7, #9]
 80073de:	b21b      	sxth	r3, r3
 80073e0:	4313      	orrs	r3, r2
 80073e2:	b21a      	sxth	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 80073e8:	7abb      	ldrb	r3, [r7, #10]
 80073ea:	021b      	lsls	r3, r3, #8
 80073ec:	b219      	sxth	r1, r3
 80073ee:	7afb      	ldrb	r3, [r7, #11]
 80073f0:	b21a      	sxth	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3302      	adds	r3, #2
 80073f6:	430a      	orrs	r2, r1
 80073f8:	b212      	sxth	r2, r2
 80073fa:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 80073fc:	7b3b      	ldrb	r3, [r7, #12]
 80073fe:	021b      	lsls	r3, r3, #8
 8007400:	b219      	sxth	r1, r3
 8007402:	7b7b      	ldrb	r3, [r7, #13]
 8007404:	b21a      	sxth	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3304      	adds	r3, #4
 800740a:	430a      	orrs	r2, r1
 800740c:	b212      	sxth	r2, r2
 800740e:	801a      	strh	r2, [r3, #0]
}
 8007410:	bf00      	nop
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 800741c:	2120      	movs	r1, #32
 800741e:	4803      	ldr	r0, [pc, #12]	; (800742c <ICM20602_DataReady+0x14>)
 8007420:	f7ff fddf 	bl	8006fe2 <LL_GPIO_IsInputPinSet>
 8007424:	4603      	mov	r3, r0
}
 8007426:	4618      	mov	r0, r3
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	40020800 	.word	0x40020800

08007430 <LL_SPI_Enable>:
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	601a      	str	r2, [r3, #0]
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <LL_SPI_SetStandard>:
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f023 0210 	bic.w	r2, r3, #16
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	605a      	str	r2, [r3, #4]
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <LL_SPI_IsActiveFlag_RXNE>:
{
 8007476:	b480      	push	{r7}
 8007478:	b083      	sub	sp, #12
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <LL_SPI_IsActiveFlag_RXNE+0x18>
 800748a:	2301      	movs	r3, #1
 800748c:	e000      	b.n	8007490 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <LL_SPI_IsActiveFlag_TXE>:
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d101      	bne.n	80074b4 <LL_SPI_IsActiveFlag_TXE+0x18>
 80074b0:	2301      	movs	r3, #1
 80074b2:	e000      	b.n	80074b6 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <LL_SPI_ReceiveData8>:
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_REG(SPIx->DR));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	b2db      	uxtb	r3, r3
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <LL_SPI_TransmitData8>:
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	330c      	adds	r3, #12
 80074ec:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	78fa      	ldrb	r2, [r7, #3]
 80074f2:	701a      	strb	r2, [r3, #0]
}
 80074f4:	bf00      	nop
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <LL_GPIO_IsInputPinSet>:
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691a      	ldr	r2, [r3, #16]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	4013      	ands	r3, r2
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	429a      	cmp	r2, r3
 8007516:	bf0c      	ite	eq
 8007518:	2301      	moveq	r3, #1
 800751a:	2300      	movne	r3, #0
 800751c:	b2db      	uxtb	r3, r3
}
 800751e:	4618      	mov	r0, r3
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <LL_GPIO_SetOutputPin>:
{
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	619a      	str	r2, [r3, #24]
}
 800753a:	bf00      	nop
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <LL_GPIO_ResetOutputPin>:
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	041a      	lsls	r2, r3, #16
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	619a      	str	r2, [r3, #24]
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <LL_AHB1_GRP1_EnableClock>:
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800756c:	4b08      	ldr	r3, [pc, #32]	; (8007590 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800756e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007570:	4907      	ldr	r1, [pc, #28]	; (8007590 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4313      	orrs	r3, r2
 8007576:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007578:	4b05      	ldr	r3, [pc, #20]	; (8007590 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800757a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4013      	ands	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007582:	68fb      	ldr	r3, [r7, #12]
}
 8007584:	bf00      	nop
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	40023800 	.word	0x40023800

08007594 <LL_APB1_GRP1_EnableClock>:
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800759c:	4b08      	ldr	r3, [pc, #32]	; (80075c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800759e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075a0:	4907      	ldr	r1, [pc, #28]	; (80075c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80075a8:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80075aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4013      	ands	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80075b2:	68fb      	ldr	r3, [r7, #12]
}
 80075b4:	bf00      	nop
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	40023800 	.word	0x40023800

080075c4 <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b090      	sub	sp, #64	; 0x40
 80075c8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80075ca:	f107 0318 	add.w	r3, r7, #24
 80075ce:	2228      	movs	r2, #40	; 0x28
 80075d0:	2100      	movs	r1, #0
 80075d2:	4618      	mov	r0, r3
 80075d4:	f004 fede 	bl	800c394 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075d8:	463b      	mov	r3, r7
 80075da:	2200      	movs	r2, #0
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	605a      	str	r2, [r3, #4]
 80075e0:	609a      	str	r2, [r3, #8]
 80075e2:	60da      	str	r2, [r3, #12]
 80075e4:	611a      	str	r2, [r3, #16]
 80075e6:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80075e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80075ec:	f7ff ffd2 	bl	8007594 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80075f0:	2002      	movs	r0, #2
 80075f2:	f7ff ffb7 	bl	8007564 <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80075f6:	2338      	movs	r3, #56	; 0x38
 80075f8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80075fa:	2302      	movs	r3, #2
 80075fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80075fe:	2303      	movs	r3, #3
 8007600:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007606:	2300      	movs	r3, #0
 8007608:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800760a:	2306      	movs	r3, #6
 800760c:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800760e:	463b      	mov	r3, r7
 8007610:	4619      	mov	r1, r3
 8007612:	4826      	ldr	r0, [pc, #152]	; (80076ac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8007614:	f7fd fc04 	bl	8004e20 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8007618:	2300      	movs	r3, #0
 800761a:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800761c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007620:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8007622:	2300      	movs	r3, #0
 8007624:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8007626:	2302      	movs	r3, #2
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800762a:	2301      	movs	r3, #1
 800762c:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800762e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007632:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8007634:	2308      	movs	r3, #8
 8007636:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8007638:	2300      	movs	r3, #0
 800763a:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800763c:	2300      	movs	r3, #0
 800763e:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8007640:	230a      	movs	r3, #10
 8007642:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 8007644:	f107 0318 	add.w	r3, r7, #24
 8007648:	4619      	mov	r1, r3
 800764a:	4819      	ldr	r0, [pc, #100]	; (80076b0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 800764c:	f7fd fdb7 	bl	80051be <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8007650:	2100      	movs	r1, #0
 8007652:	4817      	ldr	r0, [pc, #92]	; (80076b0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8007654:	f7ff fefc 	bl	8007450 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 8007658:	2140      	movs	r1, #64	; 0x40
 800765a:	4814      	ldr	r0, [pc, #80]	; (80076ac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800765c:	f7ff ff73 	bl	8007546 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 8007660:	2340      	movs	r3, #64	; 0x40
 8007662:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007664:	2301      	movs	r3, #1
 8007666:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007668:	2303      	movs	r3, #3
 800766a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800766c:	2300      	movs	r3, #0
 800766e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007670:	2300      	movs	r3, #0
 8007672:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 8007674:	463b      	mov	r3, r7
 8007676:	4619      	mov	r1, r3
 8007678:	480c      	ldr	r0, [pc, #48]	; (80076ac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800767a:	f7fd fbd1 	bl	8004e20 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 800767e:	2380      	movs	r3, #128	; 0x80
 8007680:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8007682:	2300      	movs	r3, #0
 8007684:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007686:	2301      	movs	r3, #1
 8007688:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 800768a:	463b      	mov	r3, r7
 800768c:	4619      	mov	r1, r3
 800768e:	4807      	ldr	r0, [pc, #28]	; (80076ac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8007690:	f7fd fbc6 	bl	8004e20 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 8007694:	4806      	ldr	r0, [pc, #24]	; (80076b0 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 8007696:	f7ff fecb 	bl	8007430 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 800769a:	2140      	movs	r1, #64	; 0x40
 800769c:	4803      	ldr	r0, [pc, #12]	; (80076ac <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800769e:	f7ff ff44 	bl	800752a <LL_GPIO_SetOutputPin>
}
 80076a2:	bf00      	nop
 80076a4:	3740      	adds	r7, #64	; 0x40
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	40020400 	.word	0x40020400
 80076b0:	40003c00 	.word	0x40003c00

080076b4 <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 80076be:	bf00      	nop
 80076c0:	480c      	ldr	r0, [pc, #48]	; (80076f4 <SPI3_SendByte+0x40>)
 80076c2:	f7ff feeb 	bl	800749c <LL_SPI_IsActiveFlag_TXE>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d0f9      	beq.n	80076c0 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 80076cc:	79fb      	ldrb	r3, [r7, #7]
 80076ce:	4619      	mov	r1, r3
 80076d0:	4808      	ldr	r0, [pc, #32]	; (80076f4 <SPI3_SendByte+0x40>)
 80076d2:	f7ff ff03 	bl	80074dc <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 80076d6:	bf00      	nop
 80076d8:	4806      	ldr	r0, [pc, #24]	; (80076f4 <SPI3_SendByte+0x40>)
 80076da:	f7ff fecc 	bl	8007476 <LL_SPI_IsActiveFlag_RXNE>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d0f9      	beq.n	80076d8 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 80076e4:	4803      	ldr	r0, [pc, #12]	; (80076f4 <SPI3_SendByte+0x40>)
 80076e6:	f7ff feec 	bl	80074c2 <LL_SPI_ReceiveData8>
 80076ea:	4603      	mov	r3, r0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	40003c00 	.word	0x40003c00

080076f8 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	4603      	mov	r3, r0
 8007700:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 8007702:	2140      	movs	r1, #64	; 0x40
 8007704:	480b      	ldr	r0, [pc, #44]	; (8007734 <LPS22HH_Readbyte+0x3c>)
 8007706:	f7ff ff1e 	bl	8007546 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800770a:	79fb      	ldrb	r3, [r7, #7]
 800770c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007710:	b2db      	uxtb	r3, r3
 8007712:	4618      	mov	r0, r3
 8007714:	f7ff ffce 	bl	80076b4 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8007718:	2000      	movs	r0, #0
 800771a:	f7ff ffcb 	bl	80076b4 <SPI3_SendByte>
 800771e:	4603      	mov	r3, r0
 8007720:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 8007722:	2140      	movs	r1, #64	; 0x40
 8007724:	4803      	ldr	r0, [pc, #12]	; (8007734 <LPS22HH_Readbyte+0x3c>)
 8007726:	f7ff ff00 	bl	800752a <LL_GPIO_SetOutputPin>
	
	return val;
 800772a:	7bfb      	ldrb	r3, [r7, #15]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	40020400 	.word	0x40020400

08007738 <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8007738:	b590      	push	{r4, r7, lr}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	4603      	mov	r3, r0
 8007740:	603a      	str	r2, [r7, #0]
 8007742:	71fb      	strb	r3, [r7, #7]
 8007744:	460b      	mov	r3, r1
 8007746:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8007748:	2300      	movs	r3, #0
 800774a:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 800774c:	2140      	movs	r1, #64	; 0x40
 800774e:	4810      	ldr	r0, [pc, #64]	; (8007790 <LPS22HH_Readbytes+0x58>)
 8007750:	f7ff fef9 	bl	8007546 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8007754:	79fb      	ldrb	r3, [r7, #7]
 8007756:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800775a:	b2db      	uxtb	r3, r3
 800775c:	4618      	mov	r0, r3
 800775e:	f7ff ffa9 	bl	80076b4 <SPI3_SendByte>
	while(i < len)
 8007762:	e009      	b.n	8007778 <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	1c5a      	adds	r2, r3, #1
 8007768:	60fa      	str	r2, [r7, #12]
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	18d4      	adds	r4, r2, r3
 800776e:	2000      	movs	r0, #0
 8007770:	f7ff ffa0 	bl	80076b4 <SPI3_SendByte>
 8007774:	4603      	mov	r3, r0
 8007776:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8007778:	79bb      	ldrb	r3, [r7, #6]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	429a      	cmp	r2, r3
 800777e:	d3f1      	bcc.n	8007764 <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 8007780:	2140      	movs	r1, #64	; 0x40
 8007782:	4803      	ldr	r0, [pc, #12]	; (8007790 <LPS22HH_Readbytes+0x58>)
 8007784:	f7ff fed1 	bl	800752a <LL_GPIO_SetOutputPin>
}
 8007788:	bf00      	nop
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	bd90      	pop	{r4, r7, pc}
 8007790:	40020400 	.word	0x40020400

08007794 <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	460a      	mov	r2, r1
 800779e:	71fb      	strb	r3, [r7, #7]
 80077a0:	4613      	mov	r3, r2
 80077a2:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 80077a4:	2140      	movs	r1, #64	; 0x40
 80077a6:	480b      	ldr	r0, [pc, #44]	; (80077d4 <LPS22HH_Writebyte+0x40>)
 80077a8:	f7ff fecd 	bl	8007546 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80077ac:	79fb      	ldrb	r3, [r7, #7]
 80077ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7ff ff7d 	bl	80076b4 <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 80077ba:	79bb      	ldrb	r3, [r7, #6]
 80077bc:	4618      	mov	r0, r3
 80077be:	f7ff ff79 	bl	80076b4 <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 80077c2:	2140      	movs	r1, #64	; 0x40
 80077c4:	4803      	ldr	r0, [pc, #12]	; (80077d4 <LPS22HH_Writebyte+0x40>)
 80077c6:	f7ff feb0 	bl	800752a <LL_GPIO_SetOutputPin>
}
 80077ca:	bf00      	nop
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	40020400 	.word	0x40020400

080077d8 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 80077e2:	f7ff feef 	bl	80075c4 <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 80077e6:	4841      	ldr	r0, [pc, #260]	; (80078ec <LPS22HH_Initialization+0x114>)
 80077e8:	f005 fa38 	bl	800cc5c <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 80077ec:	200f      	movs	r0, #15
 80077ee:	f7ff ff83 	bl	80076f8 <LPS22HH_Readbyte>
 80077f2:	4603      	mov	r3, r0
 80077f4:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 80077f6:	79fb      	ldrb	r3, [r7, #7]
 80077f8:	2bb3      	cmp	r3, #179	; 0xb3
 80077fa:	d105      	bne.n	8007808 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 80077fc:	79fb      	ldrb	r3, [r7, #7]
 80077fe:	4619      	mov	r1, r3
 8007800:	483b      	ldr	r0, [pc, #236]	; (80078f0 <LPS22HH_Initialization+0x118>)
 8007802:	f005 fa2b 	bl	800cc5c <iprintf>
 8007806:	e012      	b.n	800782e <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	2bb3      	cmp	r3, #179	; 0xb3
 800780c:	d00f      	beq.n	800782e <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 800780e:	200f      	movs	r0, #15
 8007810:	f7ff ff72 	bl	80076f8 <LPS22HH_Readbyte>
 8007814:	4603      	mov	r3, r0
 8007816:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8007818:	79fb      	ldrb	r3, [r7, #7]
 800781a:	2bb3      	cmp	r3, #179	; 0xb3
 800781c:	d007      	beq.n	800782e <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 800781e:	79fb      	ldrb	r3, [r7, #7]
 8007820:	22b3      	movs	r2, #179	; 0xb3
 8007822:	4619      	mov	r1, r3
 8007824:	4833      	ldr	r0, [pc, #204]	; (80078f4 <LPS22HH_Initialization+0x11c>)
 8007826:	f005 fa19 	bl	800cc5c <iprintf>
			return 1; //ERROR
 800782a:	2301      	movs	r3, #1
 800782c:	e059      	b.n	80078e2 <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 800782e:	2104      	movs	r1, #4
 8007830:	2011      	movs	r0, #17
 8007832:	f7ff ffaf 	bl	8007794 <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8007836:	2011      	movs	r0, #17
 8007838:	f7ff ff5e 	bl	80076f8 <LPS22HH_Readbyte>
 800783c:	4603      	mov	r3, r0
 800783e:	f003 0304 	and.w	r3, r3, #4
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1f7      	bne.n	8007836 <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8007846:	2010      	movs	r0, #16
 8007848:	f7ff ff56 	bl	80076f8 <LPS22HH_Readbyte>
 800784c:	4603      	mov	r3, r0
 800784e:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8007850:	79bb      	ldrb	r3, [r7, #6]
 8007852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007856:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8007858:	79bb      	ldrb	r3, [r7, #6]
 800785a:	4619      	mov	r1, r3
 800785c:	2010      	movs	r0, #16
 800785e:	f7ff ff99 	bl	8007794 <LPS22HH_Writebyte>
	temp_reg = 0;
 8007862:	2300      	movs	r3, #0
 8007864:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8007866:	2010      	movs	r0, #16
 8007868:	f7ff ff46 	bl	80076f8 <LPS22HH_Readbyte>
 800786c:	4603      	mov	r3, r0
 800786e:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8007870:	2010      	movs	r0, #16
 8007872:	f7ff ff41 	bl	80076f8 <LPS22HH_Readbyte>
 8007876:	4603      	mov	r3, r0
 8007878:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 800787a:	79bb      	ldrb	r3, [r7, #6]
 800787c:	f043 030c 	orr.w	r3, r3, #12
 8007880:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8007882:	79bb      	ldrb	r3, [r7, #6]
 8007884:	4619      	mov	r1, r3
 8007886:	2010      	movs	r0, #16
 8007888:	f7ff ff84 	bl	8007794 <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 800788c:	2010      	movs	r0, #16
 800788e:	f7ff ff33 	bl	80076f8 <LPS22HH_Readbyte>
 8007892:	4603      	mov	r3, r0
 8007894:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8007896:	79bb      	ldrb	r3, [r7, #6]
 8007898:	f043 0302 	orr.w	r3, r3, #2
 800789c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 800789e:	79bb      	ldrb	r3, [r7, #6]
 80078a0:	4619      	mov	r1, r3
 80078a2:	2010      	movs	r0, #16
 80078a4:	f7ff ff76 	bl	8007794 <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 80078a8:	2011      	movs	r0, #17
 80078aa:	f7ff ff25 	bl	80076f8 <LPS22HH_Readbyte>
 80078ae:	4603      	mov	r3, r0
 80078b0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 80078b2:	79bb      	ldrb	r3, [r7, #6]
 80078b4:	f043 0302 	orr.w	r3, r3, #2
 80078b8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 80078ba:	79bb      	ldrb	r3, [r7, #6]
 80078bc:	4619      	mov	r1, r3
 80078be:	2011      	movs	r0, #17
 80078c0:	f7ff ff68 	bl	8007794 <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 80078c4:	2012      	movs	r0, #18
 80078c6:	f7ff ff17 	bl	80076f8 <LPS22HH_Readbyte>
 80078ca:	4603      	mov	r3, r0
 80078cc:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 80078ce:	79bb      	ldrb	r3, [r7, #6]
 80078d0:	f043 0304 	orr.w	r3, r3, #4
 80078d4:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 80078d6:	79bb      	ldrb	r3, [r7, #6]
 80078d8:	4619      	mov	r1, r3
 80078da:	2012      	movs	r0, #18
 80078dc:	f7ff ff5a 	bl	8007794 <LPS22HH_Writebyte>
	
	return 0; //OK
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	0800fb94 	.word	0x0800fb94
 80078f0:	0800fba8 	.word	0x0800fba8
 80078f4:	0800fbcc 	.word	0x0800fbcc

080078f8 <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 80078fc:	2180      	movs	r1, #128	; 0x80
 80078fe:	4803      	ldr	r0, [pc, #12]	; (800790c <LPS22HH_DataReady+0x14>)
 8007900:	f7ff fdfe 	bl	8007500 <LL_GPIO_IsInputPinSet>
 8007904:	4603      	mov	r3, r0
}
 8007906:	4618      	mov	r0, r3
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	40020400 	.word	0x40020400

08007910 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	2103      	movs	r1, #3
 800791c:	2028      	movs	r0, #40	; 0x28
 800791e:	f7ff ff0b 	bl	8007738 <LPS22HH_Readbytes>
}
 8007922:	bf00      	nop
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b082      	sub	sp, #8
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	2102      	movs	r1, #2
 8007936:	202b      	movs	r0, #43	; 0x2b
 8007938:	f7ff fefe 	bl	8007738 <LPS22HH_Readbytes>
}
 800793c:	bf00      	nop
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <getAltitude2>:
{
	return (powf((SEA_PRESSURE / pressure), 0.1902226f) - 1.0) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	ed87 0a01 	vstr	s0, [r7, #4]
 800794e:	edc7 0a00 	vstr	s1, [r7]
	return ((powf((SEA_PRESSURE / pressure), 0.1902226f) - 1.0f) * (temperature + 273.15f)) / 0.0065f;
 8007952:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800799c <getAltitude2+0x58>
 8007956:	edd7 7a01 	vldr	s15, [r7, #4]
 800795a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800795e:	eddf 0a10 	vldr	s1, [pc, #64]	; 80079a0 <getAltitude2+0x5c>
 8007962:	eeb0 0a66 	vmov.f32	s0, s13
 8007966:	f007 f903 	bl	800eb70 <powf>
 800796a:	eeb0 7a40 	vmov.f32	s14, s0
 800796e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007972:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007976:	edd7 7a00 	vldr	s15, [r7]
 800797a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80079a4 <getAltitude2+0x60>
 800797e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007986:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80079a8 <getAltitude2+0x64>
 800798a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800798e:	eef0 7a66 	vmov.f32	s15, s13
}
 8007992:	eeb0 0a67 	vmov.f32	s0, s15
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	447d5000 	.word	0x447d5000
 80079a0:	3e42c9b7 	.word	0x3e42c9b7
 80079a4:	43889333 	.word	0x43889333
 80079a8:	3bd4fdf4 	.word	0x3bd4fdf4

080079ac <__NVIC_GetPriorityGrouping>:
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079b0:	4b04      	ldr	r3, [pc, #16]	; (80079c4 <__NVIC_GetPriorityGrouping+0x18>)
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	0a1b      	lsrs	r3, r3, #8
 80079b6:	f003 0307 	and.w	r3, r3, #7
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	e000ed00 	.word	0xe000ed00

080079c8 <__NVIC_EnableIRQ>:
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	db0b      	blt.n	80079f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	f003 021f 	and.w	r2, r3, #31
 80079e0:	4907      	ldr	r1, [pc, #28]	; (8007a00 <__NVIC_EnableIRQ+0x38>)
 80079e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079e6:	095b      	lsrs	r3, r3, #5
 80079e8:	2001      	movs	r0, #1
 80079ea:	fa00 f202 	lsl.w	r2, r0, r2
 80079ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80079f2:	bf00      	nop
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	e000e100 	.word	0xe000e100

08007a04 <__NVIC_SetPriority>:
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	6039      	str	r1, [r7, #0]
 8007a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	db0a      	blt.n	8007a2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	490c      	ldr	r1, [pc, #48]	; (8007a50 <__NVIC_SetPriority+0x4c>)
 8007a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a22:	0112      	lsls	r2, r2, #4
 8007a24:	b2d2      	uxtb	r2, r2
 8007a26:	440b      	add	r3, r1
 8007a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007a2c:	e00a      	b.n	8007a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	4908      	ldr	r1, [pc, #32]	; (8007a54 <__NVIC_SetPriority+0x50>)
 8007a34:	79fb      	ldrb	r3, [r7, #7]
 8007a36:	f003 030f 	and.w	r3, r3, #15
 8007a3a:	3b04      	subs	r3, #4
 8007a3c:	0112      	lsls	r2, r2, #4
 8007a3e:	b2d2      	uxtb	r2, r2
 8007a40:	440b      	add	r3, r1
 8007a42:	761a      	strb	r2, [r3, #24]
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	e000e100 	.word	0xe000e100
 8007a54:	e000ed00 	.word	0xe000ed00

08007a58 <NVIC_EncodePriority>:
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b089      	sub	sp, #36	; 0x24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	f1c3 0307 	rsb	r3, r3, #7
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	bf28      	it	cs
 8007a76:	2304      	movcs	r3, #4
 8007a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	2b06      	cmp	r3, #6
 8007a80:	d902      	bls.n	8007a88 <NVIC_EncodePriority+0x30>
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	3b03      	subs	r3, #3
 8007a86:	e000      	b.n	8007a8a <NVIC_EncodePriority+0x32>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	fa02 f303 	lsl.w	r3, r2, r3
 8007a96:	43da      	mvns	r2, r3
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	401a      	ands	r2, r3
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aaa:	43d9      	mvns	r1, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ab0:	4313      	orrs	r3, r2
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3724      	adds	r7, #36	; 0x24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <LL_USART_Enable>:
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	60da      	str	r2, [r3, #12]
}
 8007ad2:	bf00      	nop
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	615a      	str	r2, [r3, #20]
}
 8007afe:	bf00      	nop
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1a:	2b80      	cmp	r3, #128	; 0x80
 8007b1c:	bf0c      	ite	eq
 8007b1e:	2301      	moveq	r3, #1
 8007b20:	2300      	movne	r3, #0
 8007b22:	b2db      	uxtb	r3, r3
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8007b3c:	78fa      	ldrb	r2, [r7, #3]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	605a      	str	r2, [r3, #4]
}
 8007b42:	bf00      	nop
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
	...

08007b50 <LL_AHB1_GRP1_EnableClock>:
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8007b58:	4b08      	ldr	r3, [pc, #32]	; (8007b7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b5c:	4907      	ldr	r1, [pc, #28]	; (8007b7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8007b64:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8007b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
}
 8007b70:	bf00      	nop
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	40023800 	.word	0x40023800

08007b80 <LL_APB1_GRP1_EnableClock>:
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8007b88:	4b08      	ldr	r3, [pc, #32]	; (8007bac <LL_APB1_GRP1_EnableClock+0x2c>)
 8007b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b8c:	4907      	ldr	r1, [pc, #28]	; (8007bac <LL_APB1_GRP1_EnableClock+0x2c>)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8007b94:	4b05      	ldr	r3, [pc, #20]	; (8007bac <LL_APB1_GRP1_EnableClock+0x2c>)
 8007b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
}
 8007ba0:	bf00      	nop
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	40023800 	.word	0x40023800

08007bb0 <M8N_TransmitData>:
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
	0xBF
};

void M8N_TransmitData(unsigned char* data, unsigned char len)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	70fb      	strb	r3, [r7, #3]
	for(int i=0;i<len;i++)
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	e011      	b.n	8007be6 <M8N_TransmitData+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 8007bc2:	bf00      	nop
 8007bc4:	480c      	ldr	r0, [pc, #48]	; (8007bf8 <M8N_TransmitData+0x48>)
 8007bc6:	f7ff ffa0 	bl	8007b0a <LL_USART_IsActiveFlag_TXE>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d0f9      	beq.n	8007bc4 <M8N_TransmitData+0x14>
		LL_USART_TransmitData8(UART4, *(data+i));
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	4619      	mov	r1, r3
 8007bda:	4807      	ldr	r0, [pc, #28]	; (8007bf8 <M8N_TransmitData+0x48>)
 8007bdc:	f7ff ffa8 	bl	8007b30 <LL_USART_TransmitData8>
	for(int i=0;i<len;i++)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3301      	adds	r3, #1
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	78fb      	ldrb	r3, [r7, #3]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	dbe9      	blt.n	8007bc2 <M8N_TransmitData+0x12>
	}
}
 8007bee:	bf00      	nop
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40004c00 	.word	0x40004c00

08007bfc <M8N_UART4_Initialization>:

void M8N_UART4_Initialization(void)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08e      	sub	sp, #56	; 0x38
 8007c00:	af00      	add	r7, sp, #0
	LL_USART_InitTypeDef USART_InitStruct = {0};
 8007c02:	f107 031c 	add.w	r3, r7, #28
 8007c06:	2200      	movs	r2, #0
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	605a      	str	r2, [r3, #4]
 8007c0c:	609a      	str	r2, [r3, #8]
 8007c0e:	60da      	str	r2, [r3, #12]
 8007c10:	611a      	str	r2, [r3, #16]
 8007c12:	615a      	str	r2, [r3, #20]
 8007c14:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c16:	1d3b      	adds	r3, r7, #4
 8007c18:	2200      	movs	r2, #0
 8007c1a:	601a      	str	r2, [r3, #0]
 8007c1c:	605a      	str	r2, [r3, #4]
 8007c1e:	609a      	str	r2, [r3, #8]
 8007c20:	60da      	str	r2, [r3, #12]
 8007c22:	611a      	str	r2, [r3, #16]
 8007c24:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8007c26:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007c2a:	f7ff ffa9 	bl	8007b80 <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8007c2e:	2004      	movs	r0, #4
 8007c30:	f7ff ff8e 	bl	8007b50 <LL_AHB1_GRP1_EnableClock>
	/**UART4 GPIO Configuration
	PC10   ------> UART4_TX
	PC11   ------> UART4_RX
	*/
	GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8007c34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007c38:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8007c46:	2301      	movs	r3, #1
 8007c48:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8007c4a:	2308      	movs	r3, #8
 8007c4c:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c4e:	1d3b      	adds	r3, r7, #4
 8007c50:	4619      	mov	r1, r3
 8007c52:	4819      	ldr	r0, [pc, #100]	; (8007cb8 <M8N_UART4_Initialization+0xbc>)
 8007c54:	f7fd f8e4 	bl	8004e20 <LL_GPIO_Init>

	/* UART4 interrupt Init */
	NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007c58:	f7ff fea8 	bl	80079ac <__NVIC_GetPriorityGrouping>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2200      	movs	r2, #0
 8007c60:	2100      	movs	r1, #0
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff fef8 	bl	8007a58 <NVIC_EncodePriority>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	2034      	movs	r0, #52	; 0x34
 8007c6e:	f7ff fec9 	bl	8007a04 <__NVIC_SetPriority>
	NVIC_EnableIRQ(UART4_IRQn);
 8007c72:	2034      	movs	r0, #52	; 0x34
 8007c74:	f7ff fea8 	bl	80079c8 <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 9600;
 8007c78:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8007c7c:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007c82:	2300      	movs	r3, #0
 8007c84:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007c86:	2300      	movs	r3, #0
 8007c88:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007c92:	2300      	movs	r3, #0
 8007c94:	637b      	str	r3, [r7, #52]	; 0x34
	LL_USART_Init(UART4, &USART_InitStruct);
 8007c96:	f107 031c 	add.w	r3, r7, #28
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	4807      	ldr	r0, [pc, #28]	; (8007cbc <M8N_UART4_Initialization+0xc0>)
 8007c9e:	f7fd ffab 	bl	8005bf8 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(UART4);
 8007ca2:	4806      	ldr	r0, [pc, #24]	; (8007cbc <M8N_UART4_Initialization+0xc0>)
 8007ca4:	f7ff ff1b 	bl	8007ade <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(UART4);
 8007ca8:	4804      	ldr	r0, [pc, #16]	; (8007cbc <M8N_UART4_Initialization+0xc0>)
 8007caa:	f7ff ff08 	bl	8007abe <LL_USART_Enable>
}
 8007cae:	bf00      	nop
 8007cb0:	3738      	adds	r7, #56	; 0x38
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	40020800 	.word	0x40020800
 8007cbc:	40004c00 	.word	0x40004c00

08007cc0 <M8N_Initialization>:

void M8N_Initialization(void)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	af00      	add	r7, sp, #0
	M8N_UART4_Initialization();
 8007cc4:	f7ff ff9a 	bl	8007bfc <M8N_UART4_Initialization>

	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8007cc8:	211c      	movs	r1, #28
 8007cca:	480d      	ldr	r0, [pc, #52]	; (8007d00 <M8N_Initialization+0x40>)
 8007ccc:	f7ff ff70 	bl	8007bb0 <M8N_TransmitData>
	HAL_Delay(100);
 8007cd0:	2064      	movs	r0, #100	; 0x64
 8007cd2:	f7f9 f9ab 	bl	800102c <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8007cd6:	2110      	movs	r1, #16
 8007cd8:	480a      	ldr	r0, [pc, #40]	; (8007d04 <M8N_Initialization+0x44>)
 8007cda:	f7ff ff69 	bl	8007bb0 <M8N_TransmitData>
	HAL_Delay(100);
 8007cde:	2064      	movs	r0, #100	; 0x64
 8007ce0:	f7f9 f9a4 	bl	800102c <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8007ce4:	210e      	movs	r1, #14
 8007ce6:	4808      	ldr	r0, [pc, #32]	; (8007d08 <M8N_Initialization+0x48>)
 8007ce8:	f7ff ff62 	bl	8007bb0 <M8N_TransmitData>
	HAL_Delay(100);
 8007cec:	2064      	movs	r0, #100	; 0x64
 8007cee:	f7f9 f99d 	bl	800102c <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 8007cf2:	2115      	movs	r1, #21
 8007cf4:	4805      	ldr	r0, [pc, #20]	; (8007d0c <M8N_Initialization+0x4c>)
 8007cf6:	f7ff ff5b 	bl	8007bb0 <M8N_TransmitData>
}
 8007cfa:	bf00      	nop
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	0800fe30 	.word	0x0800fe30
 8007d04:	0800fe4c 	.word	0x0800fe4c
 8007d08:	0800fe5c 	.word	0x0800fe5c
 8007d0c:	0800fe6c 	.word	0x0800fe6c

08007d10 <M8N_UBX_CHKSUM_Check>:

unsigned char M8N_UBX_CHKSUM_Check(unsigned char* data, unsigned char len)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	70fb      	strb	r3, [r7, #3]
	unsigned char CK_A = 0, CK_B = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73fb      	strb	r3, [r7, #15]
 8007d20:	2300      	movs	r3, #0
 8007d22:	73bb      	strb	r3, [r7, #14]

	for(int i=2;i<len-2;i++)
 8007d24:	2302      	movs	r3, #2
 8007d26:	60bb      	str	r3, [r7, #8]
 8007d28:	e00d      	b.n	8007d46 <M8N_UBX_CHKSUM_Check+0x36>
	{
		CK_A = CK_A + data[i];
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	4413      	add	r3, r2
 8007d30:	781a      	ldrb	r2, [r3, #0]
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
 8007d34:	4413      	add	r3, r2
 8007d36:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8007d38:	7bba      	ldrb	r2, [r7, #14]
 8007d3a:	7bfb      	ldrb	r3, [r7, #15]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	73bb      	strb	r3, [r7, #14]
	for(int i=2;i<len-2;i++)
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	3301      	adds	r3, #1
 8007d44:	60bb      	str	r3, [r7, #8]
 8007d46:	78fb      	ldrb	r3, [r7, #3]
 8007d48:	3b02      	subs	r3, #2
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	dbec      	blt.n	8007d2a <M8N_UBX_CHKSUM_Check+0x1a>
	}

	return ((CK_A == data[len-2]) && (CK_B == data[len-1]));
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	3b02      	subs	r3, #2
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	4413      	add	r3, r2
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	7bfa      	ldrb	r2, [r7, #15]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d109      	bne.n	8007d74 <M8N_UBX_CHKSUM_Check+0x64>
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	4413      	add	r3, r2
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	7bba      	ldrb	r2, [r7, #14]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d101      	bne.n	8007d74 <M8N_UBX_CHKSUM_Check+0x64>
 8007d70:	2301      	movs	r3, #1
 8007d72:	e000      	b.n	8007d76 <M8N_UBX_CHKSUM_Check+0x66>
 8007d74:	2300      	movs	r3, #0
 8007d76:	b2db      	uxtb	r3, r3
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <M8N_UBX_NAV_POSLLH_Parsing>:

void M8N_UBX_NAV_POSLLH_Parsing(unsigned char* data, M8N_UBX_NAV_POSLLH* posllh)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
	posllh->CLASS = data[2];
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	789a      	ldrb	r2, [r3, #2]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	701a      	strb	r2, [r3, #0]
	posllh->ID = data[3];
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	78da      	ldrb	r2, [r3, #3]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	705a      	strb	r2, [r3, #1]
	posllh->length = data[4] | data[5]<<8;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	3304      	adds	r3, #4
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	b21a      	sxth	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	3305      	adds	r3, #5
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	021b      	lsls	r3, r3, #8
 8007dae:	b21b      	sxth	r3, r3
 8007db0:	4313      	orrs	r3, r2
 8007db2:	b21b      	sxth	r3, r3
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	805a      	strh	r2, [r3, #2]

	posllh->iTOW = data[6] | data[7]<<8 | data[8]<<16 | data[9]<<24;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3306      	adds	r3, #6
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	3307      	adds	r3, #7
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	021b      	lsls	r3, r3, #8
 8007dca:	431a      	orrs	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3308      	adds	r3, #8
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	041b      	lsls	r3, r3, #16
 8007dd4:	431a      	orrs	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3309      	adds	r3, #9
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	061b      	lsls	r3, r3, #24
 8007dde:	4313      	orrs	r3, r2
 8007de0:	461a      	mov	r2, r3
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	605a      	str	r2, [r3, #4]
	posllh->lon = data[10] | data[11]<<8 | data[12]<<16 | data[13]<<24;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	330a      	adds	r3, #10
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	461a      	mov	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	330b      	adds	r3, #11
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	021b      	lsls	r3, r3, #8
 8007df6:	431a      	orrs	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	330c      	adds	r3, #12
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	041b      	lsls	r3, r3, #16
 8007e00:	431a      	orrs	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	330d      	adds	r3, #13
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	061b      	lsls	r3, r3, #24
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	609a      	str	r2, [r3, #8]
	posllh->lat = data[14] | data[15]<<8 | data[16]<<16 | data[17]<<24;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	330e      	adds	r3, #14
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	330f      	adds	r3, #15
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	021b      	lsls	r3, r3, #8
 8007e20:	431a      	orrs	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3310      	adds	r3, #16
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	041b      	lsls	r3, r3, #16
 8007e2a:	431a      	orrs	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	3311      	adds	r3, #17
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	061b      	lsls	r3, r3, #24
 8007e34:	431a      	orrs	r2, r3
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	60da      	str	r2, [r3, #12]
	posllh->height = data[18] | data[19]<<8 | data[20]<<16 | data[21]<<24;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3312      	adds	r3, #18
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	461a      	mov	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	3313      	adds	r3, #19
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	021b      	lsls	r3, r3, #8
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3314      	adds	r3, #20
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	041b      	lsls	r3, r3, #16
 8007e54:	431a      	orrs	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	3315      	adds	r3, #21
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	061b      	lsls	r3, r3, #24
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	611a      	str	r2, [r3, #16]
	posllh->hMSL = data[22] | data[23]<<8 | data[24]<<16 | data[25]<<24;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3316      	adds	r3, #22
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3317      	adds	r3, #23
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	021b      	lsls	r3, r3, #8
 8007e74:	431a      	orrs	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	3318      	adds	r3, #24
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	041b      	lsls	r3, r3, #16
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	3319      	adds	r3, #25
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	061b      	lsls	r3, r3, #24
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	615a      	str	r2, [r3, #20]
	posllh->hAcc = data[26] | data[27]<<8 | data[28]<<16 | data[29]<<24;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	331a      	adds	r3, #26
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	461a      	mov	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	331b      	adds	r3, #27
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	021b      	lsls	r3, r3, #8
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	331c      	adds	r3, #28
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	041b      	lsls	r3, r3, #16
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	331d      	adds	r3, #29
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	061b      	lsls	r3, r3, #24
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	619a      	str	r2, [r3, #24]
	posllh->vAcc = data[30] | data[31]<<8 | data[32]<<16 | data[33]<<24;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	331e      	adds	r3, #30
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	331f      	adds	r3, #31
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	3320      	adds	r3, #32
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	041b      	lsls	r3, r3, #16
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	3321      	adds	r3, #33	; 0x21
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	061b      	lsls	r3, r3, #24
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	61da      	str	r2, [r3, #28]

//	posllh->lon_f64 = posllh->lon / 10000000.;
//	posllh->lat_f64 = posllh->lat / 10000000.;
}
 8007ee6:	bf00      	nop
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
	...

08007ef4 <Double_Roll_Pitch_PID_Calculation>:
#define DT 0.001f
#define OUTER_DERIV_FILT_ENABLE 1
#define INNER_DERIV_FILT_ENABLE 1

void Double_Roll_Pitch_PID_Calculation(PIDDouble* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	ed87 0a02 	vstr	s0, [r7, #8]
 8007f00:	edc7 0a01 	vstr	s1, [r7, #4]
 8007f04:	ed87 1a00 	vstr	s2, [r7]
	/*********** Double PID Outer Begin (Roll and Pitch Angular Position Control) *************/
	axis->out.reference = set_point_angle;	//Set point of outer PID control
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	645a      	str	r2, [r3, #68]	; 0x44
	axis->out.meas_value = angle;			//BNO080 rotation angle
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	649a      	str	r2, [r3, #72]	; 0x48

	axis->out.error = axis->out.reference - axis->out.meas_value;	//Define error of outer loop
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8007f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	axis->out.p_result = axis->out.error * axis->out.kp;			//Calculate P result of outer loop
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8007f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

	axis->out.error_sum = axis->out.error_sum + axis->out.error * DT;	//Define summation of outer loop
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8007f4c:	eddf 6a7f 	vldr	s13, [pc, #508]	; 800814c <Double_Roll_Pitch_PID_Calculation+0x258>
 8007f50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
#define OUT_ERR_SUM_MAX 500
#define OUT_I_ERR_MIN -OUT_ERR_SUM_MAX
	if(axis->out.error_sum > OUT_ERR_SUM_MAX) axis->out.error_sum = OUT_ERR_SUM_MAX;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007f64:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8008150 <Double_Roll_Pitch_PID_Calculation+0x25c>
 8007f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f70:	dd03      	ble.n	8007f7a <Double_Roll_Pitch_PID_Calculation+0x86>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4a77      	ldr	r2, [pc, #476]	; (8008154 <Double_Roll_Pitch_PID_Calculation+0x260>)
 8007f76:	655a      	str	r2, [r3, #84]	; 0x54
 8007f78:	e00c      	b.n	8007f94 <Double_Roll_Pitch_PID_Calculation+0xa0>
	else if(axis->out.error_sum < OUT_I_ERR_MIN) axis->out.error_sum = OUT_I_ERR_MIN;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8007f80:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8008158 <Double_Roll_Pitch_PID_Calculation+0x264>
 8007f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f8c:	d502      	bpl.n	8007f94 <Double_Roll_Pitch_PID_Calculation+0xa0>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	4a72      	ldr	r2, [pc, #456]	; (800815c <Double_Roll_Pitch_PID_Calculation+0x268>)
 8007f92:	655a      	str	r2, [r3, #84]	; 0x54
	axis->out.i_result = axis->out.error_sum * axis->out.ki;			//Calculate I result of outer loop
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8007fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	axis->out.error_deriv = -rate;										//Define derivative of outer loop (rate = ICM-20602 Angular Rate)
 8007faa:	edd7 7a00 	vldr	s15, [r7]
 8007fae:	eef1 7a67 	vneg.f32	s15, s15
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

#if !OUTER_DERIV_FILT_ENABLE
	axis->out.d_result = axis->out.error_deriv * axis->out.kd;			//Calculate D result of outer loop
#else
	axis->out.error_deriv_filt = axis->out.error_deriv_filt * 0.4f + axis->out.error_deriv * 0.6f;	//filter for derivative
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8007fbe:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8008160 <Double_Roll_Pitch_PID_Calculation+0x26c>
 8007fc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8007fcc:	eddf 6a65 	vldr	s13, [pc, #404]	; 8008164 <Double_Roll_Pitch_PID_Calculation+0x270>
 8007fd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	axis->out.d_result = axis->out.error_deriv_filt * axis->out.kd;									//Calculate D result of inner loop
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8007fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
#endif

	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;  //Calculate PID result of outer loop
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8008000:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800800a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	/****************************************************************************************/
	
	/************ Double PID Inner Begin (Roll and Pitch Angular Rate Control) **************/
	axis->in.reference = axis->out.pid_result;	//Set point of inner PID control is the PID result of outer loop (for double PID control)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	60da      	str	r2, [r3, #12]
	axis->in.meas_value = rate;					//ICM-20602 angular rate
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	611a      	str	r2, [r3, #16]

	axis->in.error = axis->in.reference - axis->in.meas_value;	//Define error of inner loop
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	ed93 7a03 	vldr	s14, [r3, #12]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	edd3 7a04 	vldr	s15, [r3, #16]
 800802e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->in.p_result = axis->in.error * axis->in.kp;			//Calculate P result of inner loop
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	ed93 7a06 	vldr	s14, [r3, #24]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	edd3 7a00 	vldr	s15, [r3]
 8008044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	axis->in.error_sum = axis->in.error_sum + axis->in.error * DT;	//Define summation of inner loop
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	ed93 7a07 	vldr	s14, [r3, #28]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	edd3 7a06 	vldr	s15, [r3, #24]
 800805a:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800814c <Double_Roll_Pitch_PID_Calculation+0x258>
 800805e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	edc3 7a07 	vstr	s15, [r3, #28]
#define IN_ERR_SUM_MAX 500
#define IN_I_ERR_MIN -IN_ERR_SUM_MAX
	if(axis->out.error_sum > IN_ERR_SUM_MAX) axis->out.error_sum = IN_ERR_SUM_MAX;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8008072:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8008150 <Double_Roll_Pitch_PID_Calculation+0x25c>
 8008076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800807a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800807e:	dd03      	ble.n	8008088 <Double_Roll_Pitch_PID_Calculation+0x194>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4a34      	ldr	r2, [pc, #208]	; (8008154 <Double_Roll_Pitch_PID_Calculation+0x260>)
 8008084:	655a      	str	r2, [r3, #84]	; 0x54
 8008086:	e00c      	b.n	80080a2 <Double_Roll_Pitch_PID_Calculation+0x1ae>
	else if(axis->out.error_sum < IN_I_ERR_MIN) axis->out.error_sum = IN_I_ERR_MIN;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800808e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008158 <Double_Roll_Pitch_PID_Calculation+0x264>
 8008092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800809a:	d502      	bpl.n	80080a2 <Double_Roll_Pitch_PID_Calculation+0x1ae>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4a2f      	ldr	r2, [pc, #188]	; (800815c <Double_Roll_Pitch_PID_Calculation+0x268>)
 80080a0:	655a      	str	r2, [r3, #84]	; 0x54
	axis->in.i_result = axis->in.error_sum * axis->in.ki;							//Calculate I result of inner loop
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	ed93 7a07 	vldr	s14, [r3, #28]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80080ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->in.error_deriv = -(axis->in.meas_value - axis->in.meas_value_prev) / DT;	//Define derivative of inner loop
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	ed93 7a04 	vldr	s14, [r3, #16]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80080c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080c8:	eeb1 7a67 	vneg.f32	s14, s15
 80080cc:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800814c <Double_Roll_Pitch_PID_Calculation+0x258>
 80080d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->in.meas_value_prev = axis->in.meas_value;									//Refresh value_prev to the latest value
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	691a      	ldr	r2, [r3, #16]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	615a      	str	r2, [r3, #20]

#if !INNER_DERIV_FILT_ENABLE
	axis->in.d_result = axis->in.error_deriv * axis->in.kd;				//Calculate D result of inner loop
#else
	axis->in.error_deriv_filt = axis->in.error_deriv_filt * 0.5f + axis->in.error_deriv * 0.5f;	//filter for derivative
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80080e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80080ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	edd3 7a08 	vldr	s15, [r3, #32]
 80080f6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80080fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80080fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	axis->in.d_result = axis->in.error_deriv_filt * axis->in.kd;								//Calculate D result of inner loop
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	edd3 7a02 	vldr	s15, [r3, #8]
 8008114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
#endif
	
	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result; //Calculate PID result of inner loop
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800812a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	/****************************************************************************************/
}
 800813e:	bf00      	nop
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	3a83126f 	.word	0x3a83126f
 8008150:	43fa0000 	.word	0x43fa0000
 8008154:	43fa0000 	.word	0x43fa0000
 8008158:	c3fa0000 	.word	0xc3fa0000
 800815c:	c3fa0000 	.word	0xc3fa0000
 8008160:	3ecccccd 	.word	0x3ecccccd
 8008164:	3f19999a 	.word	0x3f19999a

08008168 <Single_Yaw_Heading_PID_Calculation>:

void Single_Yaw_Heading_PID_Calculation(PIDSingle* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	ed87 0a02 	vstr	s0, [r7, #8]
 8008174:	edc7 0a01 	vstr	s1, [r7, #4]
 8008178:	ed87 1a00 	vstr	s2, [r7]
	/*********** Single PID Begin (Yaw Angular Position) *************/
	axis->reference = set_point_angle;	//Set point of yaw heading @ yaw stick is center.
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	60da      	str	r2, [r3, #12]
	axis->meas_value = angle;			//Current BNO080_Yaw angle @ yaw stick is center.
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw angle control
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	ed93 7a03 	vldr	s14, [r3, #12]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	edd3 7a04 	vldr	s15, [r3, #16]
 8008194:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	edc3 7a06 	vstr	s15, [r3, #24]

	if(axis->error > 180.f) axis->error -= 360.f;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80081a4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800828c <Single_Yaw_Heading_PID_Calculation+0x124>
 80081a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b0:	dd0a      	ble.n	80081c8 <Single_Yaw_Heading_PID_Calculation+0x60>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80081b8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8008290 <Single_Yaw_Heading_PID_Calculation+0x128>
 80081bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	edc3 7a06 	vstr	s15, [r3, #24]
 80081c6:	e013      	b.n	80081f0 <Single_Yaw_Heading_PID_Calculation+0x88>
	else if(axis->error < -180.f) axis->error += 360.f;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80081ce:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008294 <Single_Yaw_Heading_PID_Calculation+0x12c>
 80081d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081da:	d509      	bpl.n	80081f0 <Single_Yaw_Heading_PID_Calculation+0x88>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	edd3 7a06 	vldr	s15, [r3, #24]
 80081e2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8008290 <Single_Yaw_Heading_PID_Calculation+0x128>
 80081e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	edc3 7a06 	vstr	s15, [r3, #24]
	
	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw angle control
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	ed93 7a06 	vldr	s14, [r3, #24]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	edd3 7a00 	vldr	s15, [r3]
 80081fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw angle control
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	ed93 7a07 	vldr	s14, [r3, #28]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008212:	eddf 6a21 	vldr	s13, [pc, #132]	; 8008298 <Single_Yaw_Heading_PID_Calculation+0x130>
 8008216:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800821a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	edc3 7a07 	vstr	s15, [r3, #28]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw angle control
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	ed93 7a07 	vldr	s14, [r3, #28]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->error_deriv = -rate;						//Define differentiation of yaw angle control
 800823a:	edd7 7a00 	vldr	s15, [r7]
 800823e:	eef1 7a67 	vneg.f32	s15, s15
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->d_result = axis->error_deriv * axis->kd;	//Calculate D result of yaw angle control
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	ed93 7a08 	vldr	s14, [r3, #32]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	edd3 7a02 	vldr	s15, [r3, #8]
 8008254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	
	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw angle control
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800826a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	/***************************************************************/
}
 800827e:	bf00      	nop
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	43340000 	.word	0x43340000
 8008290:	43b40000 	.word	0x43b40000
 8008294:	c3340000 	.word	0xc3340000
 8008298:	3a83126f 	.word	0x3a83126f

0800829c <Single_Yaw_Rate_PID_Calculation>:

void Single_Yaw_Rate_PID_Calculation(PIDSingle* axis, float set_point_rate, float rate/*ICM-20602 Angular Rate*/)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80082a8:	edc7 0a01 	vstr	s1, [r7, #4]
	/*********** Single PID Begin (Yaw Angular Rate Control) *************/
	axis->reference = set_point_rate;	//Set point of yaw heading @ yaw stick is not center.
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	60da      	str	r2, [r3, #12]
	axis->meas_value = rate;			//Current ICM20602.gyro_z @ yaw stick is not center.
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw rate control
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80082c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw rate control
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	ed93 7a06 	vldr	s14, [r3, #24]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	edd3 7a00 	vldr	s15, [r3]
 80082da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw rate control
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	ed93 7a07 	vldr	s14, [r3, #28]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80082f0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008384 <Single_Yaw_Rate_PID_Calculation+0xe8>
 80082f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80082f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	edc3 7a07 	vstr	s15, [r3, #28]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw rate control
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	ed93 7a07 	vldr	s14, [r3, #28]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	edd3 7a01 	vldr	s15, [r3, #4]
 800830e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	axis->error_deriv = -(axis->meas_value - axis->meas_value_prev) / DT;	//Define differentiation of yaw rate control
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	ed93 7a04 	vldr	s14, [r3, #16]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	edd3 7a05 	vldr	s15, [r3, #20]
 8008324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008328:	eeb1 7a67 	vneg.f32	s14, s15
 800832c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8008384 <Single_Yaw_Rate_PID_Calculation+0xe8>
 8008330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->meas_value_prev = axis->meas_value;								//Refresh value_prev to the latest value
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	691a      	ldr	r2, [r3, #16]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	615a      	str	r2, [r3, #20]
	axis->d_result = axis->error_deriv * axis->kd;							//Calculate D result of yaw rate control
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	ed93 7a08 	vldr	s14, [r3, #32]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	edd3 7a02 	vldr	s15, [r3, #8]
 800834e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw control
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008364:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800836e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	/*******************************************************************/
}
 8008378:	bf00      	nop
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	3a83126f 	.word	0x3a83126f

08008388 <Reset_PID_Integrator>:

void Reset_PID_Integrator(PIDSingle* axis)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
	axis->error_sum = 0;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f04f 0200 	mov.w	r2, #0
 8008396:	61da      	str	r2, [r3, #28]
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <Reset_All_PID_Integrator>:

void Reset_All_PID_Integrator(void)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	af00      	add	r7, sp, #0
	Reset_PID_Integrator(&roll.in);
 80083a8:	4809      	ldr	r0, [pc, #36]	; (80083d0 <Reset_All_PID_Integrator+0x2c>)
 80083aa:	f7ff ffed 	bl	8008388 <Reset_PID_Integrator>
	Reset_PID_Integrator(&roll.out);
 80083ae:	4809      	ldr	r0, [pc, #36]	; (80083d4 <Reset_All_PID_Integrator+0x30>)
 80083b0:	f7ff ffea 	bl	8008388 <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.in);
 80083b4:	4808      	ldr	r0, [pc, #32]	; (80083d8 <Reset_All_PID_Integrator+0x34>)
 80083b6:	f7ff ffe7 	bl	8008388 <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.out);
 80083ba:	4808      	ldr	r0, [pc, #32]	; (80083dc <Reset_All_PID_Integrator+0x38>)
 80083bc:	f7ff ffe4 	bl	8008388 <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_heading);
 80083c0:	4807      	ldr	r0, [pc, #28]	; (80083e0 <Reset_All_PID_Integrator+0x3c>)
 80083c2:	f7ff ffe1 	bl	8008388 <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_rate);
 80083c6:	4807      	ldr	r0, [pc, #28]	; (80083e4 <Reset_All_PID_Integrator+0x40>)
 80083c8:	f7ff ffde 	bl	8008388 <Reset_PID_Integrator>
}
 80083cc:	bf00      	nop
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	20000488 	.word	0x20000488
 80083d4:	200004c0 	.word	0x200004c0
 80083d8:	20000418 	.word	0x20000418
 80083dc:	20000450 	.word	0x20000450
 80083e0:	200003e0 	.word	0x200003e0
 80083e4:	200003a8 	.word	0x200003a8

080083e8 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b088      	sub	sp, #32
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	ed93 7a00 	vldr	s14, [r3]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	edd3 7a00 	vldr	s15, [r3]
 80083fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3304      	adds	r3, #4
 8008404:	edd3 6a00 	vldr	s13, [r3]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3304      	adds	r3, #4
 800840c:	edd3 7a00 	vldr	s15, [r3]
 8008410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008414:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3308      	adds	r3, #8
 800841c:	edd3 6a00 	vldr	s13, [r3]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	3308      	adds	r3, #8
 8008424:	edd3 7a00 	vldr	s15, [r3]
 8008428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800842c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	330c      	adds	r3, #12
 8008434:	edd3 6a00 	vldr	s13, [r3]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	330c      	adds	r3, #12
 800843c:	edd3 7a00 	vldr	s15, [r3]
 8008440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008448:	eeb0 0a67 	vmov.f32	s0, s15
 800844c:	f000 f91e 	bl	800868c <invSqrt>
 8008450:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	edd3 7a00 	vldr	s15, [r3]
 800845a:	ed97 7a07 	vldr	s14, [r7, #28]
 800845e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008462:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	3304      	adds	r3, #4
 800846a:	edd3 7a00 	vldr	s15, [r3]
 800846e:	ed97 7a07 	vldr	s14, [r7, #28]
 8008472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008476:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	3308      	adds	r3, #8
 800847e:	edd3 7a00 	vldr	s15, [r3]
 8008482:	ed97 7a07 	vldr	s14, [r7, #28]
 8008486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800848a:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	330c      	adds	r3, #12
 8008492:	edd3 7a00 	vldr	s15, [r3]
 8008496:	ed97 7a07 	vldr	s14, [r7, #28]
 800849a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800849e:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 80084a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80084a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80084aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80084ae:	edd7 6a06 	vldr	s13, [r7, #24]
 80084b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80084b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084be:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80084c2:	ed97 7a06 	vldr	s14, [r7, #24]
 80084c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80084ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80084ce:	edd7 6a05 	vldr	s13, [r7, #20]
 80084d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80084d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80084de:	edd7 6a04 	vldr	s13, [r7, #16]
 80084e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80084e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80084ee:	edd7 6a03 	vldr	s13, [r7, #12]
 80084f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80084f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084fe:	eef0 0a67 	vmov.f32	s1, s15
 8008502:	eeb0 0a46 	vmov.f32	s0, s12
 8008506:	f006 fb31 	bl	800eb6c <atan2f>
 800850a:	eef0 7a40 	vmov.f32	s15, s0
 800850e:	4b59      	ldr	r3, [pc, #356]	; (8008674 <Quaternion_Update+0x28c>)
 8008510:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8008514:	ed97 7a05 	vldr	s14, [r7, #20]
 8008518:	edd7 7a03 	vldr	s15, [r7, #12]
 800851c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008520:	edd7 6a06 	vldr	s13, [r7, #24]
 8008524:	edd7 7a04 	vldr	s15, [r7, #16]
 8008528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800852c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008530:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008534:	eeb0 0a67 	vmov.f32	s0, s15
 8008538:	f006 fac0 	bl	800eabc <asinf>
 800853c:	eef0 7a40 	vmov.f32	s15, s0
 8008540:	eef1 7a67 	vneg.f32	s15, s15
 8008544:	4b4c      	ldr	r3, [pc, #304]	; (8008678 <Quaternion_Update+0x290>)
 8008546:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 800854a:	ed97 7a06 	vldr	s14, [r7, #24]
 800854e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008552:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008556:	edd7 6a04 	vldr	s13, [r7, #16]
 800855a:	edd7 7a03 	vldr	s15, [r7, #12]
 800855e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008566:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800856a:	ed97 7a06 	vldr	s14, [r7, #24]
 800856e:	edd7 7a06 	vldr	s15, [r7, #24]
 8008572:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008576:	edd7 6a05 	vldr	s13, [r7, #20]
 800857a:	edd7 7a05 	vldr	s15, [r7, #20]
 800857e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008582:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008586:	edd7 6a04 	vldr	s13, [r7, #16]
 800858a:	edd7 7a04 	vldr	s15, [r7, #16]
 800858e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008592:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008596:	edd7 6a03 	vldr	s13, [r7, #12]
 800859a:	edd7 7a03 	vldr	s15, [r7, #12]
 800859e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085a6:	eef0 0a67 	vmov.f32	s1, s15
 80085aa:	eeb0 0a46 	vmov.f32	s0, s12
 80085ae:	f006 fadd 	bl	800eb6c <atan2f>
 80085b2:	eef0 7a40 	vmov.f32	s15, s0
 80085b6:	4b31      	ldr	r3, [pc, #196]	; (800867c <Quaternion_Update+0x294>)
 80085b8:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 80085bc:	4b2d      	ldr	r3, [pc, #180]	; (8008674 <Quaternion_Update+0x28c>)
 80085be:	edd3 7a00 	vldr	s15, [r3]
 80085c2:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008680 <Quaternion_Update+0x298>
 80085c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80085ca:	4b2a      	ldr	r3, [pc, #168]	; (8008674 <Quaternion_Update+0x28c>)
 80085cc:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 80085d0:	4b29      	ldr	r3, [pc, #164]	; (8008678 <Quaternion_Update+0x290>)
 80085d2:	edd3 7a00 	vldr	s15, [r3]
 80085d6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8008680 <Quaternion_Update+0x298>
 80085da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80085de:	4b26      	ldr	r3, [pc, #152]	; (8008678 <Quaternion_Update+0x290>)
 80085e0:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 80085e4:	4b25      	ldr	r3, [pc, #148]	; (800867c <Quaternion_Update+0x294>)
 80085e6:	edd3 7a00 	vldr	s15, [r3]
 80085ea:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8008680 <Quaternion_Update+0x298>
 80085ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80085f2:	4b22      	ldr	r3, [pc, #136]	; (800867c <Quaternion_Update+0x294>)
 80085f4:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 80085f8:	4b20      	ldr	r3, [pc, #128]	; (800867c <Quaternion_Update+0x294>)
 80085fa:	edd3 7a00 	vldr	s15, [r3]
 80085fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008606:	db0a      	blt.n	800861e <Quaternion_Update+0x236>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8008608:	4b1c      	ldr	r3, [pc, #112]	; (800867c <Quaternion_Update+0x294>)
 800860a:	edd3 7a00 	vldr	s15, [r3]
 800860e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008684 <Quaternion_Update+0x29c>
 8008612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008616:	4b19      	ldr	r3, [pc, #100]	; (800867c <Quaternion_Update+0x294>)
 8008618:	edc3 7a00 	vstr	s15, [r3]
 800861c:	e007      	b.n	800862e <Quaternion_Update+0x246>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 800861e:	4b17      	ldr	r3, [pc, #92]	; (800867c <Quaternion_Update+0x294>)
 8008620:	edd3 7a00 	vldr	s15, [r3]
 8008624:	eef1 7a67 	vneg.f32	s15, s15
 8008628:	4b14      	ldr	r3, [pc, #80]	; (800867c <Quaternion_Update+0x294>)
 800862a:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 800862e:	4b11      	ldr	r3, [pc, #68]	; (8008674 <Quaternion_Update+0x28c>)
 8008630:	edd3 7a00 	vldr	s15, [r3]
 8008634:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800863c:	db0a      	blt.n	8008654 <Quaternion_Update+0x26c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 800863e:	4b0d      	ldr	r3, [pc, #52]	; (8008674 <Quaternion_Update+0x28c>)
 8008640:	edd3 7a00 	vldr	s15, [r3]
 8008644:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008688 <Quaternion_Update+0x2a0>
 8008648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800864c:	4b09      	ldr	r3, [pc, #36]	; (8008674 <Quaternion_Update+0x28c>)
 800864e:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8008652:	e00b      	b.n	800866c <Quaternion_Update+0x284>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8008654:	4b07      	ldr	r3, [pc, #28]	; (8008674 <Quaternion_Update+0x28c>)
 8008656:	edd3 7a00 	vldr	s15, [r3]
 800865a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8008688 <Quaternion_Update+0x2a0>
 800865e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008662:	eef1 7a67 	vneg.f32	s15, s15
 8008666:	4b03      	ldr	r3, [pc, #12]	; (8008674 <Quaternion_Update+0x28c>)
 8008668:	edc3 7a00 	vstr	s15, [r3]
}
 800866c:	bf00      	nop
 800866e:	3720      	adds	r7, #32
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	20000500 	.word	0x20000500
 8008678:	200004f8 	.word	0x200004f8
 800867c:	200004fc 	.word	0x200004fc
 8008680:	42652ee1 	.word	0x42652ee1
 8008684:	43b40000 	.word	0x43b40000
 8008688:	43340000 	.word	0x43340000

0800868c <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 800868c:	b480      	push	{r7}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8008696:	edd7 7a01 	vldr	s15, [r7, #4]
 800869a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800869e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80086a2:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80086aa:	f107 0310 	add.w	r3, r7, #16
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	105a      	asrs	r2, r3, #1
 80086b6:	4b12      	ldr	r3, [pc, #72]	; (8008700 <invSqrt+0x74>)
 80086b8:	1a9b      	subs	r3, r3, r2
 80086ba:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80086bc:	f107 030c 	add.w	r3, r7, #12
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80086c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80086c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80086cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80086d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80086d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80086dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80086e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80086e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e8:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	ee07 3a90 	vmov	s15, r3
}
 80086f2:	eeb0 0a67 	vmov.f32	s0, s15
 80086f6:	371c      	adds	r7, #28
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	5f3759df 	.word	0x5f3759df

08008704 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800870a:	463b      	mov	r3, r7
 800870c:	2200      	movs	r2, #0
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	605a      	str	r2, [r3, #4]
 8008712:	609a      	str	r2, [r3, #8]
 8008714:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8008716:	4b21      	ldr	r3, [pc, #132]	; (800879c <MX_ADC1_Init+0x98>)
 8008718:	4a21      	ldr	r2, [pc, #132]	; (80087a0 <MX_ADC1_Init+0x9c>)
 800871a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800871c:	4b1f      	ldr	r3, [pc, #124]	; (800879c <MX_ADC1_Init+0x98>)
 800871e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008722:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008724:	4b1d      	ldr	r3, [pc, #116]	; (800879c <MX_ADC1_Init+0x98>)
 8008726:	2200      	movs	r2, #0
 8008728:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800872a:	4b1c      	ldr	r3, [pc, #112]	; (800879c <MX_ADC1_Init+0x98>)
 800872c:	2200      	movs	r2, #0
 800872e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008730:	4b1a      	ldr	r3, [pc, #104]	; (800879c <MX_ADC1_Init+0x98>)
 8008732:	2201      	movs	r2, #1
 8008734:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008736:	4b19      	ldr	r3, [pc, #100]	; (800879c <MX_ADC1_Init+0x98>)
 8008738:	2200      	movs	r2, #0
 800873a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800873e:	4b17      	ldr	r3, [pc, #92]	; (800879c <MX_ADC1_Init+0x98>)
 8008740:	2200      	movs	r2, #0
 8008742:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008744:	4b15      	ldr	r3, [pc, #84]	; (800879c <MX_ADC1_Init+0x98>)
 8008746:	4a17      	ldr	r2, [pc, #92]	; (80087a4 <MX_ADC1_Init+0xa0>)
 8008748:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800874a:	4b14      	ldr	r3, [pc, #80]	; (800879c <MX_ADC1_Init+0x98>)
 800874c:	2200      	movs	r2, #0
 800874e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008750:	4b12      	ldr	r3, [pc, #72]	; (800879c <MX_ADC1_Init+0x98>)
 8008752:	2201      	movs	r2, #1
 8008754:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008756:	4b11      	ldr	r3, [pc, #68]	; (800879c <MX_ADC1_Init+0x98>)
 8008758:	2201      	movs	r2, #1
 800875a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800875e:	4b0f      	ldr	r3, [pc, #60]	; (800879c <MX_ADC1_Init+0x98>)
 8008760:	2201      	movs	r2, #1
 8008762:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008764:	480d      	ldr	r0, [pc, #52]	; (800879c <MX_ADC1_Init+0x98>)
 8008766:	f7f8 fc83 	bl	8001070 <HAL_ADC_Init>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d001      	beq.n	8008774 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8008770:	f002 fc06 	bl	800af80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8008774:	2308      	movs	r3, #8
 8008776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008778:	2301      	movs	r3, #1
 800877a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800877c:	2307      	movs	r3, #7
 800877e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008780:	463b      	mov	r3, r7
 8008782:	4619      	mov	r1, r3
 8008784:	4805      	ldr	r0, [pc, #20]	; (800879c <MX_ADC1_Init+0x98>)
 8008786:	f7f8 fdc7 	bl	8001318 <HAL_ADC_ConfigChannel>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8008790:	f002 fbf6 	bl	800af80 <Error_Handler>
  }

}
 8008794:	bf00      	nop
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	20000504 	.word	0x20000504
 80087a0:	40012000 	.word	0x40012000
 80087a4:	0f000001 	.word	0x0f000001

080087a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b08a      	sub	sp, #40	; 0x28
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087b0:	f107 0314 	add.w	r3, r7, #20
 80087b4:	2200      	movs	r2, #0
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	605a      	str	r2, [r3, #4]
 80087ba:	609a      	str	r2, [r3, #8]
 80087bc:	60da      	str	r2, [r3, #12]
 80087be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a2e      	ldr	r2, [pc, #184]	; (8008880 <HAL_ADC_MspInit+0xd8>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d156      	bne.n	8008878 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80087ca:	2300      	movs	r3, #0
 80087cc:	613b      	str	r3, [r7, #16]
 80087ce:	4b2d      	ldr	r3, [pc, #180]	; (8008884 <HAL_ADC_MspInit+0xdc>)
 80087d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087d2:	4a2c      	ldr	r2, [pc, #176]	; (8008884 <HAL_ADC_MspInit+0xdc>)
 80087d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087d8:	6453      	str	r3, [r2, #68]	; 0x44
 80087da:	4b2a      	ldr	r3, [pc, #168]	; (8008884 <HAL_ADC_MspInit+0xdc>)
 80087dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e2:	613b      	str	r3, [r7, #16]
 80087e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80087e6:	2300      	movs	r3, #0
 80087e8:	60fb      	str	r3, [r7, #12]
 80087ea:	4b26      	ldr	r3, [pc, #152]	; (8008884 <HAL_ADC_MspInit+0xdc>)
 80087ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ee:	4a25      	ldr	r2, [pc, #148]	; (8008884 <HAL_ADC_MspInit+0xdc>)
 80087f0:	f043 0302 	orr.w	r3, r3, #2
 80087f4:	6313      	str	r3, [r2, #48]	; 0x30
 80087f6:	4b23      	ldr	r3, [pc, #140]	; (8008884 <HAL_ADC_MspInit+0xdc>)
 80087f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fa:	f003 0302 	and.w	r3, r3, #2
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008802:	2301      	movs	r3, #1
 8008804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008806:	2303      	movs	r3, #3
 8008808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800880a:	2300      	movs	r3, #0
 800880c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800880e:	f107 0314 	add.w	r3, r7, #20
 8008812:	4619      	mov	r1, r3
 8008814:	481c      	ldr	r0, [pc, #112]	; (8008888 <HAL_ADC_MspInit+0xe0>)
 8008816:	f7f9 fcc1 	bl	800219c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800881a:	4b1c      	ldr	r3, [pc, #112]	; (800888c <HAL_ADC_MspInit+0xe4>)
 800881c:	4a1c      	ldr	r2, [pc, #112]	; (8008890 <HAL_ADC_MspInit+0xe8>)
 800881e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8008820:	4b1a      	ldr	r3, [pc, #104]	; (800888c <HAL_ADC_MspInit+0xe4>)
 8008822:	2200      	movs	r2, #0
 8008824:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008826:	4b19      	ldr	r3, [pc, #100]	; (800888c <HAL_ADC_MspInit+0xe4>)
 8008828:	2200      	movs	r2, #0
 800882a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800882c:	4b17      	ldr	r3, [pc, #92]	; (800888c <HAL_ADC_MspInit+0xe4>)
 800882e:	2200      	movs	r2, #0
 8008830:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8008832:	4b16      	ldr	r3, [pc, #88]	; (800888c <HAL_ADC_MspInit+0xe4>)
 8008834:	2200      	movs	r2, #0
 8008836:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008838:	4b14      	ldr	r3, [pc, #80]	; (800888c <HAL_ADC_MspInit+0xe4>)
 800883a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800883e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008840:	4b12      	ldr	r3, [pc, #72]	; (800888c <HAL_ADC_MspInit+0xe4>)
 8008842:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008846:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008848:	4b10      	ldr	r3, [pc, #64]	; (800888c <HAL_ADC_MspInit+0xe4>)
 800884a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800884e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008850:	4b0e      	ldr	r3, [pc, #56]	; (800888c <HAL_ADC_MspInit+0xe4>)
 8008852:	2200      	movs	r2, #0
 8008854:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008856:	4b0d      	ldr	r3, [pc, #52]	; (800888c <HAL_ADC_MspInit+0xe4>)
 8008858:	2200      	movs	r2, #0
 800885a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800885c:	480b      	ldr	r0, [pc, #44]	; (800888c <HAL_ADC_MspInit+0xe4>)
 800885e:	f7f9 f90d 	bl	8001a7c <HAL_DMA_Init>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d001      	beq.n	800886c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8008868:	f002 fb8a 	bl	800af80 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a07      	ldr	r2, [pc, #28]	; (800888c <HAL_ADC_MspInit+0xe4>)
 8008870:	639a      	str	r2, [r3, #56]	; 0x38
 8008872:	4a06      	ldr	r2, [pc, #24]	; (800888c <HAL_ADC_MspInit+0xe4>)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008878:	bf00      	nop
 800887a:	3728      	adds	r7, #40	; 0x28
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	40012000 	.word	0x40012000
 8008884:	40023800 	.word	0x40023800
 8008888:	40020400 	.word	0x40020400
 800888c:	2000054c 	.word	0x2000054c
 8008890:	40026410 	.word	0x40026410

08008894 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800889a:	2300      	movs	r3, #0
 800889c:	607b      	str	r3, [r7, #4]
 800889e:	4b0c      	ldr	r3, [pc, #48]	; (80088d0 <MX_DMA_Init+0x3c>)
 80088a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a2:	4a0b      	ldr	r2, [pc, #44]	; (80088d0 <MX_DMA_Init+0x3c>)
 80088a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80088a8:	6313      	str	r3, [r2, #48]	; 0x30
 80088aa:	4b09      	ldr	r3, [pc, #36]	; (80088d0 <MX_DMA_Init+0x3c>)
 80088ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088b2:	607b      	str	r3, [r7, #4]
 80088b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80088b6:	2200      	movs	r2, #0
 80088b8:	2100      	movs	r1, #0
 80088ba:	2038      	movs	r0, #56	; 0x38
 80088bc:	f7f9 f8a7 	bl	8001a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80088c0:	2038      	movs	r0, #56	; 0x38
 80088c2:	f7f9 f8c0 	bl	8001a46 <HAL_NVIC_EnableIRQ>

}
 80088c6:	bf00      	nop
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	40023800 	.word	0x40023800

080088d4 <LL_GPIO_SetOutputPin>:
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	619a      	str	r2, [r3, #24]
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <LL_GPIO_ResetOutputPin>:
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	041a      	lsls	r2, r3, #16
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	619a      	str	r2, [r3, #24]
}
 8008902:	bf00      	nop
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
	...

08008910 <LL_AHB1_GRP1_EnableClock>:
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008918:	4b08      	ldr	r3, [pc, #32]	; (800893c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800891a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800891c:	4907      	ldr	r1, [pc, #28]	; (800893c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4313      	orrs	r3, r2
 8008922:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008924:	4b05      	ldr	r3, [pc, #20]	; (800893c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4013      	ands	r3, r2
 800892c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800892e:	68fb      	ldr	r3, [r7, #12]
}
 8008930:	bf00      	nop
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	40023800 	.word	0x40023800

08008940 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008946:	463b      	mov	r3, r7
 8008948:	2200      	movs	r2, #0
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	605a      	str	r2, [r3, #4]
 800894e:	609a      	str	r2, [r3, #8]
 8008950:	60da      	str	r2, [r3, #12]
 8008952:	611a      	str	r2, [r3, #16]
 8008954:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8008956:	2004      	movs	r0, #4
 8008958:	f7ff ffda 	bl	8008910 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800895c:	2080      	movs	r0, #128	; 0x80
 800895e:	f7ff ffd7 	bl	8008910 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008962:	2001      	movs	r0, #1
 8008964:	f7ff ffd4 	bl	8008910 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8008968:	2002      	movs	r0, #2
 800896a:	f7ff ffd1 	bl	8008910 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800896e:	2008      	movs	r0, #8
 8008970:	f7ff ffce 	bl	8008910 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8008974:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008978:	482e      	ldr	r0, [pc, #184]	; (8008a34 <MX_GPIO_Init+0xf4>)
 800897a:	f7ff ffab 	bl	80088d4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4 
 800897e:	f240 2117 	movw	r1, #535	; 0x217
 8008982:	482c      	ldr	r0, [pc, #176]	; (8008a34 <MX_GPIO_Init+0xf4>)
 8008984:	f7ff ffb4 	bl	80088f0 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8008988:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800898c:	482a      	ldr	r0, [pc, #168]	; (8008a38 <MX_GPIO_Init+0xf8>)
 800898e:	f7ff ffaf 	bl	80088f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8008992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008996:	4829      	ldr	r0, [pc, #164]	; (8008a3c <MX_GPIO_Init+0xfc>)
 8008998:	f7ff ffaa 	bl	80088f0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2 
 800899c:	f242 2317 	movw	r3, #8727	; 0x2217
 80089a0:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80089a2:	2301      	movs	r3, #1
 80089a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80089a6:	2300      	movs	r3, #0
 80089a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80089aa:	2300      	movs	r3, #0
 80089ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80089ae:	2300      	movs	r3, #0
 80089b0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089b2:	463b      	mov	r3, r7
 80089b4:	4619      	mov	r1, r3
 80089b6:	481f      	ldr	r0, [pc, #124]	; (8008a34 <MX_GPIO_Init+0xf4>)
 80089b8:	f7fc fa32 	bl	8004e20 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 80089bc:	f44f 7390 	mov.w	r3, #288	; 0x120
 80089c0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80089c2:	2300      	movs	r3, #0
 80089c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80089c6:	2300      	movs	r3, #0
 80089c8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089ca:	463b      	mov	r3, r7
 80089cc:	4619      	mov	r1, r3
 80089ce:	4819      	ldr	r0, [pc, #100]	; (8008a34 <MX_GPIO_Init+0xf4>)
 80089d0:	f7fc fa26 	bl	8004e20 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 80089d4:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80089d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80089da:	2301      	movs	r3, #1
 80089dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80089de:	2300      	movs	r3, #0
 80089e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80089e2:	2300      	movs	r3, #0
 80089e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80089e6:	2300      	movs	r3, #0
 80089e8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089ea:	463b      	mov	r3, r7
 80089ec:	4619      	mov	r1, r3
 80089ee:	4812      	ldr	r0, [pc, #72]	; (8008a38 <MX_GPIO_Init+0xf8>)
 80089f0:	f7fc fa16 	bl	8004e20 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 80089f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089f8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80089fa:	2301      	movs	r3, #1
 80089fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80089fe:	2300      	movs	r3, #0
 8008a00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008a02:	2300      	movs	r3, #0
 8008a04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008a06:	2300      	movs	r3, #0
 8008a08:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a0a:	463b      	mov	r3, r7
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	480b      	ldr	r0, [pc, #44]	; (8008a3c <MX_GPIO_Init+0xfc>)
 8008a10:	f7fc fa06 	bl	8004e20 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8008a14:	2380      	movs	r3, #128	; 0x80
 8008a16:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a20:	463b      	mov	r3, r7
 8008a22:	4619      	mov	r1, r3
 8008a24:	4804      	ldr	r0, [pc, #16]	; (8008a38 <MX_GPIO_Init+0xf8>)
 8008a26:	f7fc f9fb 	bl	8004e20 <LL_GPIO_Init>

}
 8008a2a:	bf00      	nop
 8008a2c:	3718      	adds	r7, #24
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	40020800 	.word	0x40020800
 8008a38:	40020400 	.word	0x40020400
 8008a3c:	40020000 	.word	0x40020000

08008a40 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008a44:	4b12      	ldr	r3, [pc, #72]	; (8008a90 <MX_I2C1_Init+0x50>)
 8008a46:	4a13      	ldr	r2, [pc, #76]	; (8008a94 <MX_I2C1_Init+0x54>)
 8008a48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008a4a:	4b11      	ldr	r3, [pc, #68]	; (8008a90 <MX_I2C1_Init+0x50>)
 8008a4c:	4a12      	ldr	r2, [pc, #72]	; (8008a98 <MX_I2C1_Init+0x58>)
 8008a4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008a50:	4b0f      	ldr	r3, [pc, #60]	; (8008a90 <MX_I2C1_Init+0x50>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008a56:	4b0e      	ldr	r3, [pc, #56]	; (8008a90 <MX_I2C1_Init+0x50>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008a5c:	4b0c      	ldr	r3, [pc, #48]	; (8008a90 <MX_I2C1_Init+0x50>)
 8008a5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008a62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008a64:	4b0a      	ldr	r3, [pc, #40]	; (8008a90 <MX_I2C1_Init+0x50>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008a6a:	4b09      	ldr	r3, [pc, #36]	; (8008a90 <MX_I2C1_Init+0x50>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008a70:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <MX_I2C1_Init+0x50>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008a76:	4b06      	ldr	r3, [pc, #24]	; (8008a90 <MX_I2C1_Init+0x50>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008a7c:	4804      	ldr	r0, [pc, #16]	; (8008a90 <MX_I2C1_Init+0x50>)
 8008a7e:	f7f9 fd27 	bl	80024d0 <HAL_I2C_Init>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008a88:	f002 fa7a 	bl	800af80 <Error_Handler>
  }

}
 8008a8c:	bf00      	nop
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	200005ac 	.word	0x200005ac
 8008a94:	40005400 	.word	0x40005400
 8008a98:	00061a80 	.word	0x00061a80

08008a9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b08a      	sub	sp, #40	; 0x28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008aa4:	f107 0314 	add.w	r3, r7, #20
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	605a      	str	r2, [r3, #4]
 8008aae:	609a      	str	r2, [r3, #8]
 8008ab0:	60da      	str	r2, [r3, #12]
 8008ab2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a19      	ldr	r2, [pc, #100]	; (8008b20 <HAL_I2C_MspInit+0x84>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d12c      	bne.n	8008b18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008abe:	2300      	movs	r3, #0
 8008ac0:	613b      	str	r3, [r7, #16]
 8008ac2:	4b18      	ldr	r3, [pc, #96]	; (8008b24 <HAL_I2C_MspInit+0x88>)
 8008ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac6:	4a17      	ldr	r2, [pc, #92]	; (8008b24 <HAL_I2C_MspInit+0x88>)
 8008ac8:	f043 0302 	orr.w	r3, r3, #2
 8008acc:	6313      	str	r3, [r2, #48]	; 0x30
 8008ace:	4b15      	ldr	r3, [pc, #84]	; (8008b24 <HAL_I2C_MspInit+0x88>)
 8008ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad2:	f003 0302 	and.w	r3, r3, #2
 8008ad6:	613b      	str	r3, [r7, #16]
 8008ad8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008ada:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008ae0:	2312      	movs	r3, #18
 8008ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008aec:	2304      	movs	r3, #4
 8008aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008af0:	f107 0314 	add.w	r3, r7, #20
 8008af4:	4619      	mov	r1, r3
 8008af6:	480c      	ldr	r0, [pc, #48]	; (8008b28 <HAL_I2C_MspInit+0x8c>)
 8008af8:	f7f9 fb50 	bl	800219c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	4b08      	ldr	r3, [pc, #32]	; (8008b24 <HAL_I2C_MspInit+0x88>)
 8008b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b04:	4a07      	ldr	r2, [pc, #28]	; (8008b24 <HAL_I2C_MspInit+0x88>)
 8008b06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8008b0c:	4b05      	ldr	r3, [pc, #20]	; (8008b24 <HAL_I2C_MspInit+0x88>)
 8008b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b14:	60fb      	str	r3, [r7, #12]
 8008b16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8008b18:	bf00      	nop
 8008b1a:	3728      	adds	r7, #40	; 0x28
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	40005400 	.word	0x40005400
 8008b24:	40023800 	.word	0x40023800
 8008b28:	40020400 	.word	0x40020400

08008b2c <LL_TIM_EnableCounter>:
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f043 0201 	orr.w	r2, r3, #1
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	601a      	str	r2, [r3, #0]
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <LL_TIM_CC_EnableChannel>:
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a1a      	ldr	r2, [r3, #32]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	431a      	orrs	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	621a      	str	r2, [r3, #32]
}
 8008b62:	bf00      	nop
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <LL_TIM_CC_DisableChannel>:
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b083      	sub	sp, #12
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a1a      	ldr	r2, [r3, #32]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	43db      	mvns	r3, r3
 8008b80:	401a      	ands	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	621a      	str	r2, [r3, #32]
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <LL_TIM_EnableIT_UPDATE>:
{
 8008b92:	b480      	push	{r7}
 8008b94:	b083      	sub	sp, #12
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	f043 0201 	orr.w	r2, r3, #1
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	60da      	str	r2, [r3, #12]
}
 8008ba6:	bf00      	nop
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr

08008bb2 <LL_USART_IsActiveFlag_TXE>:
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b083      	sub	sp, #12
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc2:	2b80      	cmp	r3, #128	; 0x80
 8008bc4:	bf0c      	ite	eq
 8008bc6:	2301      	moveq	r3, #1
 8008bc8:	2300      	movne	r3, #0
 8008bca:	b2db      	uxtb	r3, r3
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <LL_USART_EnableIT_RXNE>:
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	f043 0220 	orr.w	r2, r3, #32
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	60da      	str	r2, [r3, #12]
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <LL_USART_TransmitData8>:
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	460b      	mov	r3, r1
 8008c02:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8008c04:	78fa      	ldrb	r2, [r7, #3]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	605a      	str	r2, [r3, #4]
}
 8008c0a:	bf00      	nop
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <LL_GPIO_SetOutputPin>:
{
 8008c16:	b480      	push	{r7}
 8008c18:	b083      	sub	sp, #12
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	619a      	str	r2, [r3, #24]
}
 8008c26:	bf00      	nop
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <LL_GPIO_ResetOutputPin>:
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	041a      	lsls	r2, r3, #16
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	619a      	str	r2, [r3, #24]
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	695a      	ldr	r2, [r3, #20]
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	405a      	eors	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	615a      	str	r2, [r3, #20]
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
	...

08008c74 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8008c80:	2300      	movs	r3, #0
 8008c82:	617b      	str	r3, [r7, #20]
 8008c84:	e011      	b.n	8008caa <_write+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8008c86:	bf00      	nop
 8008c88:	480c      	ldr	r0, [pc, #48]	; (8008cbc <_write+0x48>)
 8008c8a:	f7ff ff92 	bl	8008bb2 <LL_USART_IsActiveFlag_TXE>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d0f9      	beq.n	8008c88 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	68ba      	ldr	r2, [r7, #8]
 8008c98:	4413      	add	r3, r2
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	4807      	ldr	r0, [pc, #28]	; (8008cbc <_write+0x48>)
 8008ca0:	f7ff ffaa 	bl	8008bf8 <LL_USART_TransmitData8>
	for(int i=0;i<len;i++)
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	617b      	str	r3, [r7, #20]
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	dbe9      	blt.n	8008c86 <_write+0x12>
	}
	return len;
 8008cb2:	687b      	ldr	r3, [r7, #4]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3718      	adds	r7, #24
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	40011400 	.word	0x40011400

08008cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008cc0:	b5b0      	push	{r4, r5, r7, lr}
 8008cc2:	b090      	sub	sp, #64	; 0x40
 8008cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAccuracy;
	unsigned short adcVal;

	short gyro_x_offset = 1, gyro_y_offset = -23, gyro_z_offset = -3;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	847b      	strh	r3, [r7, #34]	; 0x22
 8008cca:	f64f 73e9 	movw	r3, #65513	; 0xffe9
 8008cce:	843b      	strh	r3, [r7, #32]
 8008cd0:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8008cd4:	83fb      	strh	r3, [r7, #30]
	unsigned char motor_arming_flag = 0;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	unsigned short iBus_SwA_Prev = 0;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	87bb      	strh	r3, [r7, #60]	; 0x3c
	unsigned char iBus_rx_cnt = 0;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008ce6:	f7f8 f92f 	bl	8000f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008cea:	f001 fc01 	bl	800a4f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008cee:	f7ff fe27 	bl	8008940 <MX_GPIO_Init>
  MX_TIM3_Init();
 8008cf2:	f002 fef5 	bl	800bae0 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8008cf6:	f003 fa49 	bl	800c18c <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8008cfa:	f002 f9f5 	bl	800b0e8 <MX_SPI2_Init>
  MX_SPI1_Init();
 8008cfe:	f002 f9a1 	bl	800b044 <MX_SPI1_Init>
  MX_SPI3_Init();
 8008d02:	f002 fa45 	bl	800b190 <MX_SPI3_Init>
  MX_UART4_Init();
 8008d06:	f003 f93d 	bl	800bf84 <MX_UART4_Init>
  MX_UART5_Init();
 8008d0a:	f003 f99d 	bl	800c048 <MX_UART5_Init>
  MX_TIM5_Init();
 8008d0e:	f002 ff59 	bl	800bbc4 <MX_TIM5_Init>
  MX_I2C1_Init();
 8008d12:	f7ff fe95 	bl	8008a40 <MX_I2C1_Init>
  MX_DMA_Init();
 8008d16:	f7ff fdbd 	bl	8008894 <MX_DMA_Init>
  MX_ADC1_Init();
 8008d1a:	f7ff fcf3 	bl	8008704 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8008d1e:	f003 fa0b 	bl	800c138 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8008d22:	f002 fffd 	bl	800bd20 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3); //Buzzer
 8008d26:	488e      	ldr	r0, [pc, #568]	; (8008f60 <main+0x2a0>)
 8008d28:	f7ff ff00 	bl	8008b2c <LL_TIM_EnableCounter>

  LL_USART_EnableIT_RXNE(USART6); //Debug UART
 8008d2c:	488d      	ldr	r0, [pc, #564]	; (8008f64 <main+0x2a4>)
 8008d2e:	f7ff ff53 	bl	8008bd8 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART4); //GPS
 8008d32:	488d      	ldr	r0, [pc, #564]	; (8008f68 <main+0x2a8>)
 8008d34:	f7ff ff50 	bl	8008bd8 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5); //FS-iA6B
 8008d38:	488c      	ldr	r0, [pc, #560]	; (8008f6c <main+0x2ac>)
 8008d3a:	f7ff ff4d 	bl	8008bd8 <LL_USART_EnableIT_RXNE>

  LL_TIM_EnableCounter(TIM5); //Motor PWM
 8008d3e:	488c      	ldr	r0, [pc, #560]	; (8008f70 <main+0x2b0>)
 8008d40:	f7ff fef4 	bl	8008b2c <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);
 8008d44:	2101      	movs	r1, #1
 8008d46:	488a      	ldr	r0, [pc, #552]	; (8008f70 <main+0x2b0>)
 8008d48:	f7ff ff00 	bl	8008b4c <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 8008d4c:	2110      	movs	r1, #16
 8008d4e:	4888      	ldr	r0, [pc, #544]	; (8008f70 <main+0x2b0>)
 8008d50:	f7ff fefc 	bl	8008b4c <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 8008d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008d58:	4885      	ldr	r0, [pc, #532]	; (8008f70 <main+0x2b0>)
 8008d5a:	f7ff fef7 	bl	8008b4c <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 8008d5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008d62:	4883      	ldr	r0, [pc, #524]	; (8008f70 <main+0x2b0>)
 8008d64:	f7ff fef2 	bl	8008b4c <LL_TIM_CC_EnableChannel>

  HAL_ADC_Start_DMA(&hadc1, &adcVal, 1); //Battery ADC
 8008d68:	1dbb      	adds	r3, r7, #6
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	4881      	ldr	r0, [pc, #516]	; (8008f74 <main+0x2b4>)
 8008d70:	f7f8 f9c2 	bl	80010f8 <HAL_ADC_Start_DMA>

  HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1); //Telemetry
 8008d74:	2201      	movs	r2, #1
 8008d76:	4980      	ldr	r1, [pc, #512]	; (8008f78 <main+0x2b8>)
 8008d78:	4880      	ldr	r0, [pc, #512]	; (8008f7c <main+0x2bc>)
 8008d7a:	f7fb f8e6 	bl	8003f4a <HAL_UART_Receive_IT>

  LL_TIM_EnableCounter(TIM7); //10Hz, 50Hz, 1kHz loop
 8008d7e:	4880      	ldr	r0, [pc, #512]	; (8008f80 <main+0x2c0>)
 8008d80:	f7ff fed4 	bl	8008b2c <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7);
 8008d84:	487e      	ldr	r0, [pc, #504]	; (8008f80 <main+0x2c0>)
 8008d86:	f7ff ff04 	bl	8008b92 <LL_TIM_EnableIT_UPDATE>


  TIM3->PSC = 1000;
 8008d8a:	4b75      	ldr	r3, [pc, #468]	; (8008f60 <main+0x2a0>)
 8008d8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d90:	629a      	str	r2, [r3, #40]	; 0x28
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008d92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008d96:	4872      	ldr	r0, [pc, #456]	; (8008f60 <main+0x2a0>)
 8008d98:	f7ff fed8 	bl	8008b4c <LL_TIM_CC_EnableChannel>
  HAL_Delay(60);
 8008d9c:	203c      	movs	r0, #60	; 0x3c
 8008d9e:	f7f8 f945 	bl	800102c <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008da2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008da6:	486e      	ldr	r0, [pc, #440]	; (8008f60 <main+0x2a0>)
 8008da8:	f7ff fee1 	bl	8008b6e <LL_TIM_CC_DisableChannel>
  HAL_Delay(60);
 8008dac:	203c      	movs	r0, #60	; 0x3c
 8008dae:	f7f8 f93d 	bl	800102c <HAL_Delay>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008db2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008db6:	486a      	ldr	r0, [pc, #424]	; (8008f60 <main+0x2a0>)
 8008db8:	f7ff fec8 	bl	8008b4c <LL_TIM_CC_EnableChannel>
  HAL_Delay(60);
 8008dbc:	203c      	movs	r0, #60	; 0x3c
 8008dbe:	f7f8 f935 	bl	800102c <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008dc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008dc6:	4866      	ldr	r0, [pc, #408]	; (8008f60 <main+0x2a0>)
 8008dc8:	f7ff fed1 	bl	8008b6e <LL_TIM_CC_DisableChannel>
  HAL_Delay(60);
 8008dcc:	203c      	movs	r0, #60	; 0x3c
 8008dce:	f7f8 f92d 	bl	800102c <HAL_Delay>
  printf("Checking sensor connection..\n");
 8008dd2:	486c      	ldr	r0, [pc, #432]	; (8008f84 <main+0x2c4>)
 8008dd4:	f003 ffb6 	bl	800cd44 <puts>


  if(BNO080_Initialization() != 0)
 8008dd8:	f7fd fac2 	bl	8006360 <BNO080_Initialization>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d03a      	beq.n	8008e58 <main+0x198>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008de2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008de6:	485e      	ldr	r0, [pc, #376]	; (8008f60 <main+0x2a0>)
 8008de8:	f7ff feb0 	bl	8008b4c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 8008dec:	4b5c      	ldr	r3, [pc, #368]	; (8008f60 <main+0x2a0>)
 8008dee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008df2:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8008df4:	2064      	movs	r0, #100	; 0x64
 8008df6:	f7f8 f919 	bl	800102c <HAL_Delay>
	  TIM3->PSC = 1500;
 8008dfa:	4b59      	ldr	r3, [pc, #356]	; (8008f60 <main+0x2a0>)
 8008dfc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008e00:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8008e02:	2064      	movs	r0, #100	; 0x64
 8008e04:	f7f8 f912 	bl	800102c <HAL_Delay>
	  TIM3->PSC = 2000;
 8008e08:	4b55      	ldr	r3, [pc, #340]	; (8008f60 <main+0x2a0>)
 8008e0a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008e0e:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8008e10:	2064      	movs	r0, #100	; 0x64
 8008e12:	f7f8 f90b 	bl	800102c <HAL_Delay>

	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008e16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008e1a:	4851      	ldr	r0, [pc, #324]	; (8008f60 <main+0x2a0>)
 8008e1c:	f7ff fea7 	bl	8008b6e <LL_TIM_CC_DisableChannel>

	  printf("\nBNO080 failed. Program shutting down...\n");
 8008e20:	4859      	ldr	r0, [pc, #356]	; (8008f88 <main+0x2c8>)
 8008e22:	f003 ff8f 	bl	800cd44 <puts>
	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008e26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008e2a:	484d      	ldr	r0, [pc, #308]	; (8008f60 <main+0x2a0>)
 8008e2c:	f7ff fe9f 	bl	8008b6e <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8008e30:	2101      	movs	r1, #1
 8008e32:	4856      	ldr	r0, [pc, #344]	; (8008f8c <main+0x2cc>)
 8008e34:	f7ff ff0c 	bl	8008c50 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8008e38:	20c8      	movs	r0, #200	; 0xc8
 8008e3a:	f7f8 f8f7 	bl	800102c <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008e42:	4847      	ldr	r0, [pc, #284]	; (8008f60 <main+0x2a0>)
 8008e44:	f7ff fe82 	bl	8008b4c <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8008e48:	2101      	movs	r1, #1
 8008e4a:	4850      	ldr	r0, [pc, #320]	; (8008f8c <main+0x2cc>)
 8008e4c:	f7ff ff00 	bl	8008c50 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8008e50:	20c8      	movs	r0, #200	; 0xc8
 8008e52:	f7f8 f8eb 	bl	800102c <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008e56:	e7e6      	b.n	8008e26 <main+0x166>
	  }
  }
  //BNO080_enableRotationVector(2500);
  BNO080_enableGameRotationVector(2500);
 8008e58:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8008e5c:	f7fd fd91 	bl	8006982 <BNO080_enableGameRotationVector>

  if(ICM20602_Initialization() != 0)
 8008e60:	f7fe fa30 	bl	80072c4 <ICM20602_Initialization>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d03a      	beq.n	8008ee0 <main+0x220>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008e6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008e6e:	483c      	ldr	r0, [pc, #240]	; (8008f60 <main+0x2a0>)
 8008e70:	f7ff fe6c 	bl	8008b4c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 8008e74:	4b3a      	ldr	r3, [pc, #232]	; (8008f60 <main+0x2a0>)
 8008e76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e7a:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8008e7c:	2064      	movs	r0, #100	; 0x64
 8008e7e:	f7f8 f8d5 	bl	800102c <HAL_Delay>
	  TIM3->PSC = 1500;
 8008e82:	4b37      	ldr	r3, [pc, #220]	; (8008f60 <main+0x2a0>)
 8008e84:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008e88:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8008e8a:	2064      	movs	r0, #100	; 0x64
 8008e8c:	f7f8 f8ce 	bl	800102c <HAL_Delay>
	  TIM3->PSC = 2000;
 8008e90:	4b33      	ldr	r3, [pc, #204]	; (8008f60 <main+0x2a0>)
 8008e92:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008e96:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8008e98:	2064      	movs	r0, #100	; 0x64
 8008e9a:	f7f8 f8c7 	bl	800102c <HAL_Delay>

	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008e9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008ea2:	482f      	ldr	r0, [pc, #188]	; (8008f60 <main+0x2a0>)
 8008ea4:	f7ff fe63 	bl	8008b6e <LL_TIM_CC_DisableChannel>

	  printf("\nICM-20602 failed. Program shutting down...\n");
 8008ea8:	4839      	ldr	r0, [pc, #228]	; (8008f90 <main+0x2d0>)
 8008eaa:	f003 ff4b 	bl	800cd44 <puts>
	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008eae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008eb2:	482b      	ldr	r0, [pc, #172]	; (8008f60 <main+0x2a0>)
 8008eb4:	f7ff fe5b 	bl	8008b6e <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8008eb8:	2102      	movs	r1, #2
 8008eba:	4834      	ldr	r0, [pc, #208]	; (8008f8c <main+0x2cc>)
 8008ebc:	f7ff fec8 	bl	8008c50 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8008ec0:	20c8      	movs	r0, #200	; 0xc8
 8008ec2:	f7f8 f8b3 	bl	800102c <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008ec6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008eca:	4825      	ldr	r0, [pc, #148]	; (8008f60 <main+0x2a0>)
 8008ecc:	f7ff fe3e 	bl	8008b4c <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 8008ed0:	2102      	movs	r1, #2
 8008ed2:	482e      	ldr	r0, [pc, #184]	; (8008f8c <main+0x2cc>)
 8008ed4:	f7ff febc 	bl	8008c50 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8008ed8:	20c8      	movs	r0, #200	; 0xc8
 8008eda:	f7f8 f8a7 	bl	800102c <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008ede:	e7e6      	b.n	8008eae <main+0x1ee>
	  }
  }

  if(LPS22HH_Initialization() != 0)
 8008ee0:	f7fe fc7a 	bl	80077d8 <LPS22HH_Initialization>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d056      	beq.n	8008f98 <main+0x2d8>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008eea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008eee:	481c      	ldr	r0, [pc, #112]	; (8008f60 <main+0x2a0>)
 8008ef0:	f7ff fe2c 	bl	8008b4c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 8008ef4:	4b1a      	ldr	r3, [pc, #104]	; (8008f60 <main+0x2a0>)
 8008ef6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008efa:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8008efc:	2064      	movs	r0, #100	; 0x64
 8008efe:	f7f8 f895 	bl	800102c <HAL_Delay>
	  TIM3->PSC = 1500;
 8008f02:	4b17      	ldr	r3, [pc, #92]	; (8008f60 <main+0x2a0>)
 8008f04:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008f08:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8008f0a:	2064      	movs	r0, #100	; 0x64
 8008f0c:	f7f8 f88e 	bl	800102c <HAL_Delay>
	  TIM3->PSC = 2000;
 8008f10:	4b13      	ldr	r3, [pc, #76]	; (8008f60 <main+0x2a0>)
 8008f12:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008f16:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 8008f18:	2064      	movs	r0, #100	; 0x64
 8008f1a:	f7f8 f887 	bl	800102c <HAL_Delay>

	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008f22:	480f      	ldr	r0, [pc, #60]	; (8008f60 <main+0x2a0>)
 8008f24:	f7ff fe23 	bl	8008b6e <LL_TIM_CC_DisableChannel>

	  printf("\nLPS22HH failed. Program shutting down...\n");
 8008f28:	481a      	ldr	r0, [pc, #104]	; (8008f94 <main+0x2d4>)
 8008f2a:	f003 ff0b 	bl	800cd44 <puts>
	  while(1)
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008f32:	480b      	ldr	r0, [pc, #44]	; (8008f60 <main+0x2a0>)
 8008f34:	f7ff fe1b 	bl	8008b6e <LL_TIM_CC_DisableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8008f38:	2104      	movs	r1, #4
 8008f3a:	4814      	ldr	r0, [pc, #80]	; (8008f8c <main+0x2cc>)
 8008f3c:	f7ff fe88 	bl	8008c50 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8008f40:	20c8      	movs	r0, #200	; 0xc8
 8008f42:	f7f8 f873 	bl	800102c <HAL_Delay>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008f46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008f4a:	4805      	ldr	r0, [pc, #20]	; (8008f60 <main+0x2a0>)
 8008f4c:	f7ff fdfe 	bl	8008b4c <LL_TIM_CC_EnableChannel>
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8008f50:	2104      	movs	r1, #4
 8008f52:	480e      	ldr	r0, [pc, #56]	; (8008f8c <main+0x2cc>)
 8008f54:	f7ff fe7c 	bl	8008c50 <LL_GPIO_TogglePin>
		  HAL_Delay(200);
 8008f58:	20c8      	movs	r0, #200	; 0xc8
 8008f5a:	f7f8 f867 	bl	800102c <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8008f5e:	e7e6      	b.n	8008f2e <main+0x26e>
 8008f60:	40000400 	.word	0x40000400
 8008f64:	40011400 	.word	0x40011400
 8008f68:	40004c00 	.word	0x40004c00
 8008f6c:	40005000 	.word	0x40005000
 8008f70:	40000c00 	.word	0x40000c00
 8008f74:	20000504 	.word	0x20000504
 8008f78:	20000216 	.word	0x20000216
 8008f7c:	20000690 	.word	0x20000690
 8008f80:	40001400 	.word	0x40001400
 8008f84:	0800fbf8 	.word	0x0800fbf8
 8008f88:	0800fc18 	.word	0x0800fc18
 8008f8c:	40020800 	.word	0x40020800
 8008f90:	0800fc44 	.word	0x0800fc44
 8008f94:	0800fc70 	.word	0x0800fc70
	  }
  }

  printf("All sensors OK!\n\n");
 8008f98:	48c2      	ldr	r0, [pc, #776]	; (80092a4 <main+0x5e4>)
 8008f9a:	f003 fed3 	bl	800cd44 <puts>

  M8N_Initialization();
 8008f9e:	f7fe fe8f 	bl	8007cc0 <M8N_Initialization>



  ICM20602_Writebyte(0x13, (gyro_x_offset*-2)>>8);
 8008fa2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	07db      	lsls	r3, r3, #31
 8008faa:	1a9b      	subs	r3, r3, r2
 8008fac:	005b      	lsls	r3, r3, #1
 8008fae:	121b      	asrs	r3, r3, #8
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	2013      	movs	r0, #19
 8008fb4:	f7fe f964 	bl	8007280 <ICM20602_Writebyte>
  ICM20602_Writebyte(0x14, (gyro_x_offset*-2));
 8008fb8:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	07db      	lsls	r3, r3, #31
 8008fc0:	1a9b      	subs	r3, r3, r2
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	2014      	movs	r0, #20
 8008fc8:	f7fe f95a 	bl	8007280 <ICM20602_Writebyte>

  ICM20602_Writebyte(0x15, (gyro_y_offset*-2)>>8);
 8008fcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	07db      	lsls	r3, r3, #31
 8008fd4:	1a9b      	subs	r3, r3, r2
 8008fd6:	005b      	lsls	r3, r3, #1
 8008fd8:	121b      	asrs	r3, r3, #8
 8008fda:	4619      	mov	r1, r3
 8008fdc:	2015      	movs	r0, #21
 8008fde:	f7fe f94f 	bl	8007280 <ICM20602_Writebyte>
  ICM20602_Writebyte(0x16, (gyro_y_offset*-2));
 8008fe2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	07db      	lsls	r3, r3, #31
 8008fea:	1a9b      	subs	r3, r3, r2
 8008fec:	005b      	lsls	r3, r3, #1
 8008fee:	4619      	mov	r1, r3
 8008ff0:	2016      	movs	r0, #22
 8008ff2:	f7fe f945 	bl	8007280 <ICM20602_Writebyte>

  ICM20602_Writebyte(0x17, (gyro_z_offset*-2)>>8);
 8008ff6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	07db      	lsls	r3, r3, #31
 8008ffe:	1a9b      	subs	r3, r3, r2
 8009000:	005b      	lsls	r3, r3, #1
 8009002:	121b      	asrs	r3, r3, #8
 8009004:	4619      	mov	r1, r3
 8009006:	2017      	movs	r0, #23
 8009008:	f7fe f93a 	bl	8007280 <ICM20602_Writebyte>
  ICM20602_Writebyte(0x18, (gyro_z_offset*-2));
 800900c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8009010:	4613      	mov	r3, r2
 8009012:	07db      	lsls	r3, r3, #31
 8009014:	1a9b      	subs	r3, r3, r2
 8009016:	005b      	lsls	r3, r3, #1
 8009018:	4619      	mov	r1, r3
 800901a:	2018      	movs	r0, #24
 800901c:	f7fe f930 	bl	8007280 <ICM20602_Writebyte>

  printf("Loading PID Gain...\n");
 8009020:	48a1      	ldr	r0, [pc, #644]	; (80092a8 <main+0x5e8>)
 8009022:	f003 fe8f 	bl	800cd44 <puts>


  if(EP_PIDGain_Read(0, &roll.in.kp, &roll.in.ki, &roll.in.kd) != 0 ||
 8009026:	4ba1      	ldr	r3, [pc, #644]	; (80092ac <main+0x5ec>)
 8009028:	4aa1      	ldr	r2, [pc, #644]	; (80092b0 <main+0x5f0>)
 800902a:	49a2      	ldr	r1, [pc, #648]	; (80092b4 <main+0x5f4>)
 800902c:	2000      	movs	r0, #0
 800902e:	f7fc ff77 	bl	8005f20 <EP_PIDGain_Read>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d12c      	bne.n	8009092 <main+0x3d2>
		  EP_PIDGain_Read(1, &roll.out.kp, &roll.out.ki, &roll.out.kd) != 0 ||
 8009038:	4b9f      	ldr	r3, [pc, #636]	; (80092b8 <main+0x5f8>)
 800903a:	4aa0      	ldr	r2, [pc, #640]	; (80092bc <main+0x5fc>)
 800903c:	49a0      	ldr	r1, [pc, #640]	; (80092c0 <main+0x600>)
 800903e:	2001      	movs	r0, #1
 8009040:	f7fc ff6e 	bl	8005f20 <EP_PIDGain_Read>
 8009044:	4603      	mov	r3, r0
  if(EP_PIDGain_Read(0, &roll.in.kp, &roll.in.ki, &roll.in.kd) != 0 ||
 8009046:	2b00      	cmp	r3, #0
 8009048:	d123      	bne.n	8009092 <main+0x3d2>
		  EP_PIDGain_Read(2, &pitch.in.kp, &pitch.in.ki, &pitch.in.kd) != 0 ||
 800904a:	4b9e      	ldr	r3, [pc, #632]	; (80092c4 <main+0x604>)
 800904c:	4a9e      	ldr	r2, [pc, #632]	; (80092c8 <main+0x608>)
 800904e:	499f      	ldr	r1, [pc, #636]	; (80092cc <main+0x60c>)
 8009050:	2002      	movs	r0, #2
 8009052:	f7fc ff65 	bl	8005f20 <EP_PIDGain_Read>
 8009056:	4603      	mov	r3, r0
		  EP_PIDGain_Read(1, &roll.out.kp, &roll.out.ki, &roll.out.kd) != 0 ||
 8009058:	2b00      	cmp	r3, #0
 800905a:	d11a      	bne.n	8009092 <main+0x3d2>
		  EP_PIDGain_Read(3, &pitch.out.kp, &pitch.out.ki, &pitch.out.kd) != 0 ||
 800905c:	4b9c      	ldr	r3, [pc, #624]	; (80092d0 <main+0x610>)
 800905e:	4a9d      	ldr	r2, [pc, #628]	; (80092d4 <main+0x614>)
 8009060:	499d      	ldr	r1, [pc, #628]	; (80092d8 <main+0x618>)
 8009062:	2003      	movs	r0, #3
 8009064:	f7fc ff5c 	bl	8005f20 <EP_PIDGain_Read>
 8009068:	4603      	mov	r3, r0
		  EP_PIDGain_Read(2, &pitch.in.kp, &pitch.in.ki, &pitch.in.kd) != 0 ||
 800906a:	2b00      	cmp	r3, #0
 800906c:	d111      	bne.n	8009092 <main+0x3d2>
		  EP_PIDGain_Read(4, &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd) != 0 ||
 800906e:	4b9b      	ldr	r3, [pc, #620]	; (80092dc <main+0x61c>)
 8009070:	4a9b      	ldr	r2, [pc, #620]	; (80092e0 <main+0x620>)
 8009072:	499c      	ldr	r1, [pc, #624]	; (80092e4 <main+0x624>)
 8009074:	2004      	movs	r0, #4
 8009076:	f7fc ff53 	bl	8005f20 <EP_PIDGain_Read>
 800907a:	4603      	mov	r3, r0
		  EP_PIDGain_Read(3, &pitch.out.kp, &pitch.out.ki, &pitch.out.kd) != 0 ||
 800907c:	2b00      	cmp	r3, #0
 800907e:	d108      	bne.n	8009092 <main+0x3d2>
		  EP_PIDGain_Read(5, &yaw_rate.kp, &yaw_rate.ki, &yaw_rate.kd) != 0)
 8009080:	4b99      	ldr	r3, [pc, #612]	; (80092e8 <main+0x628>)
 8009082:	4a9a      	ldr	r2, [pc, #616]	; (80092ec <main+0x62c>)
 8009084:	499a      	ldr	r1, [pc, #616]	; (80092f0 <main+0x630>)
 8009086:	2005      	movs	r0, #5
 8009088:	f7fc ff4a 	bl	8005f20 <EP_PIDGain_Read>
 800908c:	4603      	mov	r3, r0
		  EP_PIDGain_Read(4, &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd) != 0 ||
 800908e:	2b00      	cmp	r3, #0
 8009090:	d026      	beq.n	80090e0 <main+0x420>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009096:	4897      	ldr	r0, [pc, #604]	; (80092f4 <main+0x634>)
 8009098:	f7ff fd58 	bl	8008b4c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 800909c:	4b95      	ldr	r3, [pc, #596]	; (80092f4 <main+0x634>)
 800909e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80090a2:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80090a4:	2064      	movs	r0, #100	; 0x64
 80090a6:	f7f7 ffc1 	bl	800102c <HAL_Delay>
	  TIM3->PSC = 1500;
 80090aa:	4b92      	ldr	r3, [pc, #584]	; (80092f4 <main+0x634>)
 80090ac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80090b0:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80090b2:	2064      	movs	r0, #100	; 0x64
 80090b4:	f7f7 ffba 	bl	800102c <HAL_Delay>
	  TIM3->PSC = 2000;
 80090b8:	4b8e      	ldr	r3, [pc, #568]	; (80092f4 <main+0x634>)
 80090ba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80090be:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(100);
 80090c0:	2064      	movs	r0, #100	; 0x64
 80090c2:	f7f7 ffb3 	bl	800102c <HAL_Delay>

	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80090c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80090ca:	488a      	ldr	r0, [pc, #552]	; (80092f4 <main+0x634>)
 80090cc:	f7ff fd4f 	bl	8008b6e <LL_TIM_CC_DisableChannel>

	  HAL_Delay(500);
 80090d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090d4:	f7f7 ffaa 	bl	800102c <HAL_Delay>
	  printf("\nCouldn't load PID gain.\n");
 80090d8:	4887      	ldr	r0, [pc, #540]	; (80092f8 <main+0x638>)
 80090da:	f003 fe33 	bl	800cd44 <puts>
 80090de:	e098      	b.n	8009212 <main+0x552>
  }
  else
  {
	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll.in.kp, roll.in.ki, roll.in.kd);
 80090e0:	4b74      	ldr	r3, [pc, #464]	; (80092b4 <main+0x5f4>)
 80090e2:	edd3 7a00 	vldr	s15, [r3]
 80090e6:	4b73      	ldr	r3, [pc, #460]	; (80092b4 <main+0x5f4>)
 80090e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80090ec:	4b71      	ldr	r3, [pc, #452]	; (80092b4 <main+0x5f4>)
 80090ee:	edd3 6a02 	vldr	s13, [r3, #8]
 80090f2:	eeb0 1a66 	vmov.f32	s2, s13
 80090f6:	eef0 0a47 	vmov.f32	s1, s14
 80090fa:	eeb0 0a67 	vmov.f32	s0, s15
 80090fe:	2100      	movs	r1, #0
 8009100:	487e      	ldr	r0, [pc, #504]	; (80092fc <main+0x63c>)
 8009102:	f001 feeb 	bl	800aedc <Encode_Msg_PID_Gain>
	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8009106:	230a      	movs	r3, #10
 8009108:	2214      	movs	r2, #20
 800910a:	497c      	ldr	r1, [pc, #496]	; (80092fc <main+0x63c>)
 800910c:	487c      	ldr	r0, [pc, #496]	; (8009300 <main+0x640>)
 800910e:	f7fa fe3e 	bl	8003d8e <HAL_UART_Transmit>
	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll.out.kp, roll.out.ki, roll.out.kd);
 8009112:	4b68      	ldr	r3, [pc, #416]	; (80092b4 <main+0x5f4>)
 8009114:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009118:	4b66      	ldr	r3, [pc, #408]	; (80092b4 <main+0x5f4>)
 800911a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800911e:	4b65      	ldr	r3, [pc, #404]	; (80092b4 <main+0x5f4>)
 8009120:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8009124:	eeb0 1a66 	vmov.f32	s2, s13
 8009128:	eef0 0a47 	vmov.f32	s1, s14
 800912c:	eeb0 0a67 	vmov.f32	s0, s15
 8009130:	2101      	movs	r1, #1
 8009132:	4872      	ldr	r0, [pc, #456]	; (80092fc <main+0x63c>)
 8009134:	f001 fed2 	bl	800aedc <Encode_Msg_PID_Gain>
	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8009138:	230a      	movs	r3, #10
 800913a:	2214      	movs	r2, #20
 800913c:	496f      	ldr	r1, [pc, #444]	; (80092fc <main+0x63c>)
 800913e:	4870      	ldr	r0, [pc, #448]	; (8009300 <main+0x640>)
 8009140:	f7fa fe25 	bl	8003d8e <HAL_UART_Transmit>
	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8009144:	4b61      	ldr	r3, [pc, #388]	; (80092cc <main+0x60c>)
 8009146:	edd3 7a00 	vldr	s15, [r3]
 800914a:	4b60      	ldr	r3, [pc, #384]	; (80092cc <main+0x60c>)
 800914c:	ed93 7a01 	vldr	s14, [r3, #4]
 8009150:	4b5e      	ldr	r3, [pc, #376]	; (80092cc <main+0x60c>)
 8009152:	edd3 6a02 	vldr	s13, [r3, #8]
 8009156:	eeb0 1a66 	vmov.f32	s2, s13
 800915a:	eef0 0a47 	vmov.f32	s1, s14
 800915e:	eeb0 0a67 	vmov.f32	s0, s15
 8009162:	2102      	movs	r1, #2
 8009164:	4865      	ldr	r0, [pc, #404]	; (80092fc <main+0x63c>)
 8009166:	f001 feb9 	bl	800aedc <Encode_Msg_PID_Gain>
	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800916a:	230a      	movs	r3, #10
 800916c:	2214      	movs	r2, #20
 800916e:	4963      	ldr	r1, [pc, #396]	; (80092fc <main+0x63c>)
 8009170:	4863      	ldr	r0, [pc, #396]	; (8009300 <main+0x640>)
 8009172:	f7fa fe0c 	bl	8003d8e <HAL_UART_Transmit>
	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8009176:	4b55      	ldr	r3, [pc, #340]	; (80092cc <main+0x60c>)
 8009178:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800917c:	4b53      	ldr	r3, [pc, #332]	; (80092cc <main+0x60c>)
 800917e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8009182:	4b52      	ldr	r3, [pc, #328]	; (80092cc <main+0x60c>)
 8009184:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8009188:	eeb0 1a66 	vmov.f32	s2, s13
 800918c:	eef0 0a47 	vmov.f32	s1, s14
 8009190:	eeb0 0a67 	vmov.f32	s0, s15
 8009194:	2103      	movs	r1, #3
 8009196:	4859      	ldr	r0, [pc, #356]	; (80092fc <main+0x63c>)
 8009198:	f001 fea0 	bl	800aedc <Encode_Msg_PID_Gain>
	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800919c:	230a      	movs	r3, #10
 800919e:	2214      	movs	r2, #20
 80091a0:	4956      	ldr	r1, [pc, #344]	; (80092fc <main+0x63c>)
 80091a2:	4857      	ldr	r0, [pc, #348]	; (8009300 <main+0x640>)
 80091a4:	f7fa fdf3 	bl	8003d8e <HAL_UART_Transmit>
	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 80091a8:	4b4e      	ldr	r3, [pc, #312]	; (80092e4 <main+0x624>)
 80091aa:	edd3 7a00 	vldr	s15, [r3]
 80091ae:	4b4d      	ldr	r3, [pc, #308]	; (80092e4 <main+0x624>)
 80091b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80091b4:	4b4b      	ldr	r3, [pc, #300]	; (80092e4 <main+0x624>)
 80091b6:	edd3 6a02 	vldr	s13, [r3, #8]
 80091ba:	eeb0 1a66 	vmov.f32	s2, s13
 80091be:	eef0 0a47 	vmov.f32	s1, s14
 80091c2:	eeb0 0a67 	vmov.f32	s0, s15
 80091c6:	2104      	movs	r1, #4
 80091c8:	484c      	ldr	r0, [pc, #304]	; (80092fc <main+0x63c>)
 80091ca:	f001 fe87 	bl	800aedc <Encode_Msg_PID_Gain>
	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80091ce:	230a      	movs	r3, #10
 80091d0:	2214      	movs	r2, #20
 80091d2:	494a      	ldr	r1, [pc, #296]	; (80092fc <main+0x63c>)
 80091d4:	484a      	ldr	r0, [pc, #296]	; (8009300 <main+0x640>)
 80091d6:	f7fa fdda 	bl	8003d8e <HAL_UART_Transmit>
	  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 80091da:	4b45      	ldr	r3, [pc, #276]	; (80092f0 <main+0x630>)
 80091dc:	edd3 7a00 	vldr	s15, [r3]
 80091e0:	4b43      	ldr	r3, [pc, #268]	; (80092f0 <main+0x630>)
 80091e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80091e6:	4b42      	ldr	r3, [pc, #264]	; (80092f0 <main+0x630>)
 80091e8:	edd3 6a02 	vldr	s13, [r3, #8]
 80091ec:	eeb0 1a66 	vmov.f32	s2, s13
 80091f0:	eef0 0a47 	vmov.f32	s1, s14
 80091f4:	eeb0 0a67 	vmov.f32	s0, s15
 80091f8:	2105      	movs	r1, #5
 80091fa:	4840      	ldr	r0, [pc, #256]	; (80092fc <main+0x63c>)
 80091fc:	f001 fe6e 	bl	800aedc <Encode_Msg_PID_Gain>
	  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8009200:	230a      	movs	r3, #10
 8009202:	2214      	movs	r2, #20
 8009204:	493d      	ldr	r1, [pc, #244]	; (80092fc <main+0x63c>)
 8009206:	483e      	ldr	r0, [pc, #248]	; (8009300 <main+0x640>)
 8009208:	f7fa fdc1 	bl	8003d8e <HAL_UART_Transmit>
	  printf("\nAll gains OK!\n\n");
 800920c:	483d      	ldr	r0, [pc, #244]	; (8009304 <main+0x644>)
 800920e:	f003 fd99 	bl	800cd44 <puts>
  }




  while(Is_iBus_Received() == 0)
 8009212:	e013      	b.n	800923c <main+0x57c>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009218:	4836      	ldr	r0, [pc, #216]	; (80092f4 <main+0x634>)
 800921a:	f7ff fc97 	bl	8008b4c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 3000;
 800921e:	4b35      	ldr	r3, [pc, #212]	; (80092f4 <main+0x634>)
 8009220:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009224:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8009226:	20c8      	movs	r0, #200	; 0xc8
 8009228:	f7f7 ff00 	bl	800102c <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800922c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009230:	4830      	ldr	r0, [pc, #192]	; (80092f4 <main+0x634>)
 8009232:	f7ff fc9c 	bl	8008b6e <LL_TIM_CC_DisableChannel>
	  HAL_Delay(200);
 8009236:	20c8      	movs	r0, #200	; 0xc8
 8009238:	f7f7 fef8 	bl	800102c <HAL_Delay>
  while(Is_iBus_Received() == 0)
 800923c:	f001 fa16 	bl	800a66c <Is_iBus_Received>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d0e6      	beq.n	8009214 <main+0x554>
  }

  if(iBus.SwC == 2000)
 8009246:	4b30      	ldr	r3, [pc, #192]	; (8009308 <main+0x648>)
 8009248:	899b      	ldrh	r3, [r3, #12]
 800924a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800924e:	d17d      	bne.n	800934c <main+0x68c>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009250:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009254:	4827      	ldr	r0, [pc, #156]	; (80092f4 <main+0x634>)
 8009256:	f7ff fc79 	bl	8008b4c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1500;
 800925a:	4b26      	ldr	r3, [pc, #152]	; (80092f4 <main+0x634>)
 800925c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009260:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8009262:	20c8      	movs	r0, #200	; 0xc8
 8009264:	f7f7 fee2 	bl	800102c <HAL_Delay>
	  TIM3->PSC = 2000;
 8009268:	4b22      	ldr	r3, [pc, #136]	; (80092f4 <main+0x634>)
 800926a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800926e:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8009270:	20c8      	movs	r0, #200	; 0xc8
 8009272:	f7f7 fedb 	bl	800102c <HAL_Delay>
	  TIM3->PSC = 1500;
 8009276:	4b1f      	ldr	r3, [pc, #124]	; (80092f4 <main+0x634>)
 8009278:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800927c:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 800927e:	20c8      	movs	r0, #200	; 0xc8
 8009280:	f7f7 fed4 	bl	800102c <HAL_Delay>
	  TIM3->PSC = 2000;
 8009284:	4b1b      	ldr	r3, [pc, #108]	; (80092f4 <main+0x634>)
 8009286:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800928a:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 800928c:	20c8      	movs	r0, #200	; 0xc8
 800928e:	f7f7 fecd 	bl	800102c <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009292:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009296:	4817      	ldr	r0, [pc, #92]	; (80092f4 <main+0x634>)
 8009298:	f7ff fc69 	bl	8008b6e <LL_TIM_CC_DisableChannel>

	  ESC_Calibration();
 800929c:	f001 f9b8 	bl	800a610 <ESC_Calibration>
	  while(iBus.SwC != 1000)
 80092a0:	e04e      	b.n	8009340 <main+0x680>
 80092a2:	bf00      	nop
 80092a4:	0800fc9c 	.word	0x0800fc9c
 80092a8:	0800fcb0 	.word	0x0800fcb0
 80092ac:	20000490 	.word	0x20000490
 80092b0:	2000048c 	.word	0x2000048c
 80092b4:	20000488 	.word	0x20000488
 80092b8:	200004c8 	.word	0x200004c8
 80092bc:	200004c4 	.word	0x200004c4
 80092c0:	200004c0 	.word	0x200004c0
 80092c4:	20000420 	.word	0x20000420
 80092c8:	2000041c 	.word	0x2000041c
 80092cc:	20000418 	.word	0x20000418
 80092d0:	20000458 	.word	0x20000458
 80092d4:	20000454 	.word	0x20000454
 80092d8:	20000450 	.word	0x20000450
 80092dc:	200003e8 	.word	0x200003e8
 80092e0:	200003e4 	.word	0x200003e4
 80092e4:	200003e0 	.word	0x200003e0
 80092e8:	200003b0 	.word	0x200003b0
 80092ec:	200003ac 	.word	0x200003ac
 80092f0:	200003a8 	.word	0x200003a8
 80092f4:	40000400 	.word	0x40000400
 80092f8:	0800fcc4 	.word	0x0800fcc4
 80092fc:	20000624 	.word	0x20000624
 8009300:	20000690 	.word	0x20000690
 8009304:	0800fce0 	.word	0x0800fce0
 8009308:	2000031c 	.word	0x2000031c
	  {
		  Is_iBus_Received();
 800930c:	f001 f9ae 	bl	800a66c <Is_iBus_Received>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009310:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009314:	48c8      	ldr	r0, [pc, #800]	; (8009638 <main+0x978>)
 8009316:	f7ff fc19 	bl	8008b4c <LL_TIM_CC_EnableChannel>

		  TIM3->PSC = 1500;
 800931a:	4bc7      	ldr	r3, [pc, #796]	; (8009638 <main+0x978>)
 800931c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009320:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 8009322:	20c8      	movs	r0, #200	; 0xc8
 8009324:	f7f7 fe82 	bl	800102c <HAL_Delay>
		  TIM3->PSC = 2000;
 8009328:	4bc3      	ldr	r3, [pc, #780]	; (8009638 <main+0x978>)
 800932a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800932e:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 8009330:	20c8      	movs	r0, #200	; 0xc8
 8009332:	f7f7 fe7b 	bl	800102c <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009336:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800933a:	48bf      	ldr	r0, [pc, #764]	; (8009638 <main+0x978>)
 800933c:	f7ff fc17 	bl	8008b6e <LL_TIM_CC_DisableChannel>
	  while(iBus.SwC != 1000)
 8009340:	4bbe      	ldr	r3, [pc, #760]	; (800963c <main+0x97c>)
 8009342:	899b      	ldrh	r3, [r3, #12]
 8009344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009348:	d1e0      	bne.n	800930c <main+0x64c>
 800934a:	e062      	b.n	8009412 <main+0x752>
	  }
  }
  else if(iBus.SwC == 1500)
 800934c:	4bbb      	ldr	r3, [pc, #748]	; (800963c <main+0x97c>)
 800934e:	899b      	ldrh	r3, [r3, #12]
 8009350:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009354:	4293      	cmp	r3, r2
 8009356:	d15c      	bne.n	8009412 <main+0x752>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009358:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800935c:	48b6      	ldr	r0, [pc, #728]	; (8009638 <main+0x978>)
 800935e:	f7ff fbf5 	bl	8008b4c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1500;
 8009362:	4bb5      	ldr	r3, [pc, #724]	; (8009638 <main+0x978>)
 8009364:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009368:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 800936a:	20c8      	movs	r0, #200	; 0xc8
 800936c:	f7f7 fe5e 	bl	800102c <HAL_Delay>
	  TIM3->PSC = 2000;
 8009370:	4bb1      	ldr	r3, [pc, #708]	; (8009638 <main+0x978>)
 8009372:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009376:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8009378:	20c8      	movs	r0, #200	; 0xc8
 800937a:	f7f7 fe57 	bl	800102c <HAL_Delay>
	  TIM3->PSC = 1500;
 800937e:	4bae      	ldr	r3, [pc, #696]	; (8009638 <main+0x978>)
 8009380:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009384:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8009386:	20c8      	movs	r0, #200	; 0xc8
 8009388:	f7f7 fe50 	bl	800102c <HAL_Delay>
	  TIM3->PSC = 2000;
 800938c:	4baa      	ldr	r3, [pc, #680]	; (8009638 <main+0x978>)
 800938e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009392:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(200);
 8009394:	20c8      	movs	r0, #200	; 0xc8
 8009396:	f7f7 fe49 	bl	800102c <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800939a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800939e:	48a6      	ldr	r0, [pc, #664]	; (8009638 <main+0x978>)
 80093a0:	f7ff fbe5 	bl	8008b6e <LL_TIM_CC_DisableChannel>

	  BNO080_Calibration();
 80093a4:	f001 f982 	bl	800a6ac <BNO080_Calibration>
	  while(iBus.SwC != 1000)
 80093a8:	e019      	b.n	80093de <main+0x71e>
	  {
		  Is_iBus_Received();
 80093aa:	f001 f95f 	bl	800a66c <Is_iBus_Received>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80093ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80093b2:	48a1      	ldr	r0, [pc, #644]	; (8009638 <main+0x978>)
 80093b4:	f7ff fbca 	bl	8008b4c <LL_TIM_CC_EnableChannel>

		  TIM3->PSC = 1500;
 80093b8:	4b9f      	ldr	r3, [pc, #636]	; (8009638 <main+0x978>)
 80093ba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80093be:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 80093c0:	20c8      	movs	r0, #200	; 0xc8
 80093c2:	f7f7 fe33 	bl	800102c <HAL_Delay>
		  TIM3->PSC = 2000;
 80093c6:	4b9c      	ldr	r3, [pc, #624]	; (8009638 <main+0x978>)
 80093c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80093cc:	629a      	str	r2, [r3, #40]	; 0x28
		  HAL_Delay(200);
 80093ce:	20c8      	movs	r0, #200	; 0xc8
 80093d0:	f7f7 fe2c 	bl	800102c <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80093d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80093d8:	4897      	ldr	r0, [pc, #604]	; (8009638 <main+0x978>)
 80093da:	f7ff fbc8 	bl	8008b6e <LL_TIM_CC_DisableChannel>
	  while(iBus.SwC != 1000)
 80093de:	4b97      	ldr	r3, [pc, #604]	; (800963c <main+0x97c>)
 80093e0:	899b      	ldrh	r3, [r3, #12]
 80093e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093e6:	d1e0      	bne.n	80093aa <main+0x6ea>
	  }
  }
//
//
  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 80093e8:	e013      	b.n	8009412 <main+0x752>
  {
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80093ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80093ee:	4892      	ldr	r0, [pc, #584]	; (8009638 <main+0x978>)
 80093f0:	f7ff fbac 	bl	8008b4c <LL_TIM_CC_EnableChannel>

	  TIM3->PSC = 1000;
 80093f4:	4b90      	ldr	r3, [pc, #576]	; (8009638 <main+0x978>)
 80093f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80093fa:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_Delay(70);
 80093fc:	2046      	movs	r0, #70	; 0x46
 80093fe:	f7f7 fe15 	bl	800102c <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009402:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009406:	488c      	ldr	r0, [pc, #560]	; (8009638 <main+0x978>)
 8009408:	f7ff fbb1 	bl	8008b6e <LL_TIM_CC_DisableChannel>
	  HAL_Delay(70);
 800940c:	2046      	movs	r0, #70	; 0x46
 800940e:	f7f7 fe0d 	bl	800102c <HAL_Delay>
  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 8009412:	f001 f8d7 	bl	800a5c4 <Is_iBus_Throttle_Min>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d0e6      	beq.n	80093ea <main+0x72a>
 800941c:	4b87      	ldr	r3, [pc, #540]	; (800963c <main+0x97c>)
 800941e:	891b      	ldrh	r3, [r3, #8]
 8009420:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009424:	d0e1      	beq.n	80093ea <main+0x72a>
  }




  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8009426:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800942a:	4883      	ldr	r0, [pc, #524]	; (8009638 <main+0x978>)
 800942c:	f7ff fb8e 	bl	8008b4c <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000;
 8009430:	4b81      	ldr	r3, [pc, #516]	; (8009638 <main+0x978>)
 8009432:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009436:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8009438:	2064      	movs	r0, #100	; 0x64
 800943a:	f7f7 fdf7 	bl	800102c <HAL_Delay>
  TIM3->PSC = 1500;
 800943e:	4b7e      	ldr	r3, [pc, #504]	; (8009638 <main+0x978>)
 8009440:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009444:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8009446:	2064      	movs	r0, #100	; 0x64
 8009448:	f7f7 fdf0 	bl	800102c <HAL_Delay>
  TIM3->PSC = 1000;
 800944c:	4b7a      	ldr	r3, [pc, #488]	; (8009638 <main+0x978>)
 800944e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009452:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8009454:	2064      	movs	r0, #100	; 0x64
 8009456:	f7f7 fde9 	bl	800102c <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800945a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800945e:	4876      	ldr	r0, [pc, #472]	; (8009638 <main+0x978>)
 8009460:	f7ff fb85 	bl	8008b6e <LL_TIM_CC_DisableChannel>

  printf("Start\n");
 8009464:	4876      	ldr	r0, [pc, #472]	; (8009640 <main+0x980>)
 8009466:	f003 fc6d 	bl	800cd44 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(tim7_1ms_flag == 1)
 800946a:	4b76      	ldr	r3, [pc, #472]	; (8009644 <main+0x984>)
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	2b01      	cmp	r3, #1
 8009470:	f040 8197 	bne.w	80097a2 <main+0xae2>
	  {
		  tim7_1ms_flag = 0;
 8009474:	4b73      	ldr	r3, [pc, #460]	; (8009644 <main+0x984>)
 8009476:	2200      	movs	r2, #0
 8009478:	701a      	strb	r2, [r3, #0]

//  		  Double_Roll_Pitch_PID_Calculation(&roll, (iBus.RH-1500)*0.1f, BNO080_Roll, ICM20602.gyro_y);
//  		  Double_Roll_Pitch_PID_Calculation(&pitch, (iBus.RV-1500)*0.1f, BNO080_Pitch, ICM20602.gyro_x);

		  Double_Roll_Pitch_PID_Calculation(&roll, ref_roll_filt, BNO080_Roll, ICM20602.gyro_y);
 800947a:	4b73      	ldr	r3, [pc, #460]	; (8009648 <main+0x988>)
 800947c:	edd3 7a00 	vldr	s15, [r3]
 8009480:	4b72      	ldr	r3, [pc, #456]	; (800964c <main+0x98c>)
 8009482:	ed93 7a00 	vldr	s14, [r3]
 8009486:	4b72      	ldr	r3, [pc, #456]	; (8009650 <main+0x990>)
 8009488:	edd3 6a08 	vldr	s13, [r3, #32]
 800948c:	eeb0 1a66 	vmov.f32	s2, s13
 8009490:	eef0 0a47 	vmov.f32	s1, s14
 8009494:	eeb0 0a67 	vmov.f32	s0, s15
 8009498:	486e      	ldr	r0, [pc, #440]	; (8009654 <main+0x994>)
 800949a:	f7fe fd2b 	bl	8007ef4 <Double_Roll_Pitch_PID_Calculation>
		  Double_Roll_Pitch_PID_Calculation(&pitch, ref_pitch_filt, BNO080_Pitch, ICM20602.gyro_x);
 800949e:	4b6e      	ldr	r3, [pc, #440]	; (8009658 <main+0x998>)
 80094a0:	edd3 7a00 	vldr	s15, [r3]
 80094a4:	4b6d      	ldr	r3, [pc, #436]	; (800965c <main+0x99c>)
 80094a6:	ed93 7a00 	vldr	s14, [r3]
 80094aa:	4b69      	ldr	r3, [pc, #420]	; (8009650 <main+0x990>)
 80094ac:	edd3 6a07 	vldr	s13, [r3, #28]
 80094b0:	eeb0 1a66 	vmov.f32	s2, s13
 80094b4:	eef0 0a47 	vmov.f32	s1, s14
 80094b8:	eeb0 0a67 	vmov.f32	s0, s15
 80094bc:	4868      	ldr	r0, [pc, #416]	; (8009660 <main+0x9a0>)
 80094be:	f7fe fd19 	bl	8007ef4 <Double_Roll_Pitch_PID_Calculation>

		  if(iBus.LV < 1030 || motor_arming_flag == 0)
 80094c2:	4b5e      	ldr	r3, [pc, #376]	; (800963c <main+0x97c>)
 80094c4:	889b      	ldrh	r3, [r3, #4]
 80094c6:	f240 4205 	movw	r2, #1029	; 0x405
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d903      	bls.n	80094d6 <main+0x816>
 80094ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <main+0x81a>
		  {
			  Reset_All_PID_Integrator();
 80094d6:	f7fe ff65 	bl	80083a4 <Reset_All_PID_Integrator>
		  }

		  if(iBus.LH < 1485 || iBus.LH > 1515)
 80094da:	4b58      	ldr	r3, [pc, #352]	; (800963c <main+0x97c>)
 80094dc:	88db      	ldrh	r3, [r3, #6]
 80094de:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d906      	bls.n	80094f4 <main+0x834>
 80094e6:	4b55      	ldr	r3, [pc, #340]	; (800963c <main+0x97c>)
 80094e8:	88db      	ldrh	r3, [r3, #6]
 80094ea:	f240 52eb 	movw	r2, #1515	; 0x5eb
 80094ee:	4293      	cmp	r3, r2
 80094f0:	f240 80bc 	bls.w	800966c <main+0x9ac>
		  {
			  yaw_heading_reference = BNO080_Yaw;
 80094f4:	4b5b      	ldr	r3, [pc, #364]	; (8009664 <main+0x9a4>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	62fb      	str	r3, [r7, #44]	; 0x2c
			  Single_Yaw_Rate_PID_Calculation(&yaw_rate, (iBus.LH - 1500), ICM20602.gyro_z);
 80094fa:	4b50      	ldr	r3, [pc, #320]	; (800963c <main+0x97c>)
 80094fc:	88db      	ldrh	r3, [r3, #6]
 80094fe:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8009502:	ee07 3a90 	vmov	s15, r3
 8009506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800950a:	4b51      	ldr	r3, [pc, #324]	; (8009650 <main+0x990>)
 800950c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8009510:	eef0 0a47 	vmov.f32	s1, s14
 8009514:	eeb0 0a67 	vmov.f32	s0, s15
 8009518:	4853      	ldr	r0, [pc, #332]	; (8009668 <main+0x9a8>)
 800951a:	f7fe febf 	bl	800829c <Single_Yaw_Rate_PID_Calculation>

			  ccr1 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result + roll.in.pid_result - yaw_rate.pid_result;
 800951e:	4b47      	ldr	r3, [pc, #284]	; (800963c <main+0x97c>)
 8009520:	889b      	ldrh	r3, [r3, #4]
 8009522:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8009526:	4613      	mov	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4413      	add	r3, r2
 800952c:	005b      	lsls	r3, r3, #1
 800952e:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009532:	3338      	adds	r3, #56	; 0x38
 8009534:	ee07 3a90 	vmov	s15, r3
 8009538:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800953c:	4b48      	ldr	r3, [pc, #288]	; (8009660 <main+0x9a0>)
 800953e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009542:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009546:	4b43      	ldr	r3, [pc, #268]	; (8009654 <main+0x994>)
 8009548:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800954c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009550:	4b45      	ldr	r3, [pc, #276]	; (8009668 <main+0x9a8>)
 8009552:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800955a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800955e:	ee17 3a90 	vmov	r3, s15
 8009562:	873b      	strh	r3, [r7, #56]	; 0x38
			  ccr2 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result + roll.in.pid_result + yaw_rate.pid_result;
 8009564:	4b35      	ldr	r3, [pc, #212]	; (800963c <main+0x97c>)
 8009566:	889b      	ldrh	r3, [r3, #4]
 8009568:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800956c:	4613      	mov	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4413      	add	r3, r2
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009578:	3338      	adds	r3, #56	; 0x38
 800957a:	ee07 3a90 	vmov	s15, r3
 800957e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009582:	4b37      	ldr	r3, [pc, #220]	; (8009660 <main+0x9a0>)
 8009584:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009588:	ee37 7a27 	vadd.f32	s14, s14, s15
 800958c:	4b31      	ldr	r3, [pc, #196]	; (8009654 <main+0x994>)
 800958e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009592:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009596:	4b34      	ldr	r3, [pc, #208]	; (8009668 <main+0x9a8>)
 8009598:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800959c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095a4:	ee17 3a90 	vmov	r3, s15
 80095a8:	86fb      	strh	r3, [r7, #54]	; 0x36
			  ccr3 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result - roll.in.pid_result - yaw_rate.pid_result;
 80095aa:	4b24      	ldr	r3, [pc, #144]	; (800963c <main+0x97c>)
 80095ac:	889b      	ldrh	r3, [r3, #4]
 80095ae:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80095b2:	4613      	mov	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	005b      	lsls	r3, r3, #1
 80095ba:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 80095be:	3338      	adds	r3, #56	; 0x38
 80095c0:	ee07 3a90 	vmov	s15, r3
 80095c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80095c8:	4b25      	ldr	r3, [pc, #148]	; (8009660 <main+0x9a0>)
 80095ca:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80095ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80095d2:	4b20      	ldr	r3, [pc, #128]	; (8009654 <main+0x994>)
 80095d4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80095d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80095dc:	4b22      	ldr	r3, [pc, #136]	; (8009668 <main+0x9a8>)
 80095de:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80095e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095ea:	ee17 3a90 	vmov	r3, s15
 80095ee:	86bb      	strh	r3, [r7, #52]	; 0x34
			  ccr4 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result - roll.in.pid_result + yaw_rate.pid_result;
 80095f0:	4b12      	ldr	r3, [pc, #72]	; (800963c <main+0x97c>)
 80095f2:	889b      	ldrh	r3, [r3, #4]
 80095f4:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80095f8:	4613      	mov	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4413      	add	r3, r2
 80095fe:	005b      	lsls	r3, r3, #1
 8009600:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009604:	3338      	adds	r3, #56	; 0x38
 8009606:	ee07 3a90 	vmov	s15, r3
 800960a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800960e:	4b14      	ldr	r3, [pc, #80]	; (8009660 <main+0x9a0>)
 8009610:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009614:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009618:	4b0e      	ldr	r3, [pc, #56]	; (8009654 <main+0x994>)
 800961a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800961e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009622:	4b11      	ldr	r3, [pc, #68]	; (8009668 <main+0x9a8>)
 8009624:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800962c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009630:	ee17 3a90 	vmov	r3, s15
 8009634:	867b      	strh	r3, [r7, #50]	; 0x32
 8009636:	e0b4      	b.n	80097a2 <main+0xae2>
 8009638:	40000400 	.word	0x40000400
 800963c:	2000031c 	.word	0x2000031c
 8009640:	0800fcf0 	.word	0x0800fcf0
 8009644:	20000217 	.word	0x20000217
 8009648:	20000600 	.word	0x20000600
 800964c:	200004f8 	.word	0x200004f8
 8009650:	20000340 	.word	0x20000340
 8009654:	20000488 	.word	0x20000488
 8009658:	20000604 	.word	0x20000604
 800965c:	20000500 	.word	0x20000500
 8009660:	20000418 	.word	0x20000418
 8009664:	200004fc 	.word	0x200004fc
 8009668:	200003a8 	.word	0x200003a8
		  }
		  else
		  {
			  Single_Yaw_Heading_PID_Calculation(&yaw_heading, yaw_heading_reference, BNO080_Yaw, ICM20602.gyro_z);
 800966c:	4bb9      	ldr	r3, [pc, #740]	; (8009954 <main+0xc94>)
 800966e:	edd3 7a00 	vldr	s15, [r3]
 8009672:	4bb9      	ldr	r3, [pc, #740]	; (8009958 <main+0xc98>)
 8009674:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8009678:	eeb0 1a47 	vmov.f32	s2, s14
 800967c:	eef0 0a67 	vmov.f32	s1, s15
 8009680:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8009684:	48b5      	ldr	r0, [pc, #724]	; (800995c <main+0xc9c>)
 8009686:	f7fe fd6f 	bl	8008168 <Single_Yaw_Heading_PID_Calculation>

			  ccr1 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result + roll.in.pid_result - yaw_heading.pid_result;
 800968a:	4bb5      	ldr	r3, [pc, #724]	; (8009960 <main+0xca0>)
 800968c:	889b      	ldrh	r3, [r3, #4]
 800968e:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8009692:	4613      	mov	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	005b      	lsls	r3, r3, #1
 800969a:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 800969e:	3338      	adds	r3, #56	; 0x38
 80096a0:	ee07 3a90 	vmov	s15, r3
 80096a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096a8:	4bae      	ldr	r3, [pc, #696]	; (8009964 <main+0xca4>)
 80096aa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80096ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80096b2:	4bad      	ldr	r3, [pc, #692]	; (8009968 <main+0xca8>)
 80096b4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80096b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80096bc:	4ba7      	ldr	r3, [pc, #668]	; (800995c <main+0xc9c>)
 80096be:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80096c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096ca:	ee17 3a90 	vmov	r3, s15
 80096ce:	873b      	strh	r3, [r7, #56]	; 0x38
			  ccr2 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result + roll.in.pid_result + yaw_heading.pid_result;
 80096d0:	4ba3      	ldr	r3, [pc, #652]	; (8009960 <main+0xca0>)
 80096d2:	889b      	ldrh	r3, [r3, #4]
 80096d4:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80096d8:	4613      	mov	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	4413      	add	r3, r2
 80096de:	005b      	lsls	r3, r3, #1
 80096e0:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 80096e4:	3338      	adds	r3, #56	; 0x38
 80096e6:	ee07 3a90 	vmov	s15, r3
 80096ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096ee:	4b9d      	ldr	r3, [pc, #628]	; (8009964 <main+0xca4>)
 80096f0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80096f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80096f8:	4b9b      	ldr	r3, [pc, #620]	; (8009968 <main+0xca8>)
 80096fa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80096fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009702:	4b96      	ldr	r3, [pc, #600]	; (800995c <main+0xc9c>)
 8009704:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800970c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009710:	ee17 3a90 	vmov	r3, s15
 8009714:	86fb      	strh	r3, [r7, #54]	; 0x36
			  ccr3 = 10500 + 500 + (iBus.LV - 1000) * 10 + pitch.in.pid_result - roll.in.pid_result - yaw_heading.pid_result;
 8009716:	4b92      	ldr	r3, [pc, #584]	; (8009960 <main+0xca0>)
 8009718:	889b      	ldrh	r3, [r3, #4]
 800971a:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800971e:	4613      	mov	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	005b      	lsls	r3, r3, #1
 8009726:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 800972a:	3338      	adds	r3, #56	; 0x38
 800972c:	ee07 3a90 	vmov	s15, r3
 8009730:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009734:	4b8b      	ldr	r3, [pc, #556]	; (8009964 <main+0xca4>)
 8009736:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800973a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800973e:	4b8a      	ldr	r3, [pc, #552]	; (8009968 <main+0xca8>)
 8009740:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009744:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009748:	4b84      	ldr	r3, [pc, #528]	; (800995c <main+0xc9c>)
 800974a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800974e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009756:	ee17 3a90 	vmov	r3, s15
 800975a:	86bb      	strh	r3, [r7, #52]	; 0x34
			  ccr4 = 10500 + 500 + (iBus.LV - 1000) * 10 - pitch.in.pid_result - roll.in.pid_result + yaw_heading.pid_result;
 800975c:	4b80      	ldr	r3, [pc, #512]	; (8009960 <main+0xca0>)
 800975e:	889b      	ldrh	r3, [r3, #4]
 8009760:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	005b      	lsls	r3, r3, #1
 800976c:	f503 532b 	add.w	r3, r3, #10944	; 0x2ac0
 8009770:	3338      	adds	r3, #56	; 0x38
 8009772:	ee07 3a90 	vmov	s15, r3
 8009776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800977a:	4b7a      	ldr	r3, [pc, #488]	; (8009964 <main+0xca4>)
 800977c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009780:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009784:	4b78      	ldr	r3, [pc, #480]	; (8009968 <main+0xca8>)
 8009786:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800978a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800978e:	4b73      	ldr	r3, [pc, #460]	; (800995c <main+0xc9c>)
 8009790:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8009794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800979c:	ee17 3a90 	vmov	r3, s15
 80097a0:	867b      	strh	r3, [r7, #50]	; 0x32
		  //printf("%f\t%f\n", BNO080_Pitch, ICM20602.gyro_x);
		  //printf("%f\t%f\n", BNO080_Roll, ICM20602.gyro_y);
		  //printf("%f\t%f\n", BNO080_Yaw, ICM20602.gyro_z);
	  }

	  if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000)
 80097a2:	4b6f      	ldr	r3, [pc, #444]	; (8009960 <main+0xca0>)
 80097a4:	891b      	ldrh	r3, [r3, #8]
 80097a6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80097aa:	d12e      	bne.n	800980a <main+0xb4a>
 80097ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80097ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80097b2:	d02a      	beq.n	800980a <main+0xb4a>
	  {
		  if(iBus.LV < 1010)
 80097b4:	4b6a      	ldr	r3, [pc, #424]	; (8009960 <main+0xca0>)
 80097b6:	889b      	ldrh	r3, [r3, #4]
 80097b8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80097bc:	4293      	cmp	r3, r2
 80097be:	d81a      	bhi.n	80097f6 <main+0xb36>
		  {
			  motor_arming_flag = 1;
 80097c0:	2301      	movs	r3, #1
 80097c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			  yaw_heading_reference = BNO080_Yaw;
 80097c6:	4b63      	ldr	r3, [pc, #396]	; (8009954 <main+0xc94>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097cc:	e01d      	b.n	800980a <main+0xb4a>
		  }
		  else
		  {
			  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
			  {
				  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80097ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80097d2:	4866      	ldr	r0, [pc, #408]	; (800996c <main+0xcac>)
 80097d4:	f7ff f9ba 	bl	8008b4c <LL_TIM_CC_EnableChannel>

				  TIM3->PSC = 1000;
 80097d8:	4b64      	ldr	r3, [pc, #400]	; (800996c <main+0xcac>)
 80097da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80097de:	629a      	str	r2, [r3, #40]	; 0x28
				  HAL_Delay(70);
 80097e0:	2046      	movs	r0, #70	; 0x46
 80097e2:	f7f7 fc23 	bl	800102c <HAL_Delay>
				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80097e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80097ea:	4860      	ldr	r0, [pc, #384]	; (800996c <main+0xcac>)
 80097ec:	f7ff f9bf 	bl	8008b6e <LL_TIM_CC_DisableChannel>
				  HAL_Delay(70);
 80097f0:	2046      	movs	r0, #70	; 0x46
 80097f2:	f7f7 fc1b 	bl	800102c <HAL_Delay>
			  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 80097f6:	f000 fee5 	bl	800a5c4 <Is_iBus_Throttle_Min>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d0e6      	beq.n	80097ce <main+0xb0e>
 8009800:	4b57      	ldr	r3, [pc, #348]	; (8009960 <main+0xca0>)
 8009802:	891b      	ldrh	r3, [r3, #8]
 8009804:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009808:	d0e1      	beq.n	80097ce <main+0xb0e>
			  }
		  }
	  }
	  iBus_SwA_Prev = iBus.SwA;
 800980a:	4b55      	ldr	r3, [pc, #340]	; (8009960 <main+0xca0>)
 800980c:	891b      	ldrh	r3, [r3, #8]
 800980e:	87bb      	strh	r3, [r7, #60]	; 0x3c

	  if(iBus.SwA != 2000)
 8009810:	4b53      	ldr	r3, [pc, #332]	; (8009960 <main+0xca0>)
 8009812:	891b      	ldrh	r3, [r3, #8]
 8009814:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009818:	d002      	beq.n	8009820 <main+0xb60>
	  {
		  motor_arming_flag = 0;
 800981a:	2300      	movs	r3, #0
 800981c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	  }

	  if(motor_arming_flag == 1)
 8009820:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009824:	2b01      	cmp	r3, #1
 8009826:	d170      	bne.n	800990a <main+0xc4a>
	  {
		  if(failsafe_flag == 0)
 8009828:	4b51      	ldr	r3, [pc, #324]	; (8009970 <main+0xcb0>)
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d15b      	bne.n	80098e8 <main+0xc28>
		  {
			  if(iBus.LV > 1030)
 8009830:	4b4b      	ldr	r3, [pc, #300]	; (8009960 <main+0xca0>)
 8009832:	889b      	ldrh	r3, [r3, #4]
 8009834:	f240 4206 	movw	r2, #1030	; 0x406
 8009838:	4293      	cmp	r3, r2
 800983a:	d944      	bls.n	80098c6 <main+0xc06>
			  {
				  TIM5->CCR1 = ccr1 > 21000 ? 21000 : ccr1 < 11000 ? 11000 : ccr1;
 800983c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800983e:	f245 2208 	movw	r2, #21000	; 0x5208
 8009842:	4293      	cmp	r3, r2
 8009844:	d807      	bhi.n	8009856 <main+0xb96>
 8009846:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009848:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800984c:	4293      	cmp	r3, r2
 800984e:	bf38      	it	cc
 8009850:	4613      	movcc	r3, r2
 8009852:	b29b      	uxth	r3, r3
 8009854:	e001      	b.n	800985a <main+0xb9a>
 8009856:	f245 2308 	movw	r3, #21000	; 0x5208
 800985a:	4a46      	ldr	r2, [pc, #280]	; (8009974 <main+0xcb4>)
 800985c:	6353      	str	r3, [r2, #52]	; 0x34
				  TIM5->CCR2 = ccr2 > 21000 ? 21000 : ccr2 < 11000 ? 11000 : ccr2;
 800985e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009860:	f245 2208 	movw	r2, #21000	; 0x5208
 8009864:	4293      	cmp	r3, r2
 8009866:	d807      	bhi.n	8009878 <main+0xbb8>
 8009868:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800986a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800986e:	4293      	cmp	r3, r2
 8009870:	bf38      	it	cc
 8009872:	4613      	movcc	r3, r2
 8009874:	b29b      	uxth	r3, r3
 8009876:	e001      	b.n	800987c <main+0xbbc>
 8009878:	f245 2308 	movw	r3, #21000	; 0x5208
 800987c:	4a3d      	ldr	r2, [pc, #244]	; (8009974 <main+0xcb4>)
 800987e:	6393      	str	r3, [r2, #56]	; 0x38
				  TIM5->CCR3 = ccr3 > 21000 ? 21000 : ccr3 < 11000 ? 11000 : ccr3;
 8009880:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009882:	f245 2208 	movw	r2, #21000	; 0x5208
 8009886:	4293      	cmp	r3, r2
 8009888:	d807      	bhi.n	800989a <main+0xbda>
 800988a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800988c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8009890:	4293      	cmp	r3, r2
 8009892:	bf38      	it	cc
 8009894:	4613      	movcc	r3, r2
 8009896:	b29b      	uxth	r3, r3
 8009898:	e001      	b.n	800989e <main+0xbde>
 800989a:	f245 2308 	movw	r3, #21000	; 0x5208
 800989e:	4a35      	ldr	r2, [pc, #212]	; (8009974 <main+0xcb4>)
 80098a0:	63d3      	str	r3, [r2, #60]	; 0x3c
				  TIM5->CCR4 = ccr4 > 21000 ? 21000 : ccr4 < 11000 ? 11000 : ccr4;
 80098a2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80098a4:	f245 2208 	movw	r2, #21000	; 0x5208
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d807      	bhi.n	80098bc <main+0xbfc>
 80098ac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80098ae:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80098b2:	4293      	cmp	r3, r2
 80098b4:	bf38      	it	cc
 80098b6:	4613      	movcc	r3, r2
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	e001      	b.n	80098c0 <main+0xc00>
 80098bc:	f245 2308 	movw	r3, #21000	; 0x5208
 80098c0:	4a2c      	ldr	r2, [pc, #176]	; (8009974 <main+0xcb4>)
 80098c2:	6413      	str	r3, [r2, #64]	; 0x40
 80098c4:	e031      	b.n	800992a <main+0xc6a>
			  }
			  else
			  {
				  TIM5->CCR1 = 11000;
 80098c6:	4b2b      	ldr	r3, [pc, #172]	; (8009974 <main+0xcb4>)
 80098c8:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80098cc:	635a      	str	r2, [r3, #52]	; 0x34
				  TIM5->CCR2 = 11000;
 80098ce:	4b29      	ldr	r3, [pc, #164]	; (8009974 <main+0xcb4>)
 80098d0:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80098d4:	639a      	str	r2, [r3, #56]	; 0x38
				  TIM5->CCR3 = 11000;
 80098d6:	4b27      	ldr	r3, [pc, #156]	; (8009974 <main+0xcb4>)
 80098d8:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80098dc:	63da      	str	r2, [r3, #60]	; 0x3c
				  TIM5->CCR4 = 11000;
 80098de:	4b25      	ldr	r3, [pc, #148]	; (8009974 <main+0xcb4>)
 80098e0:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80098e4:	641a      	str	r2, [r3, #64]	; 0x40
 80098e6:	e020      	b.n	800992a <main+0xc6a>
			  }
		  }
		  else
		  {
			  TIM5->CCR1 = 10500;
 80098e8:	4b22      	ldr	r3, [pc, #136]	; (8009974 <main+0xcb4>)
 80098ea:	f642 1204 	movw	r2, #10500	; 0x2904
 80098ee:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM5->CCR2 = 10500;
 80098f0:	4b20      	ldr	r3, [pc, #128]	; (8009974 <main+0xcb4>)
 80098f2:	f642 1204 	movw	r2, #10500	; 0x2904
 80098f6:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM5->CCR3 = 10500;
 80098f8:	4b1e      	ldr	r3, [pc, #120]	; (8009974 <main+0xcb4>)
 80098fa:	f642 1204 	movw	r2, #10500	; 0x2904
 80098fe:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM5->CCR4 = 10500;
 8009900:	4b1c      	ldr	r3, [pc, #112]	; (8009974 <main+0xcb4>)
 8009902:	f642 1204 	movw	r2, #10500	; 0x2904
 8009906:	641a      	str	r2, [r3, #64]	; 0x40
 8009908:	e00f      	b.n	800992a <main+0xc6a>
		  }
	  }
	  else
	  {
		  TIM5->CCR1 = 10500;
 800990a:	4b1a      	ldr	r3, [pc, #104]	; (8009974 <main+0xcb4>)
 800990c:	f642 1204 	movw	r2, #10500	; 0x2904
 8009910:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM5->CCR2 = 10500;
 8009912:	4b18      	ldr	r3, [pc, #96]	; (8009974 <main+0xcb4>)
 8009914:	f642 1204 	movw	r2, #10500	; 0x2904
 8009918:	639a      	str	r2, [r3, #56]	; 0x38
		  TIM5->CCR3 = 10500;
 800991a:	4b16      	ldr	r3, [pc, #88]	; (8009974 <main+0xcb4>)
 800991c:	f642 1204 	movw	r2, #10500	; 0x2904
 8009920:	63da      	str	r2, [r3, #60]	; 0x3c
		  TIM5->CCR4 = 10500;
 8009922:	4b14      	ldr	r3, [pc, #80]	; (8009974 <main+0xcb4>)
 8009924:	f642 1204 	movw	r2, #10500	; 0x2904
 8009928:	641a      	str	r2, [r3, #64]	; 0x40
	  }

	  if(telemetry_rx_cplt_flag == 1)
 800992a:	4b13      	ldr	r3, [pc, #76]	; (8009978 <main+0xcb8>)
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b01      	cmp	r3, #1
 8009930:	f040 839a 	bne.w	800a068 <main+0x13a8>
	  {
		  telemetry_rx_cplt_flag = 0;
 8009934:	4b10      	ldr	r3, [pc, #64]	; (8009978 <main+0xcb8>)
 8009936:	2200      	movs	r2, #0
 8009938:	701a      	strb	r2, [r3, #0]

		  if(iBus.SwA == 1000)
 800993a:	4b09      	ldr	r3, [pc, #36]	; (8009960 <main+0xca0>)
 800993c:	891b      	ldrh	r3, [r3, #8]
 800993e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009942:	f040 8391 	bne.w	800a068 <main+0x13a8>
		  {
			  unsigned char chksum = 0xff;
 8009946:	23ff      	movs	r3, #255	; 0xff
 8009948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			  for(int i=0;i<19;i++) chksum = chksum - telemetry_rx_buf[i];
 800994c:	2300      	movs	r3, #0
 800994e:	627b      	str	r3, [r7, #36]	; 0x24
 8009950:	e020      	b.n	8009994 <main+0xcd4>
 8009952:	bf00      	nop
 8009954:	200004fc 	.word	0x200004fc
 8009958:	20000340 	.word	0x20000340
 800995c:	200003e0 	.word	0x200003e0
 8009960:	2000031c 	.word	0x2000031c
 8009964:	20000418 	.word	0x20000418
 8009968:	20000488 	.word	0x20000488
 800996c:	40000400 	.word	0x40000400
 8009970:	2000020b 	.word	0x2000020b
 8009974:	40000c00 	.word	0x40000c00
 8009978:	20000620 	.word	0x20000620
 800997c:	4aac      	ldr	r2, [pc, #688]	; (8009c30 <main+0xf70>)
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	4413      	add	r3, r2
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009990:	3301      	adds	r3, #1
 8009992:	627b      	str	r3, [r7, #36]	; 0x24
 8009994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009996:	2b12      	cmp	r3, #18
 8009998:	ddf0      	ble.n	800997c <main+0xcbc>

			  if(chksum == telemetry_rx_buf[19])
 800999a:	4ba5      	ldr	r3, [pc, #660]	; (8009c30 <main+0xf70>)
 800999c:	7cdb      	ldrb	r3, [r3, #19]
 800999e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80099a2:	429a      	cmp	r2, r3
 80099a4:	f040 8360 	bne.w	800a068 <main+0x13a8>
			  {
				  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80099a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80099ac:	48a1      	ldr	r0, [pc, #644]	; (8009c34 <main+0xf74>)
 80099ae:	f7ff f8cd 	bl	8008b4c <LL_TIM_CC_EnableChannel>

				  TIM3->PSC = 1000;
 80099b2:	4ba0      	ldr	r3, [pc, #640]	; (8009c34 <main+0xf74>)
 80099b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80099b8:	629a      	str	r2, [r3, #40]	; 0x28
				  HAL_Delay(10);
 80099ba:	200a      	movs	r0, #10
 80099bc:	f7f7 fb36 	bl	800102c <HAL_Delay>

				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80099c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80099c4:	489b      	ldr	r0, [pc, #620]	; (8009c34 <main+0xf74>)
 80099c6:	f7ff f8d2 	bl	8008b6e <LL_TIM_CC_DisableChannel>

				  switch(telemetry_rx_buf[2])
 80099ca:	4b99      	ldr	r3, [pc, #612]	; (8009c30 <main+0xf70>)
 80099cc:	789b      	ldrb	r3, [r3, #2]
 80099ce:	2b10      	cmp	r3, #16
 80099d0:	f200 834a 	bhi.w	800a068 <main+0x13a8>
 80099d4:	a201      	add	r2, pc, #4	; (adr r2, 80099dc <main+0xd1c>)
 80099d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099da:	bf00      	nop
 80099dc:	08009a21 	.word	0x08009a21
 80099e0:	08009aa5 	.word	0x08009aa5
 80099e4:	08009b29 	.word	0x08009b29
 80099e8:	08009bad 	.word	0x08009bad
 80099ec:	08009c7d 	.word	0x08009c7d
 80099f0:	08009d01 	.word	0x08009d01
 80099f4:	0800a069 	.word	0x0800a069
 80099f8:	0800a069 	.word	0x0800a069
 80099fc:	0800a069 	.word	0x0800a069
 8009a00:	0800a069 	.word	0x0800a069
 8009a04:	0800a069 	.word	0x0800a069
 8009a08:	0800a069 	.word	0x0800a069
 8009a0c:	0800a069 	.word	0x0800a069
 8009a10:	0800a069 	.word	0x0800a069
 8009a14:	0800a069 	.word	0x0800a069
 8009a18:	0800a069 	.word	0x0800a069
 8009a1c:	08009d85 	.word	0x08009d85
				  {
				  case 0:
					  roll.in.kp = *(float*)&telemetry_rx_buf[3];
 8009a20:	4b85      	ldr	r3, [pc, #532]	; (8009c38 <main+0xf78>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a85      	ldr	r2, [pc, #532]	; (8009c3c <main+0xf7c>)
 8009a26:	6013      	str	r3, [r2, #0]
					  roll.in.ki = *(float*)&telemetry_rx_buf[7];
 8009a28:	4b85      	ldr	r3, [pc, #532]	; (8009c40 <main+0xf80>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a83      	ldr	r2, [pc, #524]	; (8009c3c <main+0xf7c>)
 8009a2e:	6053      	str	r3, [r2, #4]
					  roll.in.kd = *(float*)&telemetry_rx_buf[11];
 8009a30:	4b84      	ldr	r3, [pc, #528]	; (8009c44 <main+0xf84>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a81      	ldr	r2, [pc, #516]	; (8009c3c <main+0xf7c>)
 8009a36:	6093      	str	r3, [r2, #8]
					  EP_PIDGain_Write(telemetry_rx_buf[2], roll.in.kp, roll.in.ki, roll.in.kd);
 8009a38:	4b7d      	ldr	r3, [pc, #500]	; (8009c30 <main+0xf70>)
 8009a3a:	789a      	ldrb	r2, [r3, #2]
 8009a3c:	4b7f      	ldr	r3, [pc, #508]	; (8009c3c <main+0xf7c>)
 8009a3e:	edd3 7a00 	vldr	s15, [r3]
 8009a42:	4b7e      	ldr	r3, [pc, #504]	; (8009c3c <main+0xf7c>)
 8009a44:	ed93 7a01 	vldr	s14, [r3, #4]
 8009a48:	4b7c      	ldr	r3, [pc, #496]	; (8009c3c <main+0xf7c>)
 8009a4a:	edd3 6a02 	vldr	s13, [r3, #8]
 8009a4e:	eeb0 1a66 	vmov.f32	s2, s13
 8009a52:	eef0 0a47 	vmov.f32	s1, s14
 8009a56:	eeb0 0a67 	vmov.f32	s0, s15
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	f7fc f9ca 	bl	8005df4 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &roll.in.kp, &roll.in.ki, &roll.in.kd);
 8009a60:	4b73      	ldr	r3, [pc, #460]	; (8009c30 <main+0xf70>)
 8009a62:	7898      	ldrb	r0, [r3, #2]
 8009a64:	4b78      	ldr	r3, [pc, #480]	; (8009c48 <main+0xf88>)
 8009a66:	4a79      	ldr	r2, [pc, #484]	; (8009c4c <main+0xf8c>)
 8009a68:	4974      	ldr	r1, [pc, #464]	; (8009c3c <main+0xf7c>)
 8009a6a:	f7fc fa59 	bl	8005f20 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll.in.kp, roll.in.ki, roll.in.kd);
 8009a6e:	4b70      	ldr	r3, [pc, #448]	; (8009c30 <main+0xf70>)
 8009a70:	789a      	ldrb	r2, [r3, #2]
 8009a72:	4b72      	ldr	r3, [pc, #456]	; (8009c3c <main+0xf7c>)
 8009a74:	edd3 7a00 	vldr	s15, [r3]
 8009a78:	4b70      	ldr	r3, [pc, #448]	; (8009c3c <main+0xf7c>)
 8009a7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8009a7e:	4b6f      	ldr	r3, [pc, #444]	; (8009c3c <main+0xf7c>)
 8009a80:	edd3 6a02 	vldr	s13, [r3, #8]
 8009a84:	eeb0 1a66 	vmov.f32	s2, s13
 8009a88:	eef0 0a47 	vmov.f32	s1, s14
 8009a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8009a90:	4611      	mov	r1, r2
 8009a92:	486f      	ldr	r0, [pc, #444]	; (8009c50 <main+0xf90>)
 8009a94:	f001 fa22 	bl	800aedc <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8009a98:	2214      	movs	r2, #20
 8009a9a:	496d      	ldr	r1, [pc, #436]	; (8009c50 <main+0xf90>)
 8009a9c:	486d      	ldr	r0, [pc, #436]	; (8009c54 <main+0xf94>)
 8009a9e:	f7fa fa0f 	bl	8003ec0 <HAL_UART_Transmit_IT>
					  break;
 8009aa2:	e2e1      	b.n	800a068 <main+0x13a8>
				  case 1:
					  roll.out.kp = *(float*)&telemetry_rx_buf[3];
 8009aa4:	4b64      	ldr	r3, [pc, #400]	; (8009c38 <main+0xf78>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a64      	ldr	r2, [pc, #400]	; (8009c3c <main+0xf7c>)
 8009aaa:	6393      	str	r3, [r2, #56]	; 0x38
					  roll.out.ki = *(float*)&telemetry_rx_buf[7];
 8009aac:	4b64      	ldr	r3, [pc, #400]	; (8009c40 <main+0xf80>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a62      	ldr	r2, [pc, #392]	; (8009c3c <main+0xf7c>)
 8009ab2:	63d3      	str	r3, [r2, #60]	; 0x3c
					  roll.out.kd = *(float*)&telemetry_rx_buf[11];
 8009ab4:	4b63      	ldr	r3, [pc, #396]	; (8009c44 <main+0xf84>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a60      	ldr	r2, [pc, #384]	; (8009c3c <main+0xf7c>)
 8009aba:	6413      	str	r3, [r2, #64]	; 0x40
					  EP_PIDGain_Write(telemetry_rx_buf[2], roll.out.kp, roll.out.ki, roll.out.kd);
 8009abc:	4b5c      	ldr	r3, [pc, #368]	; (8009c30 <main+0xf70>)
 8009abe:	789a      	ldrb	r2, [r3, #2]
 8009ac0:	4b5e      	ldr	r3, [pc, #376]	; (8009c3c <main+0xf7c>)
 8009ac2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009ac6:	4b5d      	ldr	r3, [pc, #372]	; (8009c3c <main+0xf7c>)
 8009ac8:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8009acc:	4b5b      	ldr	r3, [pc, #364]	; (8009c3c <main+0xf7c>)
 8009ace:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8009ad2:	eeb0 1a66 	vmov.f32	s2, s13
 8009ad6:	eef0 0a47 	vmov.f32	s1, s14
 8009ada:	eeb0 0a67 	vmov.f32	s0, s15
 8009ade:	4610      	mov	r0, r2
 8009ae0:	f7fc f988 	bl	8005df4 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &roll.out.kp, &roll.out.ki, &roll.out.kd);
 8009ae4:	4b52      	ldr	r3, [pc, #328]	; (8009c30 <main+0xf70>)
 8009ae6:	7898      	ldrb	r0, [r3, #2]
 8009ae8:	4b5b      	ldr	r3, [pc, #364]	; (8009c58 <main+0xf98>)
 8009aea:	4a5c      	ldr	r2, [pc, #368]	; (8009c5c <main+0xf9c>)
 8009aec:	495c      	ldr	r1, [pc, #368]	; (8009c60 <main+0xfa0>)
 8009aee:	f7fc fa17 	bl	8005f20 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll.out.kp, roll.out.ki, roll.out.kd);
 8009af2:	4b4f      	ldr	r3, [pc, #316]	; (8009c30 <main+0xf70>)
 8009af4:	789a      	ldrb	r2, [r3, #2]
 8009af6:	4b51      	ldr	r3, [pc, #324]	; (8009c3c <main+0xf7c>)
 8009af8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009afc:	4b4f      	ldr	r3, [pc, #316]	; (8009c3c <main+0xf7c>)
 8009afe:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8009b02:	4b4e      	ldr	r3, [pc, #312]	; (8009c3c <main+0xf7c>)
 8009b04:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8009b08:	eeb0 1a66 	vmov.f32	s2, s13
 8009b0c:	eef0 0a47 	vmov.f32	s1, s14
 8009b10:	eeb0 0a67 	vmov.f32	s0, s15
 8009b14:	4611      	mov	r1, r2
 8009b16:	484e      	ldr	r0, [pc, #312]	; (8009c50 <main+0xf90>)
 8009b18:	f001 f9e0 	bl	800aedc <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8009b1c:	2214      	movs	r2, #20
 8009b1e:	494c      	ldr	r1, [pc, #304]	; (8009c50 <main+0xf90>)
 8009b20:	484c      	ldr	r0, [pc, #304]	; (8009c54 <main+0xf94>)
 8009b22:	f7fa f9cd 	bl	8003ec0 <HAL_UART_Transmit_IT>
					  break;
 8009b26:	e29f      	b.n	800a068 <main+0x13a8>
				  case 2:
					  pitch.in.kp = *(float*)&telemetry_rx_buf[3];
 8009b28:	4b43      	ldr	r3, [pc, #268]	; (8009c38 <main+0xf78>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a4d      	ldr	r2, [pc, #308]	; (8009c64 <main+0xfa4>)
 8009b2e:	6013      	str	r3, [r2, #0]
					  pitch.in.ki = *(float*)&telemetry_rx_buf[7];
 8009b30:	4b43      	ldr	r3, [pc, #268]	; (8009c40 <main+0xf80>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a4b      	ldr	r2, [pc, #300]	; (8009c64 <main+0xfa4>)
 8009b36:	6053      	str	r3, [r2, #4]
					  pitch.in.kd = *(float*)&telemetry_rx_buf[11];
 8009b38:	4b42      	ldr	r3, [pc, #264]	; (8009c44 <main+0xf84>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a49      	ldr	r2, [pc, #292]	; (8009c64 <main+0xfa4>)
 8009b3e:	6093      	str	r3, [r2, #8]
					  EP_PIDGain_Write(telemetry_rx_buf[2], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8009b40:	4b3b      	ldr	r3, [pc, #236]	; (8009c30 <main+0xf70>)
 8009b42:	789a      	ldrb	r2, [r3, #2]
 8009b44:	4b47      	ldr	r3, [pc, #284]	; (8009c64 <main+0xfa4>)
 8009b46:	edd3 7a00 	vldr	s15, [r3]
 8009b4a:	4b46      	ldr	r3, [pc, #280]	; (8009c64 <main+0xfa4>)
 8009b4c:	ed93 7a01 	vldr	s14, [r3, #4]
 8009b50:	4b44      	ldr	r3, [pc, #272]	; (8009c64 <main+0xfa4>)
 8009b52:	edd3 6a02 	vldr	s13, [r3, #8]
 8009b56:	eeb0 1a66 	vmov.f32	s2, s13
 8009b5a:	eef0 0a47 	vmov.f32	s1, s14
 8009b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8009b62:	4610      	mov	r0, r2
 8009b64:	f7fc f946 	bl	8005df4 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &pitch.in.kp, &pitch.in.ki, &pitch.in.kd);
 8009b68:	4b31      	ldr	r3, [pc, #196]	; (8009c30 <main+0xf70>)
 8009b6a:	7898      	ldrb	r0, [r3, #2]
 8009b6c:	4b3e      	ldr	r3, [pc, #248]	; (8009c68 <main+0xfa8>)
 8009b6e:	4a3f      	ldr	r2, [pc, #252]	; (8009c6c <main+0xfac>)
 8009b70:	493c      	ldr	r1, [pc, #240]	; (8009c64 <main+0xfa4>)
 8009b72:	f7fc f9d5 	bl	8005f20 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8009b76:	4b2e      	ldr	r3, [pc, #184]	; (8009c30 <main+0xf70>)
 8009b78:	789a      	ldrb	r2, [r3, #2]
 8009b7a:	4b3a      	ldr	r3, [pc, #232]	; (8009c64 <main+0xfa4>)
 8009b7c:	edd3 7a00 	vldr	s15, [r3]
 8009b80:	4b38      	ldr	r3, [pc, #224]	; (8009c64 <main+0xfa4>)
 8009b82:	ed93 7a01 	vldr	s14, [r3, #4]
 8009b86:	4b37      	ldr	r3, [pc, #220]	; (8009c64 <main+0xfa4>)
 8009b88:	edd3 6a02 	vldr	s13, [r3, #8]
 8009b8c:	eeb0 1a66 	vmov.f32	s2, s13
 8009b90:	eef0 0a47 	vmov.f32	s1, s14
 8009b94:	eeb0 0a67 	vmov.f32	s0, s15
 8009b98:	4611      	mov	r1, r2
 8009b9a:	482d      	ldr	r0, [pc, #180]	; (8009c50 <main+0xf90>)
 8009b9c:	f001 f99e 	bl	800aedc <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8009ba0:	2214      	movs	r2, #20
 8009ba2:	492b      	ldr	r1, [pc, #172]	; (8009c50 <main+0xf90>)
 8009ba4:	482b      	ldr	r0, [pc, #172]	; (8009c54 <main+0xf94>)
 8009ba6:	f7fa f98b 	bl	8003ec0 <HAL_UART_Transmit_IT>
					  break;
 8009baa:	e25d      	b.n	800a068 <main+0x13a8>
				  case 3:
					  pitch.out.kp = *(float*)&telemetry_rx_buf[3];
 8009bac:	4b22      	ldr	r3, [pc, #136]	; (8009c38 <main+0xf78>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a2c      	ldr	r2, [pc, #176]	; (8009c64 <main+0xfa4>)
 8009bb2:	6393      	str	r3, [r2, #56]	; 0x38
					  pitch.out.ki = *(float*)&telemetry_rx_buf[7];
 8009bb4:	4b22      	ldr	r3, [pc, #136]	; (8009c40 <main+0xf80>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a2a      	ldr	r2, [pc, #168]	; (8009c64 <main+0xfa4>)
 8009bba:	63d3      	str	r3, [r2, #60]	; 0x3c
					  pitch.out.kd = *(float*)&telemetry_rx_buf[11];
 8009bbc:	4b21      	ldr	r3, [pc, #132]	; (8009c44 <main+0xf84>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a28      	ldr	r2, [pc, #160]	; (8009c64 <main+0xfa4>)
 8009bc2:	6413      	str	r3, [r2, #64]	; 0x40
					  EP_PIDGain_Write(telemetry_rx_buf[2], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8009bc4:	4b1a      	ldr	r3, [pc, #104]	; (8009c30 <main+0xf70>)
 8009bc6:	789a      	ldrb	r2, [r3, #2]
 8009bc8:	4b26      	ldr	r3, [pc, #152]	; (8009c64 <main+0xfa4>)
 8009bca:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009bce:	4b25      	ldr	r3, [pc, #148]	; (8009c64 <main+0xfa4>)
 8009bd0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8009bd4:	4b23      	ldr	r3, [pc, #140]	; (8009c64 <main+0xfa4>)
 8009bd6:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8009bda:	eeb0 1a66 	vmov.f32	s2, s13
 8009bde:	eef0 0a47 	vmov.f32	s1, s14
 8009be2:	eeb0 0a67 	vmov.f32	s0, s15
 8009be6:	4610      	mov	r0, r2
 8009be8:	f7fc f904 	bl	8005df4 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &pitch.out.kp, &pitch.out.ki, &pitch.out.kd);
 8009bec:	4b10      	ldr	r3, [pc, #64]	; (8009c30 <main+0xf70>)
 8009bee:	7898      	ldrb	r0, [r3, #2]
 8009bf0:	4b1f      	ldr	r3, [pc, #124]	; (8009c70 <main+0xfb0>)
 8009bf2:	4a20      	ldr	r2, [pc, #128]	; (8009c74 <main+0xfb4>)
 8009bf4:	4920      	ldr	r1, [pc, #128]	; (8009c78 <main+0xfb8>)
 8009bf6:	f7fc f993 	bl	8005f20 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8009bfa:	4b0d      	ldr	r3, [pc, #52]	; (8009c30 <main+0xf70>)
 8009bfc:	789a      	ldrb	r2, [r3, #2]
 8009bfe:	4b19      	ldr	r3, [pc, #100]	; (8009c64 <main+0xfa4>)
 8009c00:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009c04:	4b17      	ldr	r3, [pc, #92]	; (8009c64 <main+0xfa4>)
 8009c06:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8009c0a:	4b16      	ldr	r3, [pc, #88]	; (8009c64 <main+0xfa4>)
 8009c0c:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8009c10:	eeb0 1a66 	vmov.f32	s2, s13
 8009c14:	eef0 0a47 	vmov.f32	s1, s14
 8009c18:	eeb0 0a67 	vmov.f32	s0, s15
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	480c      	ldr	r0, [pc, #48]	; (8009c50 <main+0xf90>)
 8009c20:	f001 f95c 	bl	800aedc <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8009c24:	2214      	movs	r2, #20
 8009c26:	490a      	ldr	r1, [pc, #40]	; (8009c50 <main+0xf90>)
 8009c28:	480a      	ldr	r0, [pc, #40]	; (8009c54 <main+0xf94>)
 8009c2a:	f7fa f949 	bl	8003ec0 <HAL_UART_Transmit_IT>
					  break;
 8009c2e:	e21b      	b.n	800a068 <main+0x13a8>
 8009c30:	2000060c 	.word	0x2000060c
 8009c34:	40000400 	.word	0x40000400
 8009c38:	2000060f 	.word	0x2000060f
 8009c3c:	20000488 	.word	0x20000488
 8009c40:	20000613 	.word	0x20000613
 8009c44:	20000617 	.word	0x20000617
 8009c48:	20000490 	.word	0x20000490
 8009c4c:	2000048c 	.word	0x2000048c
 8009c50:	20000624 	.word	0x20000624
 8009c54:	20000690 	.word	0x20000690
 8009c58:	200004c8 	.word	0x200004c8
 8009c5c:	200004c4 	.word	0x200004c4
 8009c60:	200004c0 	.word	0x200004c0
 8009c64:	20000418 	.word	0x20000418
 8009c68:	20000420 	.word	0x20000420
 8009c6c:	2000041c 	.word	0x2000041c
 8009c70:	20000458 	.word	0x20000458
 8009c74:	20000454 	.word	0x20000454
 8009c78:	20000450 	.word	0x20000450
				  case 4:
					  yaw_heading.kp = *(float*)&telemetry_rx_buf[3];
 8009c7c:	4ba0      	ldr	r3, [pc, #640]	; (8009f00 <main+0x1240>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4aa0      	ldr	r2, [pc, #640]	; (8009f04 <main+0x1244>)
 8009c82:	6013      	str	r3, [r2, #0]
					  yaw_heading.ki = *(float*)&telemetry_rx_buf[7];
 8009c84:	4ba0      	ldr	r3, [pc, #640]	; (8009f08 <main+0x1248>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a9e      	ldr	r2, [pc, #632]	; (8009f04 <main+0x1244>)
 8009c8a:	6053      	str	r3, [r2, #4]
					  yaw_heading.kd = *(float*)&telemetry_rx_buf[11];
 8009c8c:	4b9f      	ldr	r3, [pc, #636]	; (8009f0c <main+0x124c>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a9c      	ldr	r2, [pc, #624]	; (8009f04 <main+0x1244>)
 8009c92:	6093      	str	r3, [r2, #8]
					  EP_PIDGain_Write(telemetry_rx_buf[2], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8009c94:	4b9e      	ldr	r3, [pc, #632]	; (8009f10 <main+0x1250>)
 8009c96:	789a      	ldrb	r2, [r3, #2]
 8009c98:	4b9a      	ldr	r3, [pc, #616]	; (8009f04 <main+0x1244>)
 8009c9a:	edd3 7a00 	vldr	s15, [r3]
 8009c9e:	4b99      	ldr	r3, [pc, #612]	; (8009f04 <main+0x1244>)
 8009ca0:	ed93 7a01 	vldr	s14, [r3, #4]
 8009ca4:	4b97      	ldr	r3, [pc, #604]	; (8009f04 <main+0x1244>)
 8009ca6:	edd3 6a02 	vldr	s13, [r3, #8]
 8009caa:	eeb0 1a66 	vmov.f32	s2, s13
 8009cae:	eef0 0a47 	vmov.f32	s1, s14
 8009cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8009cb6:	4610      	mov	r0, r2
 8009cb8:	f7fc f89c 	bl	8005df4 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd);
 8009cbc:	4b94      	ldr	r3, [pc, #592]	; (8009f10 <main+0x1250>)
 8009cbe:	7898      	ldrb	r0, [r3, #2]
 8009cc0:	4b94      	ldr	r3, [pc, #592]	; (8009f14 <main+0x1254>)
 8009cc2:	4a95      	ldr	r2, [pc, #596]	; (8009f18 <main+0x1258>)
 8009cc4:	498f      	ldr	r1, [pc, #572]	; (8009f04 <main+0x1244>)
 8009cc6:	f7fc f92b 	bl	8005f20 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8009cca:	4b91      	ldr	r3, [pc, #580]	; (8009f10 <main+0x1250>)
 8009ccc:	789a      	ldrb	r2, [r3, #2]
 8009cce:	4b8d      	ldr	r3, [pc, #564]	; (8009f04 <main+0x1244>)
 8009cd0:	edd3 7a00 	vldr	s15, [r3]
 8009cd4:	4b8b      	ldr	r3, [pc, #556]	; (8009f04 <main+0x1244>)
 8009cd6:	ed93 7a01 	vldr	s14, [r3, #4]
 8009cda:	4b8a      	ldr	r3, [pc, #552]	; (8009f04 <main+0x1244>)
 8009cdc:	edd3 6a02 	vldr	s13, [r3, #8]
 8009ce0:	eeb0 1a66 	vmov.f32	s2, s13
 8009ce4:	eef0 0a47 	vmov.f32	s1, s14
 8009ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8009cec:	4611      	mov	r1, r2
 8009cee:	488b      	ldr	r0, [pc, #556]	; (8009f1c <main+0x125c>)
 8009cf0:	f001 f8f4 	bl	800aedc <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8009cf4:	2214      	movs	r2, #20
 8009cf6:	4989      	ldr	r1, [pc, #548]	; (8009f1c <main+0x125c>)
 8009cf8:	4889      	ldr	r0, [pc, #548]	; (8009f20 <main+0x1260>)
 8009cfa:	f7fa f8e1 	bl	8003ec0 <HAL_UART_Transmit_IT>
					  break;
 8009cfe:	e1b3      	b.n	800a068 <main+0x13a8>
				  case 5:
					  yaw_rate.kp = *(float*)&telemetry_rx_buf[3];
 8009d00:	4b7f      	ldr	r3, [pc, #508]	; (8009f00 <main+0x1240>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a87      	ldr	r2, [pc, #540]	; (8009f24 <main+0x1264>)
 8009d06:	6013      	str	r3, [r2, #0]
					  yaw_rate.ki = *(float*)&telemetry_rx_buf[7];
 8009d08:	4b7f      	ldr	r3, [pc, #508]	; (8009f08 <main+0x1248>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a85      	ldr	r2, [pc, #532]	; (8009f24 <main+0x1264>)
 8009d0e:	6053      	str	r3, [r2, #4]
					  yaw_rate.kd = *(float*)&telemetry_rx_buf[11];
 8009d10:	4b7e      	ldr	r3, [pc, #504]	; (8009f0c <main+0x124c>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a83      	ldr	r2, [pc, #524]	; (8009f24 <main+0x1264>)
 8009d16:	6093      	str	r3, [r2, #8]
					  EP_PIDGain_Write(telemetry_rx_buf[2], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8009d18:	4b7d      	ldr	r3, [pc, #500]	; (8009f10 <main+0x1250>)
 8009d1a:	789a      	ldrb	r2, [r3, #2]
 8009d1c:	4b81      	ldr	r3, [pc, #516]	; (8009f24 <main+0x1264>)
 8009d1e:	edd3 7a00 	vldr	s15, [r3]
 8009d22:	4b80      	ldr	r3, [pc, #512]	; (8009f24 <main+0x1264>)
 8009d24:	ed93 7a01 	vldr	s14, [r3, #4]
 8009d28:	4b7e      	ldr	r3, [pc, #504]	; (8009f24 <main+0x1264>)
 8009d2a:	edd3 6a02 	vldr	s13, [r3, #8]
 8009d2e:	eeb0 1a66 	vmov.f32	s2, s13
 8009d32:	eef0 0a47 	vmov.f32	s1, s14
 8009d36:	eeb0 0a67 	vmov.f32	s0, s15
 8009d3a:	4610      	mov	r0, r2
 8009d3c:	f7fc f85a 	bl	8005df4 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_rate.kp, &yaw_rate.ki, &yaw_rate.kd);
 8009d40:	4b73      	ldr	r3, [pc, #460]	; (8009f10 <main+0x1250>)
 8009d42:	7898      	ldrb	r0, [r3, #2]
 8009d44:	4b78      	ldr	r3, [pc, #480]	; (8009f28 <main+0x1268>)
 8009d46:	4a79      	ldr	r2, [pc, #484]	; (8009f2c <main+0x126c>)
 8009d48:	4976      	ldr	r1, [pc, #472]	; (8009f24 <main+0x1264>)
 8009d4a:	f7fc f8e9 	bl	8005f20 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8009d4e:	4b70      	ldr	r3, [pc, #448]	; (8009f10 <main+0x1250>)
 8009d50:	789a      	ldrb	r2, [r3, #2]
 8009d52:	4b74      	ldr	r3, [pc, #464]	; (8009f24 <main+0x1264>)
 8009d54:	edd3 7a00 	vldr	s15, [r3]
 8009d58:	4b72      	ldr	r3, [pc, #456]	; (8009f24 <main+0x1264>)
 8009d5a:	ed93 7a01 	vldr	s14, [r3, #4]
 8009d5e:	4b71      	ldr	r3, [pc, #452]	; (8009f24 <main+0x1264>)
 8009d60:	edd3 6a02 	vldr	s13, [r3, #8]
 8009d64:	eeb0 1a66 	vmov.f32	s2, s13
 8009d68:	eef0 0a47 	vmov.f32	s1, s14
 8009d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8009d70:	4611      	mov	r1, r2
 8009d72:	486a      	ldr	r0, [pc, #424]	; (8009f1c <main+0x125c>)
 8009d74:	f001 f8b2 	bl	800aedc <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 8009d78:	2214      	movs	r2, #20
 8009d7a:	4968      	ldr	r1, [pc, #416]	; (8009f1c <main+0x125c>)
 8009d7c:	4868      	ldr	r0, [pc, #416]	; (8009f20 <main+0x1260>)
 8009d7e:	f7fa f89f 	bl	8003ec0 <HAL_UART_Transmit_IT>
					  break;
 8009d82:	e171      	b.n	800a068 <main+0x13a8>
				  case 0x10:
					  switch(telemetry_rx_buf[3])
 8009d84:	4b62      	ldr	r3, [pc, #392]	; (8009f10 <main+0x1250>)
 8009d86:	78db      	ldrb	r3, [r3, #3]
 8009d88:	2b06      	cmp	r3, #6
 8009d8a:	f200 816c 	bhi.w	800a066 <main+0x13a6>
 8009d8e:	a201      	add	r2, pc, #4	; (adr r2, 8009d94 <main+0x10d4>)
 8009d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d94:	08009db1 	.word	0x08009db1
 8009d98:	08009de9 	.word	0x08009de9
 8009d9c:	08009e21 	.word	0x08009e21
 8009da0:	08009e59 	.word	0x08009e59
 8009da4:	08009e91 	.word	0x08009e91
 8009da8:	08009ec9 	.word	0x08009ec9
 8009dac:	08009f39 	.word	0x08009f39
					  {
					  case 0:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll.in.kp, roll.in.ki, roll.in.kd);
 8009db0:	4b57      	ldr	r3, [pc, #348]	; (8009f10 <main+0x1250>)
 8009db2:	78da      	ldrb	r2, [r3, #3]
 8009db4:	4b5e      	ldr	r3, [pc, #376]	; (8009f30 <main+0x1270>)
 8009db6:	edd3 7a00 	vldr	s15, [r3]
 8009dba:	4b5d      	ldr	r3, [pc, #372]	; (8009f30 <main+0x1270>)
 8009dbc:	ed93 7a01 	vldr	s14, [r3, #4]
 8009dc0:	4b5b      	ldr	r3, [pc, #364]	; (8009f30 <main+0x1270>)
 8009dc2:	edd3 6a02 	vldr	s13, [r3, #8]
 8009dc6:	eeb0 1a66 	vmov.f32	s2, s13
 8009dca:	eef0 0a47 	vmov.f32	s1, s14
 8009dce:	eeb0 0a67 	vmov.f32	s0, s15
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	4851      	ldr	r0, [pc, #324]	; (8009f1c <main+0x125c>)
 8009dd6:	f001 f881 	bl	800aedc <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8009dda:	230a      	movs	r3, #10
 8009ddc:	2214      	movs	r2, #20
 8009dde:	494f      	ldr	r1, [pc, #316]	; (8009f1c <main+0x125c>)
 8009de0:	484f      	ldr	r0, [pc, #316]	; (8009f20 <main+0x1260>)
 8009de2:	f7f9 ffd4 	bl	8003d8e <HAL_UART_Transmit>
						  break;
 8009de6:	e13e      	b.n	800a066 <main+0x13a6>
					  case 1:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], roll.out.kp, roll.out.ki, roll.out.kd);
 8009de8:	4b49      	ldr	r3, [pc, #292]	; (8009f10 <main+0x1250>)
 8009dea:	78da      	ldrb	r2, [r3, #3]
 8009dec:	4b50      	ldr	r3, [pc, #320]	; (8009f30 <main+0x1270>)
 8009dee:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009df2:	4b4f      	ldr	r3, [pc, #316]	; (8009f30 <main+0x1270>)
 8009df4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8009df8:	4b4d      	ldr	r3, [pc, #308]	; (8009f30 <main+0x1270>)
 8009dfa:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8009dfe:	eeb0 1a66 	vmov.f32	s2, s13
 8009e02:	eef0 0a47 	vmov.f32	s1, s14
 8009e06:	eeb0 0a67 	vmov.f32	s0, s15
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	4843      	ldr	r0, [pc, #268]	; (8009f1c <main+0x125c>)
 8009e0e:	f001 f865 	bl	800aedc <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8009e12:	230a      	movs	r3, #10
 8009e14:	2214      	movs	r2, #20
 8009e16:	4941      	ldr	r1, [pc, #260]	; (8009f1c <main+0x125c>)
 8009e18:	4841      	ldr	r0, [pc, #260]	; (8009f20 <main+0x1260>)
 8009e1a:	f7f9 ffb8 	bl	8003d8e <HAL_UART_Transmit>
						  break;
 8009e1e:	e122      	b.n	800a066 <main+0x13a6>
					  case 2:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8009e20:	4b3b      	ldr	r3, [pc, #236]	; (8009f10 <main+0x1250>)
 8009e22:	78da      	ldrb	r2, [r3, #3]
 8009e24:	4b43      	ldr	r3, [pc, #268]	; (8009f34 <main+0x1274>)
 8009e26:	edd3 7a00 	vldr	s15, [r3]
 8009e2a:	4b42      	ldr	r3, [pc, #264]	; (8009f34 <main+0x1274>)
 8009e2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8009e30:	4b40      	ldr	r3, [pc, #256]	; (8009f34 <main+0x1274>)
 8009e32:	edd3 6a02 	vldr	s13, [r3, #8]
 8009e36:	eeb0 1a66 	vmov.f32	s2, s13
 8009e3a:	eef0 0a47 	vmov.f32	s1, s14
 8009e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8009e42:	4611      	mov	r1, r2
 8009e44:	4835      	ldr	r0, [pc, #212]	; (8009f1c <main+0x125c>)
 8009e46:	f001 f849 	bl	800aedc <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8009e4a:	230a      	movs	r3, #10
 8009e4c:	2214      	movs	r2, #20
 8009e4e:	4933      	ldr	r1, [pc, #204]	; (8009f1c <main+0x125c>)
 8009e50:	4833      	ldr	r0, [pc, #204]	; (8009f20 <main+0x1260>)
 8009e52:	f7f9 ff9c 	bl	8003d8e <HAL_UART_Transmit>
						  break;
 8009e56:	e106      	b.n	800a066 <main+0x13a6>
					  case 3:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8009e58:	4b2d      	ldr	r3, [pc, #180]	; (8009f10 <main+0x1250>)
 8009e5a:	78da      	ldrb	r2, [r3, #3]
 8009e5c:	4b35      	ldr	r3, [pc, #212]	; (8009f34 <main+0x1274>)
 8009e5e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009e62:	4b34      	ldr	r3, [pc, #208]	; (8009f34 <main+0x1274>)
 8009e64:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8009e68:	4b32      	ldr	r3, [pc, #200]	; (8009f34 <main+0x1274>)
 8009e6a:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8009e6e:	eeb0 1a66 	vmov.f32	s2, s13
 8009e72:	eef0 0a47 	vmov.f32	s1, s14
 8009e76:	eeb0 0a67 	vmov.f32	s0, s15
 8009e7a:	4611      	mov	r1, r2
 8009e7c:	4827      	ldr	r0, [pc, #156]	; (8009f1c <main+0x125c>)
 8009e7e:	f001 f82d 	bl	800aedc <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8009e82:	230a      	movs	r3, #10
 8009e84:	2214      	movs	r2, #20
 8009e86:	4925      	ldr	r1, [pc, #148]	; (8009f1c <main+0x125c>)
 8009e88:	4825      	ldr	r0, [pc, #148]	; (8009f20 <main+0x1260>)
 8009e8a:	f7f9 ff80 	bl	8003d8e <HAL_UART_Transmit>
						  break;
 8009e8e:	e0ea      	b.n	800a066 <main+0x13a6>
					  case 4:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8009e90:	4b1f      	ldr	r3, [pc, #124]	; (8009f10 <main+0x1250>)
 8009e92:	78da      	ldrb	r2, [r3, #3]
 8009e94:	4b1b      	ldr	r3, [pc, #108]	; (8009f04 <main+0x1244>)
 8009e96:	edd3 7a00 	vldr	s15, [r3]
 8009e9a:	4b1a      	ldr	r3, [pc, #104]	; (8009f04 <main+0x1244>)
 8009e9c:	ed93 7a01 	vldr	s14, [r3, #4]
 8009ea0:	4b18      	ldr	r3, [pc, #96]	; (8009f04 <main+0x1244>)
 8009ea2:	edd3 6a02 	vldr	s13, [r3, #8]
 8009ea6:	eeb0 1a66 	vmov.f32	s2, s13
 8009eaa:	eef0 0a47 	vmov.f32	s1, s14
 8009eae:	eeb0 0a67 	vmov.f32	s0, s15
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	4819      	ldr	r0, [pc, #100]	; (8009f1c <main+0x125c>)
 8009eb6:	f001 f811 	bl	800aedc <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8009eba:	230a      	movs	r3, #10
 8009ebc:	2214      	movs	r2, #20
 8009ebe:	4917      	ldr	r1, [pc, #92]	; (8009f1c <main+0x125c>)
 8009ec0:	4817      	ldr	r0, [pc, #92]	; (8009f20 <main+0x1260>)
 8009ec2:	f7f9 ff64 	bl	8003d8e <HAL_UART_Transmit>
						  break;
 8009ec6:	e0ce      	b.n	800a066 <main+0x13a6>
					  case 5:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[3], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8009ec8:	4b11      	ldr	r3, [pc, #68]	; (8009f10 <main+0x1250>)
 8009eca:	78da      	ldrb	r2, [r3, #3]
 8009ecc:	4b15      	ldr	r3, [pc, #84]	; (8009f24 <main+0x1264>)
 8009ece:	edd3 7a00 	vldr	s15, [r3]
 8009ed2:	4b14      	ldr	r3, [pc, #80]	; (8009f24 <main+0x1264>)
 8009ed4:	ed93 7a01 	vldr	s14, [r3, #4]
 8009ed8:	4b12      	ldr	r3, [pc, #72]	; (8009f24 <main+0x1264>)
 8009eda:	edd3 6a02 	vldr	s13, [r3, #8]
 8009ede:	eeb0 1a66 	vmov.f32	s2, s13
 8009ee2:	eef0 0a47 	vmov.f32	s1, s14
 8009ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8009eea:	4611      	mov	r1, r2
 8009eec:	480b      	ldr	r0, [pc, #44]	; (8009f1c <main+0x125c>)
 8009eee:	f000 fff5 	bl	800aedc <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8009ef2:	230a      	movs	r3, #10
 8009ef4:	2214      	movs	r2, #20
 8009ef6:	4909      	ldr	r1, [pc, #36]	; (8009f1c <main+0x125c>)
 8009ef8:	4809      	ldr	r0, [pc, #36]	; (8009f20 <main+0x1260>)
 8009efa:	f7f9 ff48 	bl	8003d8e <HAL_UART_Transmit>
						  break;
 8009efe:	e0b2      	b.n	800a066 <main+0x13a6>
 8009f00:	2000060f 	.word	0x2000060f
 8009f04:	200003e0 	.word	0x200003e0
 8009f08:	20000613 	.word	0x20000613
 8009f0c:	20000617 	.word	0x20000617
 8009f10:	2000060c 	.word	0x2000060c
 8009f14:	200003e8 	.word	0x200003e8
 8009f18:	200003e4 	.word	0x200003e4
 8009f1c:	20000624 	.word	0x20000624
 8009f20:	20000690 	.word	0x20000690
 8009f24:	200003a8 	.word	0x200003a8
 8009f28:	200003b0 	.word	0x200003b0
 8009f2c:	200003ac 	.word	0x200003ac
 8009f30:	20000488 	.word	0x20000488
 8009f34:	20000418 	.word	0x20000418
					  case 6:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll.in.kp, roll.in.ki, roll.in.kd);
 8009f38:	4b6f      	ldr	r3, [pc, #444]	; (800a0f8 <main+0x1438>)
 8009f3a:	edd3 7a00 	vldr	s15, [r3]
 8009f3e:	4b6e      	ldr	r3, [pc, #440]	; (800a0f8 <main+0x1438>)
 8009f40:	ed93 7a01 	vldr	s14, [r3, #4]
 8009f44:	4b6c      	ldr	r3, [pc, #432]	; (800a0f8 <main+0x1438>)
 8009f46:	edd3 6a02 	vldr	s13, [r3, #8]
 8009f4a:	eeb0 1a66 	vmov.f32	s2, s13
 8009f4e:	eef0 0a47 	vmov.f32	s1, s14
 8009f52:	eeb0 0a67 	vmov.f32	s0, s15
 8009f56:	2100      	movs	r1, #0
 8009f58:	4868      	ldr	r0, [pc, #416]	; (800a0fc <main+0x143c>)
 8009f5a:	f000 ffbf 	bl	800aedc <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8009f5e:	230a      	movs	r3, #10
 8009f60:	2214      	movs	r2, #20
 8009f62:	4966      	ldr	r1, [pc, #408]	; (800a0fc <main+0x143c>)
 8009f64:	4866      	ldr	r0, [pc, #408]	; (800a100 <main+0x1440>)
 8009f66:	f7f9 ff12 	bl	8003d8e <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll.out.kp, roll.out.ki, roll.out.kd);
 8009f6a:	4b63      	ldr	r3, [pc, #396]	; (800a0f8 <main+0x1438>)
 8009f6c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009f70:	4b61      	ldr	r3, [pc, #388]	; (800a0f8 <main+0x1438>)
 8009f72:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8009f76:	4b60      	ldr	r3, [pc, #384]	; (800a0f8 <main+0x1438>)
 8009f78:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8009f7c:	eeb0 1a66 	vmov.f32	s2, s13
 8009f80:	eef0 0a47 	vmov.f32	s1, s14
 8009f84:	eeb0 0a67 	vmov.f32	s0, s15
 8009f88:	2101      	movs	r1, #1
 8009f8a:	485c      	ldr	r0, [pc, #368]	; (800a0fc <main+0x143c>)
 8009f8c:	f000 ffa6 	bl	800aedc <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8009f90:	230a      	movs	r3, #10
 8009f92:	2214      	movs	r2, #20
 8009f94:	4959      	ldr	r1, [pc, #356]	; (800a0fc <main+0x143c>)
 8009f96:	485a      	ldr	r0, [pc, #360]	; (800a100 <main+0x1440>)
 8009f98:	f7f9 fef9 	bl	8003d8e <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8009f9c:	4b59      	ldr	r3, [pc, #356]	; (800a104 <main+0x1444>)
 8009f9e:	edd3 7a00 	vldr	s15, [r3]
 8009fa2:	4b58      	ldr	r3, [pc, #352]	; (800a104 <main+0x1444>)
 8009fa4:	ed93 7a01 	vldr	s14, [r3, #4]
 8009fa8:	4b56      	ldr	r3, [pc, #344]	; (800a104 <main+0x1444>)
 8009faa:	edd3 6a02 	vldr	s13, [r3, #8]
 8009fae:	eeb0 1a66 	vmov.f32	s2, s13
 8009fb2:	eef0 0a47 	vmov.f32	s1, s14
 8009fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8009fba:	2102      	movs	r1, #2
 8009fbc:	484f      	ldr	r0, [pc, #316]	; (800a0fc <main+0x143c>)
 8009fbe:	f000 ff8d 	bl	800aedc <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8009fc2:	230a      	movs	r3, #10
 8009fc4:	2214      	movs	r2, #20
 8009fc6:	494d      	ldr	r1, [pc, #308]	; (800a0fc <main+0x143c>)
 8009fc8:	484d      	ldr	r0, [pc, #308]	; (800a100 <main+0x1440>)
 8009fca:	f7f9 fee0 	bl	8003d8e <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8009fce:	4b4d      	ldr	r3, [pc, #308]	; (800a104 <main+0x1444>)
 8009fd0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8009fd4:	4b4b      	ldr	r3, [pc, #300]	; (800a104 <main+0x1444>)
 8009fd6:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8009fda:	4b4a      	ldr	r3, [pc, #296]	; (800a104 <main+0x1444>)
 8009fdc:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8009fe0:	eeb0 1a66 	vmov.f32	s2, s13
 8009fe4:	eef0 0a47 	vmov.f32	s1, s14
 8009fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8009fec:	2103      	movs	r1, #3
 8009fee:	4843      	ldr	r0, [pc, #268]	; (800a0fc <main+0x143c>)
 8009ff0:	f000 ff74 	bl	800aedc <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8009ff4:	230a      	movs	r3, #10
 8009ff6:	2214      	movs	r2, #20
 8009ff8:	4940      	ldr	r1, [pc, #256]	; (800a0fc <main+0x143c>)
 8009ffa:	4841      	ldr	r0, [pc, #260]	; (800a100 <main+0x1440>)
 8009ffc:	f7f9 fec7 	bl	8003d8e <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 800a000:	4b41      	ldr	r3, [pc, #260]	; (800a108 <main+0x1448>)
 800a002:	edd3 7a00 	vldr	s15, [r3]
 800a006:	4b40      	ldr	r3, [pc, #256]	; (800a108 <main+0x1448>)
 800a008:	ed93 7a01 	vldr	s14, [r3, #4]
 800a00c:	4b3e      	ldr	r3, [pc, #248]	; (800a108 <main+0x1448>)
 800a00e:	edd3 6a02 	vldr	s13, [r3, #8]
 800a012:	eeb0 1a66 	vmov.f32	s2, s13
 800a016:	eef0 0a47 	vmov.f32	s1, s14
 800a01a:	eeb0 0a67 	vmov.f32	s0, s15
 800a01e:	2104      	movs	r1, #4
 800a020:	4836      	ldr	r0, [pc, #216]	; (800a0fc <main+0x143c>)
 800a022:	f000 ff5b 	bl	800aedc <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a026:	230a      	movs	r3, #10
 800a028:	2214      	movs	r2, #20
 800a02a:	4934      	ldr	r1, [pc, #208]	; (800a0fc <main+0x143c>)
 800a02c:	4834      	ldr	r0, [pc, #208]	; (800a100 <main+0x1440>)
 800a02e:	f7f9 feae 	bl	8003d8e <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 800a032:	4b36      	ldr	r3, [pc, #216]	; (800a10c <main+0x144c>)
 800a034:	edd3 7a00 	vldr	s15, [r3]
 800a038:	4b34      	ldr	r3, [pc, #208]	; (800a10c <main+0x144c>)
 800a03a:	ed93 7a01 	vldr	s14, [r3, #4]
 800a03e:	4b33      	ldr	r3, [pc, #204]	; (800a10c <main+0x144c>)
 800a040:	edd3 6a02 	vldr	s13, [r3, #8]
 800a044:	eeb0 1a66 	vmov.f32	s2, s13
 800a048:	eef0 0a47 	vmov.f32	s1, s14
 800a04c:	eeb0 0a67 	vmov.f32	s0, s15
 800a050:	2105      	movs	r1, #5
 800a052:	482a      	ldr	r0, [pc, #168]	; (800a0fc <main+0x143c>)
 800a054:	f000 ff42 	bl	800aedc <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800a058:	230a      	movs	r3, #10
 800a05a:	2214      	movs	r2, #20
 800a05c:	4927      	ldr	r1, [pc, #156]	; (800a0fc <main+0x143c>)
 800a05e:	4828      	ldr	r0, [pc, #160]	; (800a100 <main+0x1440>)
 800a060:	f7f9 fe95 	bl	8003d8e <HAL_UART_Transmit>
						  break;
 800a064:	bf00      	nop
					  }
					  break;
 800a066:	bf00      	nop
				  }
			  }
		  }
	  }

	  if(tim7_20ms_flag == 1 && tim7_100ms_flag != 1)
 800a068:	4b29      	ldr	r3, [pc, #164]	; (800a110 <main+0x1450>)
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d10f      	bne.n	800a090 <main+0x13d0>
 800a070:	4b28      	ldr	r3, [pc, #160]	; (800a114 <main+0x1454>)
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d00b      	beq.n	800a090 <main+0x13d0>
	  {
		  tim7_20ms_flag = 0;
 800a078:	4b25      	ldr	r3, [pc, #148]	; (800a110 <main+0x1450>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	701a      	strb	r2, [r3, #0]

		  Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 800a07e:	481f      	ldr	r0, [pc, #124]	; (800a0fc <main+0x143c>)
 800a080:	f000 fcf0 	bl	800aa64 <Encode_Msg_AHRS>

		  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);
 800a084:	2214      	movs	r2, #20
 800a086:	491d      	ldr	r1, [pc, #116]	; (800a0fc <main+0x143c>)
 800a088:	481d      	ldr	r0, [pc, #116]	; (800a100 <main+0x1440>)
 800a08a:	f7f9 ff19 	bl	8003ec0 <HAL_UART_Transmit_IT>
 800a08e:	e018      	b.n	800a0c2 <main+0x1402>
	  }

	  else if(tim7_20ms_flag == 1 && tim7_100ms_flag == 1)
 800a090:	4b1f      	ldr	r3, [pc, #124]	; (800a110 <main+0x1450>)
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b01      	cmp	r3, #1
 800a096:	d114      	bne.n	800a0c2 <main+0x1402>
 800a098:	4b1e      	ldr	r3, [pc, #120]	; (800a114 <main+0x1454>)
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d110      	bne.n	800a0c2 <main+0x1402>
	  {
		  tim7_20ms_flag = 0;
 800a0a0:	4b1b      	ldr	r3, [pc, #108]	; (800a110 <main+0x1450>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	701a      	strb	r2, [r3, #0]
		  tim7_100ms_flag = 0;
 800a0a6:	4b1b      	ldr	r3, [pc, #108]	; (800a114 <main+0x1454>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	701a      	strb	r2, [r3, #0]

		  Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 800a0ac:	4813      	ldr	r0, [pc, #76]	; (800a0fc <main+0x143c>)
 800a0ae:	f000 fcd9 	bl	800aa64 <Encode_Msg_AHRS>
		  Encode_Msg_GPS(&telemetry_tx_buf[20]);
 800a0b2:	4819      	ldr	r0, [pc, #100]	; (800a118 <main+0x1458>)
 800a0b4:	f000 fe52 	bl	800ad5c <Encode_Msg_GPS>

		  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 40);
 800a0b8:	2228      	movs	r2, #40	; 0x28
 800a0ba:	4910      	ldr	r1, [pc, #64]	; (800a0fc <main+0x143c>)
 800a0bc:	4810      	ldr	r0, [pc, #64]	; (800a100 <main+0x1440>)
 800a0be:	f7f9 feff 	bl	8003ec0 <HAL_UART_Transmit_IT>
	  }


	  batVolt = adcVal * 0.003619f;
 800a0c2:	88fb      	ldrh	r3, [r7, #6]
 800a0c4:	ee07 3a90 	vmov	s15, r3
 800a0c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0cc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800a11c <main+0x145c>
 800a0d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0d4:	4b12      	ldr	r3, [pc, #72]	; (800a120 <main+0x1460>)
 800a0d6:	edc3 7a00 	vstr	s15, [r3]
	  //printf("%d\t%.2f\n", adcVal, batVolt);
	  if(batVolt < 10.0f)
 800a0da:	4b11      	ldr	r3, [pc, #68]	; (800a120 <main+0x1460>)
 800a0dc:	edd3 7a00 	vldr	s15, [r3]
 800a0e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a0e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ec:	d51c      	bpl.n	800a128 <main+0x1468>
	  {
		  low_bat_flag = 1;
 800a0ee:	4b0d      	ldr	r3, [pc, #52]	; (800a124 <main+0x1464>)
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	701a      	strb	r2, [r3, #0]
 800a0f4:	e01b      	b.n	800a12e <main+0x146e>
 800a0f6:	bf00      	nop
 800a0f8:	20000488 	.word	0x20000488
 800a0fc:	20000624 	.word	0x20000624
 800a100:	20000690 	.word	0x20000690
 800a104:	20000418 	.word	0x20000418
 800a108:	200003e0 	.word	0x200003e0
 800a10c:	200003a8 	.word	0x200003a8
 800a110:	20000218 	.word	0x20000218
 800a114:	20000219 	.word	0x20000219
 800a118:	20000638 	.word	0x20000638
 800a11c:	3b6d2cbf 	.word	0x3b6d2cbf
 800a120:	20000608 	.word	0x20000608
 800a124:	2000020c 	.word	0x2000020c
	  }
	  else
	  {
		  low_bat_flag = 0;
 800a128:	4bbb      	ldr	r3, [pc, #748]	; (800a418 <main+0x1758>)
 800a12a:	2200      	movs	r2, #0
 800a12c:	701a      	strb	r2, [r3, #0]
	  }

	  if(BNO080_dataAvailable() == 1)
 800a12e:	f7fc f9ad 	bl	800648c <BNO080_dataAvailable>
 800a132:	4603      	mov	r3, r0
 800a134:	2b01      	cmp	r3, #1
 800a136:	d134      	bne.n	800a1a2 <main+0x14e2>
	  {
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 800a138:	2101      	movs	r1, #1
 800a13a:	48b8      	ldr	r0, [pc, #736]	; (800a41c <main+0x175c>)
 800a13c:	f7fe fd88 	bl	8008c50 <LL_GPIO_TogglePin>

		  q[0] = BNO080_getQuatI();
 800a140:	f7fc fb30 	bl	80067a4 <BNO080_getQuatI>
 800a144:	eef0 7a40 	vmov.f32	s15, s0
 800a148:	edc7 7a02 	vstr	s15, [r7, #8]
		  q[1] = BNO080_getQuatJ();
 800a14c:	f7fc fb40 	bl	80067d0 <BNO080_getQuatJ>
 800a150:	eef0 7a40 	vmov.f32	s15, s0
 800a154:	edc7 7a03 	vstr	s15, [r7, #12]
		  q[2] = BNO080_getQuatK();
 800a158:	f7fc fb50 	bl	80067fc <BNO080_getQuatK>
 800a15c:	eef0 7a40 	vmov.f32	s15, s0
 800a160:	edc7 7a04 	vstr	s15, [r7, #16]
		  q[3] = BNO080_getQuatReal();
 800a164:	f7fc fb60 	bl	8006828 <BNO080_getQuatReal>
 800a168:	eef0 7a40 	vmov.f32	s15, s0
 800a16c:	edc7 7a05 	vstr	s15, [r7, #20]
		  quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 800a170:	f7fc fb70 	bl	8006854 <BNO080_getQuatRadianAccuracy>
 800a174:	ed87 0a06 	vstr	s0, [r7, #24]

		  Quaternion_Update(&q[0]);
 800a178:	f107 0308 	add.w	r3, r7, #8
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fe f933 	bl	80083e8 <Quaternion_Update>

		  BNO080_Roll = -BNO080_Roll;
 800a182:	4ba7      	ldr	r3, [pc, #668]	; (800a420 <main+0x1760>)
 800a184:	edd3 7a00 	vldr	s15, [r3]
 800a188:	eef1 7a67 	vneg.f32	s15, s15
 800a18c:	4ba4      	ldr	r3, [pc, #656]	; (800a420 <main+0x1760>)
 800a18e:	edc3 7a00 	vstr	s15, [r3]
		  BNO080_Pitch = -BNO080_Pitch;
 800a192:	4ba4      	ldr	r3, [pc, #656]	; (800a424 <main+0x1764>)
 800a194:	edd3 7a00 	vldr	s15, [r3]
 800a198:	eef1 7a67 	vneg.f32	s15, s15
 800a19c:	4ba1      	ldr	r3, [pc, #644]	; (800a424 <main+0x1764>)
 800a19e:	edc3 7a00 	vstr	s15, [r3]

		  //printf("%.2f\t%.2f\n", BNO080_Roll, BNO080_Pitch);
		  //printf("%.2f\n", BNO080_Yaw);
	  }

	  if(ICM20602_DataReady() == 1)
 800a1a2:	f7fd f939 	bl	8007418 <ICM20602_DataReady>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d14c      	bne.n	800a246 <main+0x1586>
	  {
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 800a1ac:	2102      	movs	r1, #2
 800a1ae:	489b      	ldr	r0, [pc, #620]	; (800a41c <main+0x175c>)
 800a1b0:	f7fe fd4e 	bl	8008c50 <LL_GPIO_TogglePin>

		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 800a1b4:	489c      	ldr	r0, [pc, #624]	; (800a428 <main+0x1768>)
 800a1b6:	f7fd f903 	bl	80073c0 <ICM20602_Get3AxisGyroRawData>

		  ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 800a1ba:	4b9c      	ldr	r3, [pc, #624]	; (800a42c <main+0x176c>)
 800a1bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a1c0:	ee07 3a90 	vmov	s15, r3
 800a1c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1c8:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800a430 <main+0x1770>
 800a1cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a1d0:	eddf 6a98 	vldr	s13, [pc, #608]	; 800a434 <main+0x1774>
 800a1d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a1d8:	4b94      	ldr	r3, [pc, #592]	; (800a42c <main+0x176c>)
 800a1da:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 800a1de:	4b93      	ldr	r3, [pc, #588]	; (800a42c <main+0x176c>)
 800a1e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a1e4:	ee07 3a90 	vmov	s15, r3
 800a1e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1ec:	ed9f 7a90 	vldr	s14, [pc, #576]	; 800a430 <main+0x1770>
 800a1f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a1f4:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800a434 <main+0x1774>
 800a1f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a1fc:	4b8b      	ldr	r3, [pc, #556]	; (800a42c <main+0x176c>)
 800a1fe:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 800a202:	4b8a      	ldr	r3, [pc, #552]	; (800a42c <main+0x176c>)
 800a204:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800a208:	ee07 3a90 	vmov	s15, r3
 800a20c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a210:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800a430 <main+0x1770>
 800a214:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a218:	eddf 6a86 	vldr	s13, [pc, #536]	; 800a434 <main+0x1774>
 800a21c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a220:	4b82      	ldr	r3, [pc, #520]	; (800a42c <main+0x176c>)
 800a222:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		  ICM20602.gyro_x = -ICM20602.gyro_x;
 800a226:	4b81      	ldr	r3, [pc, #516]	; (800a42c <main+0x176c>)
 800a228:	edd3 7a07 	vldr	s15, [r3, #28]
 800a22c:	eef1 7a67 	vneg.f32	s15, s15
 800a230:	4b7e      	ldr	r3, [pc, #504]	; (800a42c <main+0x176c>)
 800a232:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_z = -ICM20602.gyro_z;
 800a236:	4b7d      	ldr	r3, [pc, #500]	; (800a42c <main+0x176c>)
 800a238:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800a23c:	eef1 7a67 	vneg.f32	s15, s15
 800a240:	4b7a      	ldr	r3, [pc, #488]	; (800a42c <main+0x176c>)
 800a242:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		  //printf("%d,%d,%d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
		  //printf("%d,%d,%d\n", (int)(ICM20602.gyro_x*100), (int)(ICM20602.gyro_y*100), (int)(ICM20602.gyro_z*100));
	  }

	  if(LPS22HH_DataReady() == 1)
 800a246:	f7fd fb57 	bl	80078f8 <LPS22HH_DataReady>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d138      	bne.n	800a2c2 <main+0x1602>
	  {
		  LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 800a250:	4879      	ldr	r0, [pc, #484]	; (800a438 <main+0x1778>)
 800a252:	f7fd fb5d 	bl	8007910 <LPS22HH_GetPressure>
		  LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 800a256:	4879      	ldr	r0, [pc, #484]	; (800a43c <main+0x177c>)
 800a258:	f7fd fb67 	bl	800792a <LPS22HH_GetTemperature>

		  LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw/100.f);
 800a25c:	4b76      	ldr	r3, [pc, #472]	; (800a438 <main+0x1778>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	ee07 3a90 	vmov	s15, r3
 800a264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a268:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800a440 <main+0x1780>
 800a26c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a270:	4b71      	ldr	r3, [pc, #452]	; (800a438 <main+0x1778>)
 800a272:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a276:	ee07 3a90 	vmov	s15, r3
 800a27a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a27e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800a444 <main+0x1784>
 800a282:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800a286:	eef0 0a46 	vmov.f32	s1, s12
 800a28a:	eeb0 0a66 	vmov.f32	s0, s13
 800a28e:	f7fd fb59 	bl	8007944 <getAltitude2>
 800a292:	eef0 7a40 	vmov.f32	s15, s0
 800a296:	4b68      	ldr	r3, [pc, #416]	; (800a438 <main+0x1778>)
 800a298:	edc3 7a02 	vstr	s15, [r3, #8]

#define X 0.90f
		  LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * X + LPS22HH.baroAlt * (1.0f - X);
 800a29c:	4b66      	ldr	r3, [pc, #408]	; (800a438 <main+0x1778>)
 800a29e:	edd3 7a03 	vldr	s15, [r3, #12]
 800a2a2:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800a448 <main+0x1788>
 800a2a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a2aa:	4b63      	ldr	r3, [pc, #396]	; (800a438 <main+0x1778>)
 800a2ac:	edd3 7a02 	vldr	s15, [r3, #8]
 800a2b0:	eddf 6a66 	vldr	s13, [pc, #408]	; 800a44c <main+0x178c>
 800a2b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a2b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2bc:	4b5e      	ldr	r3, [pc, #376]	; (800a438 <main+0x1778>)
 800a2be:	edc3 7a03 	vstr	s15, [r3, #12]

		  //printf("%d,%d\n", (int)(LPS22HH.baroAlt*100), (int)(LPS22HH.baroAltFilt*100));
	  }

	  if(m8n_rx_cplt_flag == 1)
 800a2c2:	4b63      	ldr	r3, [pc, #396]	; (800a450 <main+0x1790>)
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d111      	bne.n	800a2ee <main+0x162e>
	  {
		  m8n_rx_cplt_flag = 0;
 800a2ca:	4b61      	ldr	r3, [pc, #388]	; (800a450 <main+0x1790>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	701a      	strb	r2, [r3, #0]

		  if(M8N_UBX_CHKSUM_Check(&m8n_rx_buf[0], 36) == 1)
 800a2d0:	2124      	movs	r1, #36	; 0x24
 800a2d2:	4860      	ldr	r0, [pc, #384]	; (800a454 <main+0x1794>)
 800a2d4:	f7fd fd1c 	bl	8007d10 <M8N_UBX_CHKSUM_Check>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d107      	bne.n	800a2ee <main+0x162e>
		  {
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 800a2de:	2104      	movs	r1, #4
 800a2e0:	484e      	ldr	r0, [pc, #312]	; (800a41c <main+0x175c>)
 800a2e2:	f7fe fcb5 	bl	8008c50 <LL_GPIO_TogglePin>
			  M8N_UBX_NAV_POSLLH_Parsing(&m8n_rx_buf[0], &posllh);
 800a2e6:	495c      	ldr	r1, [pc, #368]	; (800a458 <main+0x1798>)
 800a2e8:	485a      	ldr	r0, [pc, #360]	; (800a454 <main+0x1794>)
 800a2ea:	f7fd fd4b 	bl	8007d84 <M8N_UBX_NAV_POSLLH_Parsing>

			  //printf("LAT: %ld\tLON: %ld\tHeight: %ld\n", posllh.lat, posllh.lon, posllh.height);
		  }
	  }

	  if(ibus_rx_cplt_flag == 1)
 800a2ee:	4b5b      	ldr	r3, [pc, #364]	; (800a45c <main+0x179c>)
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	f040 80c3 	bne.w	800a47e <main+0x17be>
	  {
		  ibus_rx_cplt_flag = 0;
 800a2f8:	4b58      	ldr	r3, [pc, #352]	; (800a45c <main+0x179c>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	701a      	strb	r2, [r3, #0]
		  if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 800a2fe:	2120      	movs	r1, #32
 800a300:	4857      	ldr	r0, [pc, #348]	; (800a460 <main+0x17a0>)
 800a302:	f7fc fd47 	bl	8006d94 <iBus_Check_CHKSUM>
 800a306:	4603      	mov	r3, r0
 800a308:	2b01      	cmp	r3, #1
 800a30a:	f040 80b8 	bne.w	800a47e <main+0x17be>
		  {
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 800a30e:	2104      	movs	r1, #4
 800a310:	4842      	ldr	r0, [pc, #264]	; (800a41c <main+0x175c>)
 800a312:	f7fe fc9d 	bl	8008c50 <LL_GPIO_TogglePin>

			  iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800a316:	4953      	ldr	r1, [pc, #332]	; (800a464 <main+0x17a4>)
 800a318:	4851      	ldr	r0, [pc, #324]	; (800a460 <main+0x17a0>)
 800a31a:	f7fc fd71 	bl	8006e00 <iBus_Parsing>
			  iBus_rx_cnt++;
 800a31e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a322:	3301      	adds	r3, #1
 800a324:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			  ref_roll_filt = ref_roll_filt*0.7 + (iBus.RH-1500)*0.1f*0.3;
 800a328:	4b4f      	ldr	r3, [pc, #316]	; (800a468 <main+0x17a8>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7f6 f90b 	bl	8000548 <__aeabi_f2d>
 800a332:	a335      	add	r3, pc, #212	; (adr r3, 800a408 <main+0x1748>)
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	f7f6 f95e 	bl	80005f8 <__aeabi_dmul>
 800a33c:	4603      	mov	r3, r0
 800a33e:	460c      	mov	r4, r1
 800a340:	4625      	mov	r5, r4
 800a342:	461c      	mov	r4, r3
 800a344:	4b47      	ldr	r3, [pc, #284]	; (800a464 <main+0x17a4>)
 800a346:	881b      	ldrh	r3, [r3, #0]
 800a348:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800a34c:	ee07 3a90 	vmov	s15, r3
 800a350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a354:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800a46c <main+0x17ac>
 800a358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a35c:	ee17 0a90 	vmov	r0, s15
 800a360:	f7f6 f8f2 	bl	8000548 <__aeabi_f2d>
 800a364:	a32a      	add	r3, pc, #168	; (adr r3, 800a410 <main+0x1750>)
 800a366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36a:	f7f6 f945 	bl	80005f8 <__aeabi_dmul>
 800a36e:	4602      	mov	r2, r0
 800a370:	460b      	mov	r3, r1
 800a372:	4620      	mov	r0, r4
 800a374:	4629      	mov	r1, r5
 800a376:	f7f5 ff89 	bl	800028c <__adddf3>
 800a37a:	4603      	mov	r3, r0
 800a37c:	460c      	mov	r4, r1
 800a37e:	4618      	mov	r0, r3
 800a380:	4621      	mov	r1, r4
 800a382:	f7f6 fc11 	bl	8000ba8 <__aeabi_d2f>
 800a386:	4602      	mov	r2, r0
 800a388:	4b37      	ldr	r3, [pc, #220]	; (800a468 <main+0x17a8>)
 800a38a:	601a      	str	r2, [r3, #0]
			  ref_pitch_filt = ref_pitch_filt*0.7 + (iBus.RV-1500)*0.1f*0.3;
 800a38c:	4b38      	ldr	r3, [pc, #224]	; (800a470 <main+0x17b0>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4618      	mov	r0, r3
 800a392:	f7f6 f8d9 	bl	8000548 <__aeabi_f2d>
 800a396:	a31c      	add	r3, pc, #112	; (adr r3, 800a408 <main+0x1748>)
 800a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39c:	f7f6 f92c 	bl	80005f8 <__aeabi_dmul>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	4625      	mov	r5, r4
 800a3a6:	461c      	mov	r4, r3
 800a3a8:	4b2e      	ldr	r3, [pc, #184]	; (800a464 <main+0x17a4>)
 800a3aa:	885b      	ldrh	r3, [r3, #2]
 800a3ac:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800a3b0:	ee07 3a90 	vmov	s15, r3
 800a3b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3b8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800a46c <main+0x17ac>
 800a3bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a3c0:	ee17 0a90 	vmov	r0, s15
 800a3c4:	f7f6 f8c0 	bl	8000548 <__aeabi_f2d>
 800a3c8:	a311      	add	r3, pc, #68	; (adr r3, 800a410 <main+0x1750>)
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	f7f6 f913 	bl	80005f8 <__aeabi_dmul>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	4629      	mov	r1, r5
 800a3da:	f7f5 ff57 	bl	800028c <__adddf3>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	4621      	mov	r1, r4
 800a3e6:	f7f6 fbdf 	bl	8000ba8 <__aeabi_d2f>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	4b20      	ldr	r3, [pc, #128]	; (800a470 <main+0x17b0>)
 800a3ee:	601a      	str	r2, [r3, #0]

//			  ref_roll_filt = (iBus.RH-1500)*0.1f;
//			  ref_pitch_filt = (iBus.RV-1500)*0.1f;

			  if(iBus_isActiveFailsafe(&iBus) == 1)
 800a3f0:	481c      	ldr	r0, [pc, #112]	; (800a464 <main+0x17a4>)
 800a3f2:	f7fc fd7d 	bl	8006ef0 <iBus_isActiveFailsafe>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d13d      	bne.n	800a478 <main+0x17b8>
			  {
				  failsafe_flag = 1;
 800a3fc:	4b1d      	ldr	r3, [pc, #116]	; (800a474 <main+0x17b4>)
 800a3fe:	2201      	movs	r2, #1
 800a400:	701a      	strb	r2, [r3, #0]
 800a402:	e03c      	b.n	800a47e <main+0x17be>
 800a404:	f3af 8000 	nop.w
 800a408:	66666666 	.word	0x66666666
 800a40c:	3fe66666 	.word	0x3fe66666
 800a410:	33333333 	.word	0x33333333
 800a414:	3fd33333 	.word	0x3fd33333
 800a418:	2000020c 	.word	0x2000020c
 800a41c:	40020800 	.word	0x40020800
 800a420:	200004f8 	.word	0x200004f8
 800a424:	20000500 	.word	0x20000500
 800a428:	20000348 	.word	0x20000348
 800a42c:	20000340 	.word	0x20000340
 800a430:	44fa0000 	.word	0x44fa0000
 800a434:	47000000 	.word	0x47000000
 800a438:	20000368 	.word	0x20000368
 800a43c:	2000036c 	.word	0x2000036c
 800a440:	45800000 	.word	0x45800000
 800a444:	42c80000 	.word	0x42c80000
 800a448:	3f666666 	.word	0x3f666666
 800a44c:	3dccccd0 	.word	0x3dccccd0
 800a450:	20000214 	.word	0x20000214
 800a454:	2000066c 	.word	0x2000066c
 800a458:	20000378 	.word	0x20000378
 800a45c:	20000215 	.word	0x20000215
 800a460:	2000064c 	.word	0x2000064c
 800a464:	2000031c 	.word	0x2000031c
 800a468:	20000600 	.word	0x20000600
 800a46c:	3dcccccd 	.word	0x3dcccccd
 800a470:	20000604 	.word	0x20000604
 800a474:	2000020b 	.word	0x2000020b
			  }
			  else
			  {
				  failsafe_flag = 0;
 800a478:	4b18      	ldr	r3, [pc, #96]	; (800a4dc <main+0x181c>)
 800a47a:	2200      	movs	r2, #0
 800a47c:	701a      	strb	r2, [r3, #0]
//					  iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwC);
//			  HAL_Delay(100);
		  }
	  }

	  if(tim7_1000ms_flag == 1)
 800a47e:	4b18      	ldr	r3, [pc, #96]	; (800a4e0 <main+0x1820>)
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d10c      	bne.n	800a4a0 <main+0x17e0>
	  {
		  tim7_1000ms_flag = 0;
 800a486:	4b16      	ldr	r3, [pc, #88]	; (800a4e0 <main+0x1820>)
 800a488:	2200      	movs	r2, #0
 800a48a:	701a      	strb	r2, [r3, #0]
		  if(iBus_rx_cnt == 0)
 800a48c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a490:	2b00      	cmp	r3, #0
 800a492:	d102      	bne.n	800a49a <main+0x17da>
		  {
			  failsafe_flag = 2;
 800a494:	4b11      	ldr	r3, [pc, #68]	; (800a4dc <main+0x181c>)
 800a496:	2202      	movs	r2, #2
 800a498:	701a      	strb	r2, [r3, #0]
		  }
		  iBus_rx_cnt = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	  }

	  if(failsafe_flag == 1 || failsafe_flag == 2 || low_bat_flag == 1 || iBus.SwC == 2000)
 800a4a0:	4b0e      	ldr	r3, [pc, #56]	; (800a4dc <main+0x181c>)
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d00c      	beq.n	800a4c2 <main+0x1802>
 800a4a8:	4b0c      	ldr	r3, [pc, #48]	; (800a4dc <main+0x181c>)
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	d008      	beq.n	800a4c2 <main+0x1802>
 800a4b0:	4b0c      	ldr	r3, [pc, #48]	; (800a4e4 <main+0x1824>)
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d004      	beq.n	800a4c2 <main+0x1802>
 800a4b8:	4b0b      	ldr	r3, [pc, #44]	; (800a4e8 <main+0x1828>)
 800a4ba:	899b      	ldrh	r3, [r3, #12]
 800a4bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a4c0:	d105      	bne.n	800a4ce <main+0x180e>
	  {
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800a4c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a4c6:	4809      	ldr	r0, [pc, #36]	; (800a4ec <main+0x182c>)
 800a4c8:	f7fe fb40 	bl	8008b4c <LL_TIM_CC_EnableChannel>
 800a4cc:	e004      	b.n	800a4d8 <main+0x1818>
	  }
	  else
	  {
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800a4ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a4d2:	4806      	ldr	r0, [pc, #24]	; (800a4ec <main+0x182c>)
 800a4d4:	f7fe fb4b 	bl	8008b6e <LL_TIM_CC_DisableChannel>
	  if(tim7_1ms_flag == 1)
 800a4d8:	f7fe bfc7 	b.w	800946a <main+0x7aa>
 800a4dc:	2000020b 	.word	0x2000020b
 800a4e0:	2000021a 	.word	0x2000021a
 800a4e4:	2000020c 	.word	0x2000020c
 800a4e8:	2000031c 	.word	0x2000031c
 800a4ec:	40000400 	.word	0x40000400

0800a4f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b094      	sub	sp, #80	; 0x50
 800a4f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a4f6:	f107 0320 	add.w	r3, r7, #32
 800a4fa:	2230      	movs	r2, #48	; 0x30
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	4618      	mov	r0, r3
 800a500:	f001 ff48 	bl	800c394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a504:	f107 030c 	add.w	r3, r7, #12
 800a508:	2200      	movs	r2, #0
 800a50a:	601a      	str	r2, [r3, #0]
 800a50c:	605a      	str	r2, [r3, #4]
 800a50e:	609a      	str	r2, [r3, #8]
 800a510:	60da      	str	r2, [r3, #12]
 800a512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a514:	2300      	movs	r3, #0
 800a516:	60bb      	str	r3, [r7, #8]
 800a518:	4b28      	ldr	r3, [pc, #160]	; (800a5bc <SystemClock_Config+0xcc>)
 800a51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51c:	4a27      	ldr	r2, [pc, #156]	; (800a5bc <SystemClock_Config+0xcc>)
 800a51e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a522:	6413      	str	r3, [r2, #64]	; 0x40
 800a524:	4b25      	ldr	r3, [pc, #148]	; (800a5bc <SystemClock_Config+0xcc>)
 800a526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a52c:	60bb      	str	r3, [r7, #8]
 800a52e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a530:	2300      	movs	r3, #0
 800a532:	607b      	str	r3, [r7, #4]
 800a534:	4b22      	ldr	r3, [pc, #136]	; (800a5c0 <SystemClock_Config+0xd0>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a21      	ldr	r2, [pc, #132]	; (800a5c0 <SystemClock_Config+0xd0>)
 800a53a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a53e:	6013      	str	r3, [r2, #0]
 800a540:	4b1f      	ldr	r3, [pc, #124]	; (800a5c0 <SystemClock_Config+0xd0>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a548:	607b      	str	r3, [r7, #4]
 800a54a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a54c:	2301      	movs	r3, #1
 800a54e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a554:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a556:	2302      	movs	r3, #2
 800a558:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a55a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a55e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800a560:	2304      	movs	r3, #4
 800a562:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800a564:	23a8      	movs	r3, #168	; 0xa8
 800a566:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a568:	2302      	movs	r3, #2
 800a56a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a56c:	2304      	movs	r3, #4
 800a56e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a570:	f107 0320 	add.w	r3, r7, #32
 800a574:	4618      	mov	r0, r3
 800a576:	f7f8 ff5b 	bl	8003430 <HAL_RCC_OscConfig>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d001      	beq.n	800a584 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800a580:	f000 fcfe 	bl	800af80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a584:	230f      	movs	r3, #15
 800a586:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a588:	2302      	movs	r3, #2
 800a58a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a58c:	2300      	movs	r3, #0
 800a58e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a590:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a594:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a59a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a59c:	f107 030c 	add.w	r3, r7, #12
 800a5a0:	2105      	movs	r1, #5
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7f9 f9b4 	bl	8003910 <HAL_RCC_ClockConfig>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d001      	beq.n	800a5b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800a5ae:	f000 fce7 	bl	800af80 <Error_Handler>
  }
}
 800a5b2:	bf00      	nop
 800a5b4:	3750      	adds	r7, #80	; 0x50
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	40023800 	.word	0x40023800
 800a5c0:	40007000 	.word	0x40007000

0800a5c4 <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1)
 800a5c8:	4b0e      	ldr	r3, [pc, #56]	; (800a604 <Is_iBus_Throttle_Min+0x40>)
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d115      	bne.n	800a5fc <Is_iBus_Throttle_Min+0x38>
	{
		ibus_rx_cplt_flag = 0;
 800a5d0:	4b0c      	ldr	r3, [pc, #48]	; (800a604 <Is_iBus_Throttle_Min+0x40>)
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 800a5d6:	2120      	movs	r1, #32
 800a5d8:	480b      	ldr	r0, [pc, #44]	; (800a608 <Is_iBus_Throttle_Min+0x44>)
 800a5da:	f7fc fbdb 	bl	8006d94 <iBus_Check_CHKSUM>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d10b      	bne.n	800a5fc <Is_iBus_Throttle_Min+0x38>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800a5e4:	4909      	ldr	r1, [pc, #36]	; (800a60c <Is_iBus_Throttle_Min+0x48>)
 800a5e6:	4808      	ldr	r0, [pc, #32]	; (800a608 <Is_iBus_Throttle_Min+0x44>)
 800a5e8:	f7fc fc0a 	bl	8006e00 <iBus_Parsing>
			if(iBus.LV < 1010) return 1;
 800a5ec:	4b07      	ldr	r3, [pc, #28]	; (800a60c <Is_iBus_Throttle_Min+0x48>)
 800a5ee:	889b      	ldrh	r3, [r3, #4]
 800a5f0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d801      	bhi.n	800a5fc <Is_iBus_Throttle_Min+0x38>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e000      	b.n	800a5fe <Is_iBus_Throttle_Min+0x3a>
		}
	}

	return 0;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	20000215 	.word	0x20000215
 800a608:	2000064c 	.word	0x2000064c
 800a60c:	2000031c 	.word	0x2000031c

0800a610 <ESC_Calibration>:

void ESC_Calibration(void)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	af00      	add	r7, sp, #0
	  TIM5->CCR1 = 21000;
 800a614:	4b14      	ldr	r3, [pc, #80]	; (800a668 <ESC_Calibration+0x58>)
 800a616:	f245 2208 	movw	r2, #21000	; 0x5208
 800a61a:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 21000;
 800a61c:	4b12      	ldr	r3, [pc, #72]	; (800a668 <ESC_Calibration+0x58>)
 800a61e:	f245 2208 	movw	r2, #21000	; 0x5208
 800a622:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 21000;
 800a624:	4b10      	ldr	r3, [pc, #64]	; (800a668 <ESC_Calibration+0x58>)
 800a626:	f245 2208 	movw	r2, #21000	; 0x5208
 800a62a:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 21000;
 800a62c:	4b0e      	ldr	r3, [pc, #56]	; (800a668 <ESC_Calibration+0x58>)
 800a62e:	f245 2208 	movw	r2, #21000	; 0x5208
 800a632:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(7000);
 800a634:	f641 3058 	movw	r0, #7000	; 0x1b58
 800a638:	f7f6 fcf8 	bl	800102c <HAL_Delay>
	  TIM5->CCR1 = 10500;
 800a63c:	4b0a      	ldr	r3, [pc, #40]	; (800a668 <ESC_Calibration+0x58>)
 800a63e:	f642 1204 	movw	r2, #10500	; 0x2904
 800a642:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 10500;
 800a644:	4b08      	ldr	r3, [pc, #32]	; (800a668 <ESC_Calibration+0x58>)
 800a646:	f642 1204 	movw	r2, #10500	; 0x2904
 800a64a:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 10500;
 800a64c:	4b06      	ldr	r3, [pc, #24]	; (800a668 <ESC_Calibration+0x58>)
 800a64e:	f642 1204 	movw	r2, #10500	; 0x2904
 800a652:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 10500;
 800a654:	4b04      	ldr	r3, [pc, #16]	; (800a668 <ESC_Calibration+0x58>)
 800a656:	f642 1204 	movw	r2, #10500	; 0x2904
 800a65a:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(8000);
 800a65c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800a660:	f7f6 fce4 	bl	800102c <HAL_Delay>
}
 800a664:	bf00      	nop
 800a666:	bd80      	pop	{r7, pc}
 800a668:	40000c00 	.word	0x40000c00

0800a66c <Is_iBus_Received>:

int Is_iBus_Received(void)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1)
 800a670:	4b0b      	ldr	r3, [pc, #44]	; (800a6a0 <Is_iBus_Received+0x34>)
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d10f      	bne.n	800a698 <Is_iBus_Received+0x2c>
	{
		ibus_rx_cplt_flag = 0;
 800a678:	4b09      	ldr	r3, [pc, #36]	; (800a6a0 <Is_iBus_Received+0x34>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 800a67e:	2120      	movs	r1, #32
 800a680:	4808      	ldr	r0, [pc, #32]	; (800a6a4 <Is_iBus_Received+0x38>)
 800a682:	f7fc fb87 	bl	8006d94 <iBus_Check_CHKSUM>
 800a686:	4603      	mov	r3, r0
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d105      	bne.n	800a698 <Is_iBus_Received+0x2c>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800a68c:	4906      	ldr	r1, [pc, #24]	; (800a6a8 <Is_iBus_Received+0x3c>)
 800a68e:	4805      	ldr	r0, [pc, #20]	; (800a6a4 <Is_iBus_Received+0x38>)
 800a690:	f7fc fbb6 	bl	8006e00 <iBus_Parsing>
			return 1;
 800a694:	2301      	movs	r3, #1
 800a696:	e000      	b.n	800a69a <Is_iBus_Received+0x2e>
		}
	}

	return 0;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	20000215 	.word	0x20000215
 800a6a4:	2000064c 	.word	0x2000064c
 800a6a8:	2000031c 	.word	0x2000031c

0800a6ac <BNO080_Calibration>:

void BNO080_Calibration(void)
{
 800a6ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a6b0:	b090      	sub	sp, #64	; 0x40
 800a6b2:	af06      	add	r7, sp, #24
	//Resets BNO080 to disable All output
	BNO080_Initialization();
 800a6b4:	f7fb fe54 	bl	8006360 <BNO080_Initialization>

	//BNO080/BNO085 Configuration
	//Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
	//Enable Game Rotation Vector output
	//Enable Magnetic Field output
	BNO080_calibrateAll(); //Turn on cal for Accel, Gyro, and Mag
 800a6b8:	f7fc f981 	bl	80069be <BNO080_calibrateAll>
	BNO080_enableGameRotationVector(20000); //Send data update every 20ms (50Hz)
 800a6bc:	f644 6020 	movw	r0, #20000	; 0x4e20
 800a6c0:	f7fc f95f 	bl	8006982 <BNO080_enableGameRotationVector>
	BNO080_enableMagnetometer(20000); //Send data update every 20ms (50Hz)
 800a6c4:	f644 6020 	movw	r0, #20000	; 0x4e20
 800a6c8:	f7fc f96a 	bl	80069a0 <BNO080_enableMagnetometer>

	//Once magnetic field is 2 or 3, run the Save DCD Now command
  	printf("Calibrating BNO080. Pull up FS-i6 SWC to end calibration and save to flash\n");
 800a6cc:	489d      	ldr	r0, [pc, #628]	; (800a944 <BNO080_Calibration+0x298>)
 800a6ce:	f002 fb39 	bl	800cd44 <puts>
  	printf("Output in form x, y, z, in uTesla\n\n");
 800a6d2:	489d      	ldr	r0, [pc, #628]	; (800a948 <BNO080_Calibration+0x29c>)
 800a6d4:	f002 fb36 	bl	800cd44 <puts>

	//while loop for calibration procedure
	//Iterates until iBus.SwC is mid point (1500)
	//Calibration procedure should be done while this loop is in iteration.
	while(iBus.SwC == 1500)
 800a6d8:	e0b8      	b.n	800a84c <BNO080_Calibration+0x1a0>
	{
		if(BNO080_dataAvailable() == 1)
 800a6da:	f7fb fed7 	bl	800648c <BNO080_dataAvailable>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	f040 80ae 	bne.w	800a842 <BNO080_Calibration+0x196>
		{
			//Observing the status bit of the magnetic field output
			float x = BNO080_getMagX();
 800a6e6:	f7fc f8d7 	bl	8006898 <BNO080_getMagX>
 800a6ea:	ed87 0a08 	vstr	s0, [r7, #32]
			float y = BNO080_getMagY();
 800a6ee:	f7fc f8e9 	bl	80068c4 <BNO080_getMagY>
 800a6f2:	ed87 0a07 	vstr	s0, [r7, #28]
			float z = BNO080_getMagZ();
 800a6f6:	f7fc f8fb 	bl	80068f0 <BNO080_getMagZ>
 800a6fa:	ed87 0a06 	vstr	s0, [r7, #24]
			unsigned char accuracy = BNO080_getMagAccuracy();
 800a6fe:	f7fc f90d 	bl	800691c <BNO080_getMagAccuracy>
 800a702:	4603      	mov	r3, r0
 800a704:	75fb      	strb	r3, [r7, #23]

			float quatI = BNO080_getQuatI();
 800a706:	f7fc f84d 	bl	80067a4 <BNO080_getQuatI>
 800a70a:	ed87 0a04 	vstr	s0, [r7, #16]
			float quatJ = BNO080_getQuatJ();
 800a70e:	f7fc f85f 	bl	80067d0 <BNO080_getQuatJ>
 800a712:	ed87 0a03 	vstr	s0, [r7, #12]
			float quatK = BNO080_getQuatK();
 800a716:	f7fc f871 	bl	80067fc <BNO080_getQuatK>
 800a71a:	ed87 0a02 	vstr	s0, [r7, #8]
			float quatReal = BNO080_getQuatReal();
 800a71e:	f7fc f883 	bl	8006828 <BNO080_getQuatReal>
 800a722:	ed87 0a01 	vstr	s0, [r7, #4]
			unsigned char sensorAccuracy = BNO080_getQuatAccuracy();
 800a726:	f7fc f8ab 	bl	8006880 <BNO080_getQuatAccuracy>
 800a72a:	4603      	mov	r3, r0
 800a72c:	70fb      	strb	r3, [r7, #3]

			printf("%f,%f,%f,", x, y, z);
 800a72e:	6a38      	ldr	r0, [r7, #32]
 800a730:	f7f5 ff0a 	bl	8000548 <__aeabi_f2d>
 800a734:	4680      	mov	r8, r0
 800a736:	4689      	mov	r9, r1
 800a738:	69f8      	ldr	r0, [r7, #28]
 800a73a:	f7f5 ff05 	bl	8000548 <__aeabi_f2d>
 800a73e:	4604      	mov	r4, r0
 800a740:	460d      	mov	r5, r1
 800a742:	69b8      	ldr	r0, [r7, #24]
 800a744:	f7f5 ff00 	bl	8000548 <__aeabi_f2d>
 800a748:	4602      	mov	r2, r0
 800a74a:	460b      	mov	r3, r1
 800a74c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a750:	e9cd 4500 	strd	r4, r5, [sp]
 800a754:	4642      	mov	r2, r8
 800a756:	464b      	mov	r3, r9
 800a758:	487c      	ldr	r0, [pc, #496]	; (800a94c <BNO080_Calibration+0x2a0>)
 800a75a:	f002 fa7f 	bl	800cc5c <iprintf>
			if (accuracy == 0) printf("Unreliable\t");
 800a75e:	7dfb      	ldrb	r3, [r7, #23]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d103      	bne.n	800a76c <BNO080_Calibration+0xc0>
 800a764:	487a      	ldr	r0, [pc, #488]	; (800a950 <BNO080_Calibration+0x2a4>)
 800a766:	f002 fa79 	bl	800cc5c <iprintf>
 800a76a:	e013      	b.n	800a794 <BNO080_Calibration+0xe8>
			else if (accuracy == 1) printf("Low\t");
 800a76c:	7dfb      	ldrb	r3, [r7, #23]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d103      	bne.n	800a77a <BNO080_Calibration+0xce>
 800a772:	4878      	ldr	r0, [pc, #480]	; (800a954 <BNO080_Calibration+0x2a8>)
 800a774:	f002 fa72 	bl	800cc5c <iprintf>
 800a778:	e00c      	b.n	800a794 <BNO080_Calibration+0xe8>
			else if (accuracy == 2) printf("Medium\t");
 800a77a:	7dfb      	ldrb	r3, [r7, #23]
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d103      	bne.n	800a788 <BNO080_Calibration+0xdc>
 800a780:	4875      	ldr	r0, [pc, #468]	; (800a958 <BNO080_Calibration+0x2ac>)
 800a782:	f002 fa6b 	bl	800cc5c <iprintf>
 800a786:	e005      	b.n	800a794 <BNO080_Calibration+0xe8>
			else if (accuracy == 3) printf("High\t");
 800a788:	7dfb      	ldrb	r3, [r7, #23]
 800a78a:	2b03      	cmp	r3, #3
 800a78c:	d102      	bne.n	800a794 <BNO080_Calibration+0xe8>
 800a78e:	4873      	ldr	r0, [pc, #460]	; (800a95c <BNO080_Calibration+0x2b0>)
 800a790:	f002 fa64 	bl	800cc5c <iprintf>

			printf("\t%f,%f,%f,%f,", quatI, quatI, quatI, quatReal);
 800a794:	6938      	ldr	r0, [r7, #16]
 800a796:	f7f5 fed7 	bl	8000548 <__aeabi_f2d>
 800a79a:	4682      	mov	sl, r0
 800a79c:	468b      	mov	fp, r1
 800a79e:	6938      	ldr	r0, [r7, #16]
 800a7a0:	f7f5 fed2 	bl	8000548 <__aeabi_f2d>
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	460d      	mov	r5, r1
 800a7a8:	6938      	ldr	r0, [r7, #16]
 800a7aa:	f7f5 fecd 	bl	8000548 <__aeabi_f2d>
 800a7ae:	4680      	mov	r8, r0
 800a7b0:	4689      	mov	r9, r1
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f7f5 fec8 	bl	8000548 <__aeabi_f2d>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a7c0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a7c4:	e9cd 4500 	strd	r4, r5, [sp]
 800a7c8:	4652      	mov	r2, sl
 800a7ca:	465b      	mov	r3, fp
 800a7cc:	4864      	ldr	r0, [pc, #400]	; (800a960 <BNO080_Calibration+0x2b4>)
 800a7ce:	f002 fa45 	bl	800cc5c <iprintf>
			if (sensorAccuracy == 0) printf("Unreliable\n");
 800a7d2:	78fb      	ldrb	r3, [r7, #3]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d103      	bne.n	800a7e0 <BNO080_Calibration+0x134>
 800a7d8:	4862      	ldr	r0, [pc, #392]	; (800a964 <BNO080_Calibration+0x2b8>)
 800a7da:	f002 fab3 	bl	800cd44 <puts>
 800a7de:	e013      	b.n	800a808 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 1) printf("Low\n");
 800a7e0:	78fb      	ldrb	r3, [r7, #3]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d103      	bne.n	800a7ee <BNO080_Calibration+0x142>
 800a7e6:	4860      	ldr	r0, [pc, #384]	; (800a968 <BNO080_Calibration+0x2bc>)
 800a7e8:	f002 faac 	bl	800cd44 <puts>
 800a7ec:	e00c      	b.n	800a808 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 2) printf("Medium\n");
 800a7ee:	78fb      	ldrb	r3, [r7, #3]
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d103      	bne.n	800a7fc <BNO080_Calibration+0x150>
 800a7f4:	485d      	ldr	r0, [pc, #372]	; (800a96c <BNO080_Calibration+0x2c0>)
 800a7f6:	f002 faa5 	bl	800cd44 <puts>
 800a7fa:	e005      	b.n	800a808 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 3) printf("High\n");
 800a7fc:	78fb      	ldrb	r3, [r7, #3]
 800a7fe:	2b03      	cmp	r3, #3
 800a800:	d102      	bne.n	800a808 <BNO080_Calibration+0x15c>
 800a802:	485b      	ldr	r0, [pc, #364]	; (800a970 <BNO080_Calibration+0x2c4>)
 800a804:	f002 fa9e 	bl	800cd44 <puts>

			//Turn the LED and buzzer on when both accuracy and sensorAccuracy is high
			if(accuracy == 3 && sensorAccuracy == 3)
 800a808:	7dfb      	ldrb	r3, [r7, #23]
 800a80a:	2b03      	cmp	r3, #3
 800a80c:	d110      	bne.n	800a830 <BNO080_Calibration+0x184>
 800a80e:	78fb      	ldrb	r3, [r7, #3]
 800a810:	2b03      	cmp	r3, #3
 800a812:	d10d      	bne.n	800a830 <BNO080_Calibration+0x184>
			{
				LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 800a814:	2107      	movs	r1, #7
 800a816:	4857      	ldr	r0, [pc, #348]	; (800a974 <BNO080_Calibration+0x2c8>)
 800a818:	f7fe f9fd 	bl	8008c16 <LL_GPIO_SetOutputPin>
				TIM3->PSC = 65000; //Very low frequency
 800a81c:	4b56      	ldr	r3, [pc, #344]	; (800a978 <BNO080_Calibration+0x2cc>)
 800a81e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800a822:	629a      	str	r2, [r3, #40]	; 0x28
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800a824:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a828:	4853      	ldr	r0, [pc, #332]	; (800a978 <BNO080_Calibration+0x2cc>)
 800a82a:	f7fe f98f 	bl	8008b4c <LL_TIM_CC_EnableChannel>
 800a82e:	e008      	b.n	800a842 <BNO080_Calibration+0x196>
			}
			else
			{
				LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 800a830:	2107      	movs	r1, #7
 800a832:	4850      	ldr	r0, [pc, #320]	; (800a974 <BNO080_Calibration+0x2c8>)
 800a834:	f7fe f9fd 	bl	8008c32 <LL_GPIO_ResetOutputPin>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800a838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a83c:	484e      	ldr	r0, [pc, #312]	; (800a978 <BNO080_Calibration+0x2cc>)
 800a83e:	f7fe f996 	bl	8008b6e <LL_TIM_CC_DisableChannel>
			}
		}

		Is_iBus_Received(); //Refreshes iBus Data for iBus.SwC
 800a842:	f7ff ff13 	bl	800a66c <Is_iBus_Received>
		HAL_Delay(100);
 800a846:	2064      	movs	r0, #100	; 0x64
 800a848:	f7f6 fbf0 	bl	800102c <HAL_Delay>
	while(iBus.SwC == 1500)
 800a84c:	4b4b      	ldr	r3, [pc, #300]	; (800a97c <BNO080_Calibration+0x2d0>)
 800a84e:	899b      	ldrh	r3, [r3, #12]
 800a850:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a854:	4293      	cmp	r3, r2
 800a856:	f43f af40 	beq.w	800a6da <BNO080_Calibration+0x2e>
	}

	//Ends the loop when iBus.SwC is not mid point
	//Turn the LED and buzzer off
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 800a85a:	2107      	movs	r1, #7
 800a85c:	4845      	ldr	r0, [pc, #276]	; (800a974 <BNO080_Calibration+0x2c8>)
 800a85e:	f7fe f9e8 	bl	8008c32 <LL_GPIO_ResetOutputPin>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800a862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a866:	4844      	ldr	r0, [pc, #272]	; (800a978 <BNO080_Calibration+0x2cc>)
 800a868:	f7fe f981 	bl	8008b6e <LL_TIM_CC_DisableChannel>

	//Saves the current dynamic calibration data (DCD) to memory
	//Sends command to get the latest calibration status
	BNO080_saveCalibration();
 800a86c:	f7fc f994 	bl	8006b98 <BNO080_saveCalibration>
	BNO080_requestCalibrationStatus();
 800a870:	f7fc f976 	bl	8006b60 <BNO080_requestCalibrationStatus>

	//Wait for calibration response, timeout if no response
	int counter = 100;
 800a874:	2364      	movs	r3, #100	; 0x64
 800a876:	627b      	str	r3, [r7, #36]	; 0x24
	while(1)
	{
		if(--counter == 0) break;
 800a878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87a:	3b01      	subs	r3, #1
 800a87c:	627b      	str	r3, [r7, #36]	; 0x24
 800a87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a880:	2b00      	cmp	r3, #0
 800a882:	d02f      	beq.n	800a8e4 <BNO080_Calibration+0x238>
		if(BNO080_dataAvailable())
 800a884:	f7fb fe02 	bl	800648c <BNO080_dataAvailable>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d026      	beq.n	800a8dc <BNO080_Calibration+0x230>
		{
			//The IMU can report many different things. We must wait
			//for the ME Calibration Response Status byte to go to zero
			if(BNO080_calibrationComplete() == 1)
 800a88e:	f7fc f89d 	bl	80069cc <BNO080_calibrationComplete>
 800a892:	4603      	mov	r3, r0
 800a894:	2b01      	cmp	r3, #1
 800a896:	d121      	bne.n	800a8dc <BNO080_Calibration+0x230>
			{
				printf("\nCalibration data successfully stored\n");
 800a898:	4839      	ldr	r0, [pc, #228]	; (800a980 <BNO080_Calibration+0x2d4>)
 800a89a:	f002 fa53 	bl	800cd44 <puts>
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800a89e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a8a2:	4835      	ldr	r0, [pc, #212]	; (800a978 <BNO080_Calibration+0x2cc>)
 800a8a4:	f7fe f952 	bl	8008b4c <LL_TIM_CC_EnableChannel>
				TIM3->PSC = 2000;
 800a8a8:	4b33      	ldr	r3, [pc, #204]	; (800a978 <BNO080_Calibration+0x2cc>)
 800a8aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a8ae:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 800a8b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a8b4:	f7f6 fbba 	bl	800102c <HAL_Delay>
				TIM3->PSC = 1500;
 800a8b8:	4b2f      	ldr	r3, [pc, #188]	; (800a978 <BNO080_Calibration+0x2cc>)
 800a8ba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a8be:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_Delay(300);
 800a8c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a8c4:	f7f6 fbb2 	bl	800102c <HAL_Delay>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800a8c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a8cc:	482a      	ldr	r0, [pc, #168]	; (800a978 <BNO080_Calibration+0x2cc>)
 800a8ce:	f7fe f94e 	bl	8008b6e <LL_TIM_CC_DisableChannel>
				HAL_Delay(1000);
 800a8d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a8d6:	f7f6 fba9 	bl	800102c <HAL_Delay>
				break;
 800a8da:	e004      	b.n	800a8e6 <BNO080_Calibration+0x23a>
			}
		}
		HAL_Delay(10);
 800a8dc:	200a      	movs	r0, #10
 800a8de:	f7f6 fba5 	bl	800102c <HAL_Delay>
		if(--counter == 0) break;
 800a8e2:	e7c9      	b.n	800a878 <BNO080_Calibration+0x1cc>
 800a8e4:	bf00      	nop
	}
	if(counter == 0)
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d120      	bne.n	800a92e <BNO080_Calibration+0x282>
	{
		printf("\nCalibration data failed to store. Please try again.\n");
 800a8ec:	4825      	ldr	r0, [pc, #148]	; (800a984 <BNO080_Calibration+0x2d8>)
 800a8ee:	f002 fa29 	bl	800cd44 <puts>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800a8f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a8f6:	4820      	ldr	r0, [pc, #128]	; (800a978 <BNO080_Calibration+0x2cc>)
 800a8f8:	f7fe f928 	bl	8008b4c <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 800a8fc:	4b1e      	ldr	r3, [pc, #120]	; (800a978 <BNO080_Calibration+0x2cc>)
 800a8fe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a902:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 800a904:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a908:	f7f6 fb90 	bl	800102c <HAL_Delay>
		TIM3->PSC = 2000;
 800a90c:	4b1a      	ldr	r3, [pc, #104]	; (800a978 <BNO080_Calibration+0x2cc>)
 800a90e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a912:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(300);
 800a914:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a918:	f7f6 fb88 	bl	800102c <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800a91c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a920:	4815      	ldr	r0, [pc, #84]	; (800a978 <BNO080_Calibration+0x2cc>)
 800a922:	f7fe f924 	bl	8008b6e <LL_TIM_CC_DisableChannel>
		HAL_Delay(1000);
 800a926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a92a:	f7f6 fb7f 	bl	800102c <HAL_Delay>
	//In general, calibration should be left on at all times. The BNO080
	//auto-calibrates and auto-records cal data roughly every 5 minutes

	//Resets BNO080 to disable Game Rotation Vector and Magnetometer
	//Enables Rotation Vector
	BNO080_Initialization();
 800a92e:	f7fb fd17 	bl	8006360 <BNO080_Initialization>
	//BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
	BNO080_enableGameRotationVector(2500);
 800a932:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800a936:	f7fc f824 	bl	8006982 <BNO080_enableGameRotationVector>
}
 800a93a:	bf00      	nop
 800a93c:	3728      	adds	r7, #40	; 0x28
 800a93e:	46bd      	mov	sp, r7
 800a940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a944:	0800fcf8 	.word	0x0800fcf8
 800a948:	0800fd44 	.word	0x0800fd44
 800a94c:	0800fd68 	.word	0x0800fd68
 800a950:	0800fd74 	.word	0x0800fd74
 800a954:	0800fd80 	.word	0x0800fd80
 800a958:	0800fd88 	.word	0x0800fd88
 800a95c:	0800fd90 	.word	0x0800fd90
 800a960:	0800fd98 	.word	0x0800fd98
 800a964:	0800fda8 	.word	0x0800fda8
 800a968:	0800fdb4 	.word	0x0800fdb4
 800a96c:	0800fdb8 	.word	0x0800fdb8
 800a970:	0800fdc0 	.word	0x0800fdc0
 800a974:	40020800 	.word	0x40020800
 800a978:	40000400 	.word	0x40000400
 800a97c:	2000031c 	.word	0x2000031c
 800a980:	0800fdc8 	.word	0x0800fdc8
 800a984:	0800fdf0 	.word	0x0800fdf0

0800a988 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
	static unsigned char cnt = 0;

	if(huart->Instance == USART1)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a2d      	ldr	r2, [pc, #180]	; (800aa4c <HAL_UART_RxCpltCallback+0xc4>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d150      	bne.n	800aa3c <HAL_UART_RxCpltCallback+0xb4>
	{
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 800a99a:	2201      	movs	r2, #1
 800a99c:	492c      	ldr	r1, [pc, #176]	; (800aa50 <HAL_UART_RxCpltCallback+0xc8>)
 800a99e:	482d      	ldr	r0, [pc, #180]	; (800aa54 <HAL_UART_RxCpltCallback+0xcc>)
 800a9a0:	f7f9 fad3 	bl	8003f4a <HAL_UART_Receive_IT>

		switch(cnt)
 800a9a4:	4b2c      	ldr	r3, [pc, #176]	; (800aa58 <HAL_UART_RxCpltCallback+0xd0>)
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d015      	beq.n	800a9d8 <HAL_UART_RxCpltCallback+0x50>
 800a9ac:	2b13      	cmp	r3, #19
 800a9ae:	d029      	beq.n	800aa04 <HAL_UART_RxCpltCallback+0x7c>
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d135      	bne.n	800aa20 <HAL_UART_RxCpltCallback+0x98>
		{
		case 0:
			if(uart1_rx_data == 0x47)
 800a9b4:	4b26      	ldr	r3, [pc, #152]	; (800aa50 <HAL_UART_RxCpltCallback+0xc8>)
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	2b47      	cmp	r3, #71	; 0x47
 800a9ba:	d141      	bne.n	800aa40 <HAL_UART_RxCpltCallback+0xb8>
			{
				telemetry_rx_buf[cnt] = uart1_rx_data;
 800a9bc:	4b26      	ldr	r3, [pc, #152]	; (800aa58 <HAL_UART_RxCpltCallback+0xd0>)
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	4b23      	ldr	r3, [pc, #140]	; (800aa50 <HAL_UART_RxCpltCallback+0xc8>)
 800a9c4:	7819      	ldrb	r1, [r3, #0]
 800a9c6:	4b25      	ldr	r3, [pc, #148]	; (800aa5c <HAL_UART_RxCpltCallback+0xd4>)
 800a9c8:	5499      	strb	r1, [r3, r2]
				cnt++;
 800a9ca:	4b23      	ldr	r3, [pc, #140]	; (800aa58 <HAL_UART_RxCpltCallback+0xd0>)
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	4b21      	ldr	r3, [pc, #132]	; (800aa58 <HAL_UART_RxCpltCallback+0xd0>)
 800a9d4:	701a      	strb	r2, [r3, #0]
			}
			break;
 800a9d6:	e033      	b.n	800aa40 <HAL_UART_RxCpltCallback+0xb8>
		case 1:
			if(uart1_rx_data == 0x53)
 800a9d8:	4b1d      	ldr	r3, [pc, #116]	; (800aa50 <HAL_UART_RxCpltCallback+0xc8>)
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	2b53      	cmp	r3, #83	; 0x53
 800a9de:	d10d      	bne.n	800a9fc <HAL_UART_RxCpltCallback+0x74>
			{
				telemetry_rx_buf[cnt] = uart1_rx_data;
 800a9e0:	4b1d      	ldr	r3, [pc, #116]	; (800aa58 <HAL_UART_RxCpltCallback+0xd0>)
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	4b1a      	ldr	r3, [pc, #104]	; (800aa50 <HAL_UART_RxCpltCallback+0xc8>)
 800a9e8:	7819      	ldrb	r1, [r3, #0]
 800a9ea:	4b1c      	ldr	r3, [pc, #112]	; (800aa5c <HAL_UART_RxCpltCallback+0xd4>)
 800a9ec:	5499      	strb	r1, [r3, r2]
				cnt++;
 800a9ee:	4b1a      	ldr	r3, [pc, #104]	; (800aa58 <HAL_UART_RxCpltCallback+0xd0>)
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	b2da      	uxtb	r2, r3
 800a9f6:	4b18      	ldr	r3, [pc, #96]	; (800aa58 <HAL_UART_RxCpltCallback+0xd0>)
 800a9f8:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 800a9fa:	e022      	b.n	800aa42 <HAL_UART_RxCpltCallback+0xba>
				cnt = 0;
 800a9fc:	4b16      	ldr	r3, [pc, #88]	; (800aa58 <HAL_UART_RxCpltCallback+0xd0>)
 800a9fe:	2200      	movs	r2, #0
 800aa00:	701a      	strb	r2, [r3, #0]
			break;
 800aa02:	e01e      	b.n	800aa42 <HAL_UART_RxCpltCallback+0xba>
		case 19:
			telemetry_rx_buf[cnt] = uart1_rx_data;
 800aa04:	4b14      	ldr	r3, [pc, #80]	; (800aa58 <HAL_UART_RxCpltCallback+0xd0>)
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	461a      	mov	r2, r3
 800aa0a:	4b11      	ldr	r3, [pc, #68]	; (800aa50 <HAL_UART_RxCpltCallback+0xc8>)
 800aa0c:	7819      	ldrb	r1, [r3, #0]
 800aa0e:	4b13      	ldr	r3, [pc, #76]	; (800aa5c <HAL_UART_RxCpltCallback+0xd4>)
 800aa10:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 800aa12:	4b11      	ldr	r3, [pc, #68]	; (800aa58 <HAL_UART_RxCpltCallback+0xd0>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	701a      	strb	r2, [r3, #0]
			telemetry_rx_cplt_flag = 1;
 800aa18:	4b11      	ldr	r3, [pc, #68]	; (800aa60 <HAL_UART_RxCpltCallback+0xd8>)
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	701a      	strb	r2, [r3, #0]
			break;
 800aa1e:	e010      	b.n	800aa42 <HAL_UART_RxCpltCallback+0xba>
		default:
			telemetry_rx_buf[cnt] = uart1_rx_data;
 800aa20:	4b0d      	ldr	r3, [pc, #52]	; (800aa58 <HAL_UART_RxCpltCallback+0xd0>)
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	461a      	mov	r2, r3
 800aa26:	4b0a      	ldr	r3, [pc, #40]	; (800aa50 <HAL_UART_RxCpltCallback+0xc8>)
 800aa28:	7819      	ldrb	r1, [r3, #0]
 800aa2a:	4b0c      	ldr	r3, [pc, #48]	; (800aa5c <HAL_UART_RxCpltCallback+0xd4>)
 800aa2c:	5499      	strb	r1, [r3, r2]
			cnt++;
 800aa2e:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <HAL_UART_RxCpltCallback+0xd0>)
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	3301      	adds	r3, #1
 800aa34:	b2da      	uxtb	r2, r3
 800aa36:	4b08      	ldr	r3, [pc, #32]	; (800aa58 <HAL_UART_RxCpltCallback+0xd0>)
 800aa38:	701a      	strb	r2, [r3, #0]
			break;
 800aa3a:	e002      	b.n	800aa42 <HAL_UART_RxCpltCallback+0xba>
		}
	}
 800aa3c:	bf00      	nop
 800aa3e:	e000      	b.n	800aa42 <HAL_UART_RxCpltCallback+0xba>
			break;
 800aa40:	bf00      	nop
}
 800aa42:	bf00      	nop
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	40011000 	.word	0x40011000
 800aa50:	20000216 	.word	0x20000216
 800aa54:	20000690 	.word	0x20000690
 800aa58:	2000020d 	.word	0x2000020d
 800aa5c:	2000060c 	.word	0x2000060c
 800aa60:	20000620 	.word	0x20000620

0800aa64 <Encode_Msg_AHRS>:

void Encode_Msg_AHRS(unsigned char* telemetry_tx_buf)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
	  telemetry_tx_buf[0] = 0x46;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2246      	movs	r2, #70	; 0x46
 800aa70:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[1] = 0x43;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	3301      	adds	r3, #1
 800aa76:	2243      	movs	r2, #67	; 0x43
 800aa78:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[2] = 0x10;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	3302      	adds	r3, #2
 800aa7e:	2210      	movs	r2, #16
 800aa80:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[3] = (short)(BNO080_Roll*100);
 800aa82:	4bae      	ldr	r3, [pc, #696]	; (800ad3c <Encode_Msg_AHRS+0x2d8>)
 800aa84:	edd3 7a00 	vldr	s15, [r3]
 800aa88:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800ad40 <Encode_Msg_AHRS+0x2dc>
 800aa8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa94:	ee17 3a90 	vmov	r3, s15
 800aa98:	b21a      	sxth	r2, r3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	3303      	adds	r3, #3
 800aa9e:	b2d2      	uxtb	r2, r2
 800aaa0:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[4] = ((short)(BNO080_Roll*100))>>8;
 800aaa2:	4ba6      	ldr	r3, [pc, #664]	; (800ad3c <Encode_Msg_AHRS+0x2d8>)
 800aaa4:	edd3 7a00 	vldr	s15, [r3]
 800aaa8:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800ad40 <Encode_Msg_AHRS+0x2dc>
 800aaac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aab4:	ee17 3a90 	vmov	r3, s15
 800aab8:	b21b      	sxth	r3, r3
 800aaba:	121b      	asrs	r3, r3, #8
 800aabc:	b21a      	sxth	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	3304      	adds	r3, #4
 800aac2:	b2d2      	uxtb	r2, r2
 800aac4:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[5] = (short)(BNO080_Pitch*100);
 800aac6:	4b9f      	ldr	r3, [pc, #636]	; (800ad44 <Encode_Msg_AHRS+0x2e0>)
 800aac8:	edd3 7a00 	vldr	s15, [r3]
 800aacc:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800ad40 <Encode_Msg_AHRS+0x2dc>
 800aad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aad8:	ee17 3a90 	vmov	r3, s15
 800aadc:	b21a      	sxth	r2, r3
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	3305      	adds	r3, #5
 800aae2:	b2d2      	uxtb	r2, r2
 800aae4:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[6] = ((short)(BNO080_Pitch*100))>>8;
 800aae6:	4b97      	ldr	r3, [pc, #604]	; (800ad44 <Encode_Msg_AHRS+0x2e0>)
 800aae8:	edd3 7a00 	vldr	s15, [r3]
 800aaec:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800ad40 <Encode_Msg_AHRS+0x2dc>
 800aaf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aaf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aaf8:	ee17 3a90 	vmov	r3, s15
 800aafc:	b21b      	sxth	r3, r3
 800aafe:	121b      	asrs	r3, r3, #8
 800ab00:	b21a      	sxth	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	3306      	adds	r3, #6
 800ab06:	b2d2      	uxtb	r2, r2
 800ab08:	701a      	strb	r2, [r3, #0]

//	  telemetry_tx_buf[5] = (short)(ICM20602.gyro_x*100);
//	  telemetry_tx_buf[6] = ((short)(ICM20602.gyro_x*100))>>8;

	  telemetry_tx_buf[7] = (unsigned short)(BNO080_Yaw*100);
 800ab0a:	4b8f      	ldr	r3, [pc, #572]	; (800ad48 <Encode_Msg_AHRS+0x2e4>)
 800ab0c:	edd3 7a00 	vldr	s15, [r3]
 800ab10:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800ad40 <Encode_Msg_AHRS+0x2dc>
 800ab14:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab1c:	ee17 3a90 	vmov	r3, s15
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	3307      	adds	r3, #7
 800ab26:	b2d2      	uxtb	r2, r2
 800ab28:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[8] = ((unsigned short)(BNO080_Yaw*100))>>8;
 800ab2a:	4b87      	ldr	r3, [pc, #540]	; (800ad48 <Encode_Msg_AHRS+0x2e4>)
 800ab2c:	edd3 7a00 	vldr	s15, [r3]
 800ab30:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800ad40 <Encode_Msg_AHRS+0x2dc>
 800ab34:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab3c:	ee17 3a90 	vmov	r3, s15
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	0a1b      	lsrs	r3, r3, #8
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	3308      	adds	r3, #8
 800ab4a:	b2d2      	uxtb	r2, r2
 800ab4c:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[9] = (short)(LPS22HH.baroAltFilt*10);
 800ab4e:	4b7f      	ldr	r3, [pc, #508]	; (800ad4c <Encode_Msg_AHRS+0x2e8>)
 800ab50:	edd3 7a03 	vldr	s15, [r3, #12]
 800ab54:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ab58:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab60:	ee17 3a90 	vmov	r3, s15
 800ab64:	b21a      	sxth	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	3309      	adds	r3, #9
 800ab6a:	b2d2      	uxtb	r2, r2
 800ab6c:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[10] = ((short)(LPS22HH.baroAltFilt*10))>>8;
 800ab6e:	4b77      	ldr	r3, [pc, #476]	; (800ad4c <Encode_Msg_AHRS+0x2e8>)
 800ab70:	edd3 7a03 	vldr	s15, [r3, #12]
 800ab74:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ab78:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab80:	ee17 3a90 	vmov	r3, s15
 800ab84:	b21b      	sxth	r3, r3
 800ab86:	121b      	asrs	r3, r3, #8
 800ab88:	b21a      	sxth	r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	330a      	adds	r3, #10
 800ab8e:	b2d2      	uxtb	r2, r2
 800ab90:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[11] = (short)((iBus.RH-1500)*0.1f*100);
 800ab92:	4b6f      	ldr	r3, [pc, #444]	; (800ad50 <Encode_Msg_AHRS+0x2ec>)
 800ab94:	881b      	ldrh	r3, [r3, #0]
 800ab96:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800ab9a:	ee07 3a90 	vmov	s15, r3
 800ab9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aba2:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800ad54 <Encode_Msg_AHRS+0x2f0>
 800aba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800abaa:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800ad40 <Encode_Msg_AHRS+0x2dc>
 800abae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800abb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abb6:	ee17 3a90 	vmov	r3, s15
 800abba:	b21a      	sxth	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	330b      	adds	r3, #11
 800abc0:	b2d2      	uxtb	r2, r2
 800abc2:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[12] = ((short)((iBus.RH-1500)*0.1f*100))>>8;
 800abc4:	4b62      	ldr	r3, [pc, #392]	; (800ad50 <Encode_Msg_AHRS+0x2ec>)
 800abc6:	881b      	ldrh	r3, [r3, #0]
 800abc8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800abcc:	ee07 3a90 	vmov	s15, r3
 800abd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abd4:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800ad54 <Encode_Msg_AHRS+0x2f0>
 800abd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800abdc:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800ad40 <Encode_Msg_AHRS+0x2dc>
 800abe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800abe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abe8:	ee17 3a90 	vmov	r3, s15
 800abec:	b21b      	sxth	r3, r3
 800abee:	121b      	asrs	r3, r3, #8
 800abf0:	b21a      	sxth	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	330c      	adds	r3, #12
 800abf6:	b2d2      	uxtb	r2, r2
 800abf8:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[13] = (short)((iBus.RV-1500)*0.1f*100);
 800abfa:	4b55      	ldr	r3, [pc, #340]	; (800ad50 <Encode_Msg_AHRS+0x2ec>)
 800abfc:	885b      	ldrh	r3, [r3, #2]
 800abfe:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800ac02:	ee07 3a90 	vmov	s15, r3
 800ac06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac0a:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800ad54 <Encode_Msg_AHRS+0x2f0>
 800ac0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac12:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800ad40 <Encode_Msg_AHRS+0x2dc>
 800ac16:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac1e:	ee17 3a90 	vmov	r3, s15
 800ac22:	b21a      	sxth	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	330d      	adds	r3, #13
 800ac28:	b2d2      	uxtb	r2, r2
 800ac2a:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[14] = ((short)((iBus.RV-1500)*0.1f*100))>>8;
 800ac2c:	4b48      	ldr	r3, [pc, #288]	; (800ad50 <Encode_Msg_AHRS+0x2ec>)
 800ac2e:	885b      	ldrh	r3, [r3, #2]
 800ac30:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800ac34:	ee07 3a90 	vmov	s15, r3
 800ac38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac3c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800ad54 <Encode_Msg_AHRS+0x2f0>
 800ac40:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac44:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800ad40 <Encode_Msg_AHRS+0x2dc>
 800ac48:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac50:	ee17 3a90 	vmov	r3, s15
 800ac54:	b21b      	sxth	r3, r3
 800ac56:	121b      	asrs	r3, r3, #8
 800ac58:	b21a      	sxth	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	330e      	adds	r3, #14
 800ac5e:	b2d2      	uxtb	r2, r2
 800ac60:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[15] = (unsigned short)((iBus.LH-1000)*0.36f*100);
 800ac62:	4b3b      	ldr	r3, [pc, #236]	; (800ad50 <Encode_Msg_AHRS+0x2ec>)
 800ac64:	88db      	ldrh	r3, [r3, #6]
 800ac66:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800ac6a:	ee07 3a90 	vmov	s15, r3
 800ac6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac72:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800ad58 <Encode_Msg_AHRS+0x2f4>
 800ac76:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac7a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ad40 <Encode_Msg_AHRS+0x2dc>
 800ac7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac86:	ee17 3a90 	vmov	r3, s15
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	330f      	adds	r3, #15
 800ac90:	b2d2      	uxtb	r2, r2
 800ac92:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[16] = ((unsigned short)((iBus.LH-1000)*0.36f*100))>>8;
 800ac94:	4b2e      	ldr	r3, [pc, #184]	; (800ad50 <Encode_Msg_AHRS+0x2ec>)
 800ac96:	88db      	ldrh	r3, [r3, #6]
 800ac98:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800ac9c:	ee07 3a90 	vmov	s15, r3
 800aca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aca4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800ad58 <Encode_Msg_AHRS+0x2f4>
 800aca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800acac:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800ad40 <Encode_Msg_AHRS+0x2dc>
 800acb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800acb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acb8:	ee17 3a90 	vmov	r3, s15
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	0a1b      	lsrs	r3, r3, #8
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	3310      	adds	r3, #16
 800acc6:	b2d2      	uxtb	r2, r2
 800acc8:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[17] = (short)(iBus.LV*10);
 800acca:	4b21      	ldr	r3, [pc, #132]	; (800ad50 <Encode_Msg_AHRS+0x2ec>)
 800accc:	889b      	ldrh	r3, [r3, #4]
 800acce:	b2da      	uxtb	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	3311      	adds	r3, #17
 800acd4:	4611      	mov	r1, r2
 800acd6:	0089      	lsls	r1, r1, #2
 800acd8:	440a      	add	r2, r1
 800acda:	0052      	lsls	r2, r2, #1
 800acdc:	b2d2      	uxtb	r2, r2
 800acde:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[18] = ((short)(iBus.LV*10))>>8;
 800ace0:	4b1b      	ldr	r3, [pc, #108]	; (800ad50 <Encode_Msg_AHRS+0x2ec>)
 800ace2:	889b      	ldrh	r3, [r3, #4]
 800ace4:	461a      	mov	r2, r3
 800ace6:	0092      	lsls	r2, r2, #2
 800ace8:	4413      	add	r3, r2
 800acea:	005b      	lsls	r3, r3, #1
 800acec:	b29b      	uxth	r3, r3
 800acee:	b21b      	sxth	r3, r3
 800acf0:	121b      	asrs	r3, r3, #8
 800acf2:	b21a      	sxth	r2, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	3312      	adds	r3, #18
 800acf8:	b2d2      	uxtb	r2, r2
 800acfa:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[19] = 0xff;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	3313      	adds	r3, #19
 800ad00:	22ff      	movs	r2, #255	; 0xff
 800ad02:	701a      	strb	r2, [r3, #0]

	  for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 800ad04:	2300      	movs	r3, #0
 800ad06:	60fb      	str	r3, [r7, #12]
 800ad08:	e00e      	b.n	800ad28 <Encode_Msg_AHRS+0x2c4>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	3313      	adds	r3, #19
 800ad0e:	7819      	ldrb	r1, [r3, #0]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	4413      	add	r3, r2
 800ad16:	781a      	ldrb	r2, [r3, #0]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	3313      	adds	r3, #19
 800ad1c:	1a8a      	subs	r2, r1, r2
 800ad1e:	b2d2      	uxtb	r2, r2
 800ad20:	701a      	strb	r2, [r3, #0]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	3301      	adds	r3, #1
 800ad26:	60fb      	str	r3, [r7, #12]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2b12      	cmp	r3, #18
 800ad2c:	dded      	ble.n	800ad0a <Encode_Msg_AHRS+0x2a6>
}
 800ad2e:	bf00      	nop
 800ad30:	3714      	adds	r7, #20
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	200004f8 	.word	0x200004f8
 800ad40:	42c80000 	.word	0x42c80000
 800ad44:	20000500 	.word	0x20000500
 800ad48:	200004fc 	.word	0x200004fc
 800ad4c:	20000368 	.word	0x20000368
 800ad50:	2000031c 	.word	0x2000031c
 800ad54:	3dcccccd 	.word	0x3dcccccd
 800ad58:	3eb851ec 	.word	0x3eb851ec

0800ad5c <Encode_Msg_GPS>:

void Encode_Msg_GPS(unsigned char* telemetry_tx_buf)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
	  telemetry_tx_buf[0] = 0x46;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2246      	movs	r2, #70	; 0x46
 800ad68:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[1] = 0x43;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	2243      	movs	r2, #67	; 0x43
 800ad70:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[2] = 0x11;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	3302      	adds	r3, #2
 800ad76:	2211      	movs	r2, #17
 800ad78:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[3] = posllh.lat;
 800ad7a:	4b53      	ldr	r3, [pc, #332]	; (800aec8 <Encode_Msg_GPS+0x16c>)
 800ad7c:	68da      	ldr	r2, [r3, #12]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	3303      	adds	r3, #3
 800ad82:	b2d2      	uxtb	r2, r2
 800ad84:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[4] = posllh.lat>>8;
 800ad86:	4b50      	ldr	r3, [pc, #320]	; (800aec8 <Encode_Msg_GPS+0x16c>)
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	121a      	asrs	r2, r3, #8
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	3304      	adds	r3, #4
 800ad90:	b2d2      	uxtb	r2, r2
 800ad92:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[5] = posllh.lat>>16;
 800ad94:	4b4c      	ldr	r3, [pc, #304]	; (800aec8 <Encode_Msg_GPS+0x16c>)
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	141a      	asrs	r2, r3, #16
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	3305      	adds	r3, #5
 800ad9e:	b2d2      	uxtb	r2, r2
 800ada0:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[6] = posllh.lat>>24;
 800ada2:	4b49      	ldr	r3, [pc, #292]	; (800aec8 <Encode_Msg_GPS+0x16c>)
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	161a      	asrs	r2, r3, #24
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	3306      	adds	r3, #6
 800adac:	b2d2      	uxtb	r2, r2
 800adae:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[7] = posllh.lon;
 800adb0:	4b45      	ldr	r3, [pc, #276]	; (800aec8 <Encode_Msg_GPS+0x16c>)
 800adb2:	689a      	ldr	r2, [r3, #8]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	3307      	adds	r3, #7
 800adb8:	b2d2      	uxtb	r2, r2
 800adba:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[8] = posllh.lon>>8;
 800adbc:	4b42      	ldr	r3, [pc, #264]	; (800aec8 <Encode_Msg_GPS+0x16c>)
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	121a      	asrs	r2, r3, #8
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	3308      	adds	r3, #8
 800adc6:	b2d2      	uxtb	r2, r2
 800adc8:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[9] = posllh.lon>>16;
 800adca:	4b3f      	ldr	r3, [pc, #252]	; (800aec8 <Encode_Msg_GPS+0x16c>)
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	141a      	asrs	r2, r3, #16
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	3309      	adds	r3, #9
 800add4:	b2d2      	uxtb	r2, r2
 800add6:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[10] = posllh.lon>>24;
 800add8:	4b3b      	ldr	r3, [pc, #236]	; (800aec8 <Encode_Msg_GPS+0x16c>)
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	161a      	asrs	r2, r3, #24
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	330a      	adds	r3, #10
 800ade2:	b2d2      	uxtb	r2, r2
 800ade4:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[11] = (unsigned short)(batVolt*100);
 800ade6:	4b39      	ldr	r3, [pc, #228]	; (800aecc <Encode_Msg_GPS+0x170>)
 800ade8:	edd3 7a00 	vldr	s15, [r3]
 800adec:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800aed0 <Encode_Msg_GPS+0x174>
 800adf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800adf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adf8:	ee17 3a90 	vmov	r3, s15
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	330b      	adds	r3, #11
 800ae02:	b2d2      	uxtb	r2, r2
 800ae04:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[12] = ((unsigned short)(batVolt*100))>>8;
 800ae06:	4b31      	ldr	r3, [pc, #196]	; (800aecc <Encode_Msg_GPS+0x170>)
 800ae08:	edd3 7a00 	vldr	s15, [r3]
 800ae0c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800aed0 <Encode_Msg_GPS+0x174>
 800ae10:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae18:	ee17 3a90 	vmov	r3, s15
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	0a1b      	lsrs	r3, r3, #8
 800ae20:	b29a      	uxth	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	330c      	adds	r3, #12
 800ae26:	b2d2      	uxtb	r2, r2
 800ae28:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[13] = iBus.SwA == 1000 ? 0 : 1;
 800ae2a:	4b2a      	ldr	r3, [pc, #168]	; (800aed4 <Encode_Msg_GPS+0x178>)
 800ae2c:	891b      	ldrh	r3, [r3, #8]
 800ae2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae32:	bf14      	ite	ne
 800ae34:	2301      	movne	r3, #1
 800ae36:	2300      	moveq	r3, #0
 800ae38:	b2da      	uxtb	r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	330d      	adds	r3, #13
 800ae3e:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[14] = iBus.SwC == 1000 ? 0 : iBus.SwC == 1500 ? 1 : 2;
 800ae40:	4b24      	ldr	r3, [pc, #144]	; (800aed4 <Encode_Msg_GPS+0x178>)
 800ae42:	899b      	ldrh	r3, [r3, #12]
 800ae44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae48:	d009      	beq.n	800ae5e <Encode_Msg_GPS+0x102>
 800ae4a:	4b22      	ldr	r3, [pc, #136]	; (800aed4 <Encode_Msg_GPS+0x178>)
 800ae4c:	899b      	ldrh	r3, [r3, #12]
 800ae4e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d101      	bne.n	800ae5a <Encode_Msg_GPS+0xfe>
 800ae56:	2301      	movs	r3, #1
 800ae58:	e002      	b.n	800ae60 <Encode_Msg_GPS+0x104>
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	e000      	b.n	800ae60 <Encode_Msg_GPS+0x104>
 800ae5e:	2300      	movs	r3, #0
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	320e      	adds	r2, #14
 800ae64:	7013      	strb	r3, [r2, #0]

	  telemetry_tx_buf[15] = failsafe_flag;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	330f      	adds	r3, #15
 800ae6a:	4a1b      	ldr	r2, [pc, #108]	; (800aed8 <Encode_Msg_GPS+0x17c>)
 800ae6c:	7812      	ldrb	r2, [r2, #0]
 800ae6e:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[16] = 0x00;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3310      	adds	r3, #16
 800ae74:	2200      	movs	r2, #0
 800ae76:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[17] = 0x00;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	3311      	adds	r3, #17
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[18] = 0x00;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	3312      	adds	r3, #18
 800ae84:	2200      	movs	r2, #0
 800ae86:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[19] = 0xff;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	3313      	adds	r3, #19
 800ae8c:	22ff      	movs	r2, #255	; 0xff
 800ae8e:	701a      	strb	r2, [r3, #0]

	  for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 800ae90:	2300      	movs	r3, #0
 800ae92:	60fb      	str	r3, [r7, #12]
 800ae94:	e00e      	b.n	800aeb4 <Encode_Msg_GPS+0x158>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	3313      	adds	r3, #19
 800ae9a:	7819      	ldrb	r1, [r3, #0]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	4413      	add	r3, r2
 800aea2:	781a      	ldrb	r2, [r3, #0]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	3313      	adds	r3, #19
 800aea8:	1a8a      	subs	r2, r1, r2
 800aeaa:	b2d2      	uxtb	r2, r2
 800aeac:	701a      	strb	r2, [r3, #0]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	60fb      	str	r3, [r7, #12]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2b12      	cmp	r3, #18
 800aeb8:	dded      	ble.n	800ae96 <Encode_Msg_GPS+0x13a>
}
 800aeba:	bf00      	nop
 800aebc:	3714      	adds	r7, #20
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop
 800aec8:	20000378 	.word	0x20000378
 800aecc:	20000608 	.word	0x20000608
 800aed0:	42c80000 	.word	0x42c80000
 800aed4:	2000031c 	.word	0x2000031c
 800aed8:	2000020b 	.word	0x2000020b

0800aedc <Encode_Msg_PID_Gain>:

void Encode_Msg_PID_Gain(unsigned char* telemetry_tx_buf, unsigned char id, float p, float i, float d)
{
 800aedc:	b480      	push	{r7}
 800aede:	b089      	sub	sp, #36	; 0x24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6178      	str	r0, [r7, #20]
 800aee4:	460b      	mov	r3, r1
 800aee6:	ed87 0a03 	vstr	s0, [r7, #12]
 800aeea:	edc7 0a02 	vstr	s1, [r7, #8]
 800aeee:	ed87 1a01 	vstr	s2, [r7, #4]
 800aef2:	74fb      	strb	r3, [r7, #19]
	  telemetry_tx_buf[0] = 0x46;
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	2246      	movs	r2, #70	; 0x46
 800aef8:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[1] = 0x43;
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	3301      	adds	r3, #1
 800aefe:	2243      	movs	r2, #67	; 0x43
 800af00:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[2] = id;
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	3302      	adds	r3, #2
 800af06:	7cfa      	ldrb	r2, [r7, #19]
 800af08:	701a      	strb	r2, [r3, #0]

//	  memcpy(&telemetry_tx_buf[3], &p, 4);
//	  memcpy(&telemetry_tx_buf[7], &i, 4);
//	  memcpy(&telemetry_tx_buf[11], &d, 4);

	  *(float*)&telemetry_tx_buf[3] = p;
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	3303      	adds	r3, #3
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	601a      	str	r2, [r3, #0]
	  *(float*)&telemetry_tx_buf[7] = i;
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	3307      	adds	r3, #7
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	601a      	str	r2, [r3, #0]
	  *(float*)&telemetry_tx_buf[11] = d;
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	330b      	adds	r3, #11
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	601a      	str	r2, [r3, #0]

	  telemetry_tx_buf[15] = 0x00;
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	330f      	adds	r3, #15
 800af26:	2200      	movs	r2, #0
 800af28:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[16] = 0x00;
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	3310      	adds	r3, #16
 800af2e:	2200      	movs	r2, #0
 800af30:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[17] = 0x00;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	3311      	adds	r3, #17
 800af36:	2200      	movs	r2, #0
 800af38:	701a      	strb	r2, [r3, #0]
	  telemetry_tx_buf[18] = 0x00;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	3312      	adds	r3, #18
 800af3e:	2200      	movs	r2, #0
 800af40:	701a      	strb	r2, [r3, #0]

	  telemetry_tx_buf[19] = 0xff;
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	3313      	adds	r3, #19
 800af46:	22ff      	movs	r2, #255	; 0xff
 800af48:	701a      	strb	r2, [r3, #0]

	  for(int i=0;i<19;i++) telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 800af4a:	2300      	movs	r3, #0
 800af4c:	61fb      	str	r3, [r7, #28]
 800af4e:	e00e      	b.n	800af6e <Encode_Msg_PID_Gain+0x92>
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	3313      	adds	r3, #19
 800af54:	7819      	ldrb	r1, [r3, #0]
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	4413      	add	r3, r2
 800af5c:	781a      	ldrb	r2, [r3, #0]
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	3313      	adds	r3, #19
 800af62:	1a8a      	subs	r2, r1, r2
 800af64:	b2d2      	uxtb	r2, r2
 800af66:	701a      	strb	r2, [r3, #0]
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	3301      	adds	r3, #1
 800af6c:	61fb      	str	r3, [r7, #28]
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	2b12      	cmp	r3, #18
 800af72:	dded      	ble.n	800af50 <Encode_Msg_PID_Gain+0x74>
}
 800af74:	bf00      	nop
 800af76:	3724      	adds	r7, #36	; 0x24
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800af80:	b480      	push	{r7}
 800af82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800af84:	bf00      	nop
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr

0800af8e <LL_SPI_SetStandard>:
{
 800af8e:	b480      	push	{r7}
 800af90:	b083      	sub	sp, #12
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	f023 0210 	bic.w	r2, r3, #16
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	431a      	orrs	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	605a      	str	r2, [r3, #4]
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <LL_AHB1_GRP1_EnableClock>:
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800afbc:	4b08      	ldr	r3, [pc, #32]	; (800afe0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800afbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afc0:	4907      	ldr	r1, [pc, #28]	; (800afe0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800afc8:	4b05      	ldr	r3, [pc, #20]	; (800afe0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800afca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4013      	ands	r3, r2
 800afd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800afd2:	68fb      	ldr	r3, [r7, #12]
}
 800afd4:	bf00      	nop
 800afd6:	3714      	adds	r7, #20
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	40023800 	.word	0x40023800

0800afe4 <LL_APB1_GRP1_EnableClock>:
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800afec:	4b08      	ldr	r3, [pc, #32]	; (800b010 <LL_APB1_GRP1_EnableClock+0x2c>)
 800afee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aff0:	4907      	ldr	r1, [pc, #28]	; (800b010 <LL_APB1_GRP1_EnableClock+0x2c>)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4313      	orrs	r3, r2
 800aff6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800aff8:	4b05      	ldr	r3, [pc, #20]	; (800b010 <LL_APB1_GRP1_EnableClock+0x2c>)
 800affa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4013      	ands	r3, r2
 800b000:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b002:	68fb      	ldr	r3, [r7, #12]
}
 800b004:	bf00      	nop
 800b006:	3714      	adds	r7, #20
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr
 800b010:	40023800 	.word	0x40023800

0800b014 <LL_APB2_GRP1_EnableClock>:
{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800b01c:	4b08      	ldr	r3, [pc, #32]	; (800b040 <LL_APB2_GRP1_EnableClock+0x2c>)
 800b01e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b020:	4907      	ldr	r1, [pc, #28]	; (800b040 <LL_APB2_GRP1_EnableClock+0x2c>)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4313      	orrs	r3, r2
 800b026:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800b028:	4b05      	ldr	r3, [pc, #20]	; (800b040 <LL_APB2_GRP1_EnableClock+0x2c>)
 800b02a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4013      	ands	r3, r2
 800b030:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b032:	68fb      	ldr	r3, [r7, #12]
}
 800b034:	bf00      	nop
 800b036:	3714      	adds	r7, #20
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr
 800b040:	40023800 	.word	0x40023800

0800b044 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b090      	sub	sp, #64	; 0x40
 800b048:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800b04a:	f107 0318 	add.w	r3, r7, #24
 800b04e:	2228      	movs	r2, #40	; 0x28
 800b050:	2100      	movs	r1, #0
 800b052:	4618      	mov	r0, r3
 800b054:	f001 f99e 	bl	800c394 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b058:	463b      	mov	r3, r7
 800b05a:	2200      	movs	r2, #0
 800b05c:	601a      	str	r2, [r3, #0]
 800b05e:	605a      	str	r2, [r3, #4]
 800b060:	609a      	str	r2, [r3, #8]
 800b062:	60da      	str	r2, [r3, #12]
 800b064:	611a      	str	r2, [r3, #16]
 800b066:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800b068:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b06c:	f7ff ffd2 	bl	800b014 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800b070:	2001      	movs	r0, #1
 800b072:	f7ff ff9f 	bl	800afb4 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800b076:	23e0      	movs	r3, #224	; 0xe0
 800b078:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b07a:	2302      	movs	r3, #2
 800b07c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b07e:	2303      	movs	r3, #3
 800b080:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b082:	2300      	movs	r3, #0
 800b084:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b086:	2300      	movs	r3, #0
 800b088:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800b08a:	2305      	movs	r3, #5
 800b08c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b08e:	463b      	mov	r3, r7
 800b090:	4619      	mov	r1, r3
 800b092:	4813      	ldr	r0, [pc, #76]	; (800b0e0 <MX_SPI1_Init+0x9c>)
 800b094:	f7f9 fec4 	bl	8004e20 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800b098:	2300      	movs	r3, #0
 800b09a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800b09c:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b0a0:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800b0a6:	2302      	movs	r3, #2
 800b0a8:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800b0ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800b0b4:	2310      	movs	r3, #16
 800b0b6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800b0c0:	230a      	movs	r3, #10
 800b0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800b0c4:	f107 0318 	add.w	r3, r7, #24
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	4806      	ldr	r0, [pc, #24]	; (800b0e4 <MX_SPI1_Init+0xa0>)
 800b0cc:	f7fa f877 	bl	80051be <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800b0d0:	2100      	movs	r1, #0
 800b0d2:	4804      	ldr	r0, [pc, #16]	; (800b0e4 <MX_SPI1_Init+0xa0>)
 800b0d4:	f7ff ff5b 	bl	800af8e <LL_SPI_SetStandard>

}
 800b0d8:	bf00      	nop
 800b0da:	3740      	adds	r7, #64	; 0x40
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	40020000 	.word	0x40020000
 800b0e4:	40013000 	.word	0x40013000

0800b0e8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b090      	sub	sp, #64	; 0x40
 800b0ec:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800b0ee:	f107 0318 	add.w	r3, r7, #24
 800b0f2:	2228      	movs	r2, #40	; 0x28
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f001 f94c 	bl	800c394 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0fc:	463b      	mov	r3, r7
 800b0fe:	2200      	movs	r2, #0
 800b100:	601a      	str	r2, [r3, #0]
 800b102:	605a      	str	r2, [r3, #4]
 800b104:	609a      	str	r2, [r3, #8]
 800b106:	60da      	str	r2, [r3, #12]
 800b108:	611a      	str	r2, [r3, #16]
 800b10a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800b10c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b110:	f7ff ff68 	bl	800afe4 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800b114:	2002      	movs	r0, #2
 800b116:	f7ff ff4d 	bl	800afb4 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration  
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800b11a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800b11e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b120:	2302      	movs	r3, #2
 800b122:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b124:	2303      	movs	r3, #3
 800b126:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b128:	2300      	movs	r3, #0
 800b12a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b12c:	2300      	movs	r3, #0
 800b12e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800b130:	2305      	movs	r3, #5
 800b132:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b134:	463b      	mov	r3, r7
 800b136:	4619      	mov	r1, r3
 800b138:	4813      	ldr	r0, [pc, #76]	; (800b188 <MX_SPI2_Init+0xa0>)
 800b13a:	f7f9 fe71 	bl	8004e20 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800b13e:	2300      	movs	r3, #0
 800b140:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800b142:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b146:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800b148:	2300      	movs	r3, #0
 800b14a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800b14c:	2302      	movs	r3, #2
 800b14e:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800b150:	2301      	movs	r3, #1
 800b152:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800b154:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b158:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800b15a:	2318      	movs	r3, #24
 800b15c:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800b15e:	2300      	movs	r3, #0
 800b160:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800b162:	2300      	movs	r3, #0
 800b164:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800b166:	230a      	movs	r3, #10
 800b168:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800b16a:	f107 0318 	add.w	r3, r7, #24
 800b16e:	4619      	mov	r1, r3
 800b170:	4806      	ldr	r0, [pc, #24]	; (800b18c <MX_SPI2_Init+0xa4>)
 800b172:	f7fa f824 	bl	80051be <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800b176:	2100      	movs	r1, #0
 800b178:	4804      	ldr	r0, [pc, #16]	; (800b18c <MX_SPI2_Init+0xa4>)
 800b17a:	f7ff ff08 	bl	800af8e <LL_SPI_SetStandard>

}
 800b17e:	bf00      	nop
 800b180:	3740      	adds	r7, #64	; 0x40
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	40020400 	.word	0x40020400
 800b18c:	40003800 	.word	0x40003800

0800b190 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b090      	sub	sp, #64	; 0x40
 800b194:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800b196:	f107 0318 	add.w	r3, r7, #24
 800b19a:	2228      	movs	r2, #40	; 0x28
 800b19c:	2100      	movs	r1, #0
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f001 f8f8 	bl	800c394 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1a4:	463b      	mov	r3, r7
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	605a      	str	r2, [r3, #4]
 800b1ac:	609a      	str	r2, [r3, #8]
 800b1ae:	60da      	str	r2, [r3, #12]
 800b1b0:	611a      	str	r2, [r3, #16]
 800b1b2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800b1b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b1b8:	f7ff ff14 	bl	800afe4 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800b1bc:	2002      	movs	r0, #2
 800b1be:	f7ff fef9 	bl	800afb4 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration  
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800b1c2:	2338      	movs	r3, #56	; 0x38
 800b1c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b1c6:	2302      	movs	r3, #2
 800b1c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800b1ca:	2303      	movs	r3, #3
 800b1cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800b1d6:	2306      	movs	r3, #6
 800b1d8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b1da:	463b      	mov	r3, r7
 800b1dc:	4619      	mov	r1, r3
 800b1de:	4813      	ldr	r0, [pc, #76]	; (800b22c <MX_SPI3_Init+0x9c>)
 800b1e0:	f7f9 fe1e 	bl	8004e20 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800b1e8:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b1ec:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800b1f2:	2302      	movs	r3, #2
 800b1f4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800b1fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800b200:	2308      	movs	r3, #8
 800b202:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800b204:	2300      	movs	r3, #0
 800b206:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800b208:	2300      	movs	r3, #0
 800b20a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800b20c:	230a      	movs	r3, #10
 800b20e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 800b210:	f107 0318 	add.w	r3, r7, #24
 800b214:	4619      	mov	r1, r3
 800b216:	4806      	ldr	r0, [pc, #24]	; (800b230 <MX_SPI3_Init+0xa0>)
 800b218:	f7f9 ffd1 	bl	80051be <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 800b21c:	2100      	movs	r1, #0
 800b21e:	4804      	ldr	r0, [pc, #16]	; (800b230 <MX_SPI3_Init+0xa0>)
 800b220:	f7ff feb5 	bl	800af8e <LL_SPI_SetStandard>

}
 800b224:	bf00      	nop
 800b226:	3740      	adds	r7, #64	; 0x40
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	40020400 	.word	0x40020400
 800b230:	40003c00 	.word	0x40003c00

0800b234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b23a:	2300      	movs	r3, #0
 800b23c:	607b      	str	r3, [r7, #4]
 800b23e:	4b10      	ldr	r3, [pc, #64]	; (800b280 <HAL_MspInit+0x4c>)
 800b240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b242:	4a0f      	ldr	r2, [pc, #60]	; (800b280 <HAL_MspInit+0x4c>)
 800b244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b248:	6453      	str	r3, [r2, #68]	; 0x44
 800b24a:	4b0d      	ldr	r3, [pc, #52]	; (800b280 <HAL_MspInit+0x4c>)
 800b24c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b24e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b252:	607b      	str	r3, [r7, #4]
 800b254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b256:	2300      	movs	r3, #0
 800b258:	603b      	str	r3, [r7, #0]
 800b25a:	4b09      	ldr	r3, [pc, #36]	; (800b280 <HAL_MspInit+0x4c>)
 800b25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25e:	4a08      	ldr	r2, [pc, #32]	; (800b280 <HAL_MspInit+0x4c>)
 800b260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b264:	6413      	str	r3, [r2, #64]	; 0x40
 800b266:	4b06      	ldr	r3, [pc, #24]	; (800b280 <HAL_MspInit+0x4c>)
 800b268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b26e:	603b      	str	r3, [r7, #0]
 800b270:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b272:	bf00      	nop
 800b274:	370c      	adds	r7, #12
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	40023800 	.word	0x40023800

0800b284 <LL_TIM_ClearFlag_UPDATE>:
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f06f 0201 	mvn.w	r2, #1
 800b292:	611a      	str	r2, [r3, #16]
}
 800b294:	bf00      	nop
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	f003 0301 	and.w	r3, r3, #1
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d101      	bne.n	800b2b8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e000      	b.n	800b2ba <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	370c      	adds	r7, #12
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <LL_USART_IsActiveFlag_RXNE>:
{
 800b2c6:	b480      	push	{r7}
 800b2c8:	b083      	sub	sp, #12
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f003 0320 	and.w	r3, r3, #32
 800b2d6:	2b20      	cmp	r3, #32
 800b2d8:	bf0c      	ite	eq
 800b2da:	2301      	moveq	r3, #1
 800b2dc:	2300      	movne	r3, #0
 800b2de:	b2db      	uxtb	r3, r3
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <LL_USART_ClearFlag_RXNE>:
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f06f 0220 	mvn.w	r2, #32
 800b2fa:	601a      	str	r2, [r3, #0]
}
 800b2fc:	bf00      	nop
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr

0800b308 <LL_USART_ReceiveData8>:
{
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	b2db      	uxtb	r3, r3
}
 800b316:	4618      	mov	r0, r3
 800b318:	370c      	adds	r7, #12
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b322:	b480      	push	{r7}
 800b324:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b326:	bf00      	nop
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b330:	b480      	push	{r7}
 800b332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b334:	e7fe      	b.n	800b334 <HardFault_Handler+0x4>

0800b336 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b336:	b480      	push	{r7}
 800b338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b33a:	e7fe      	b.n	800b33a <MemManage_Handler+0x4>

0800b33c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b33c:	b480      	push	{r7}
 800b33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b340:	e7fe      	b.n	800b340 <BusFault_Handler+0x4>

0800b342 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b342:	b480      	push	{r7}
 800b344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b346:	e7fe      	b.n	800b346 <UsageFault_Handler+0x4>

0800b348 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b348:	b480      	push	{r7}
 800b34a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b34c:	bf00      	nop
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr

0800b356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b356:	b480      	push	{r7}
 800b358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b35a:	bf00      	nop
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b364:	b480      	push	{r7}
 800b366:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b368:	bf00      	nop
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b376:	f7f5 fe39 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b37a:	bf00      	nop
 800b37c:	bd80      	pop	{r7, pc}
	...

0800b380 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b384:	4802      	ldr	r0, [pc, #8]	; (800b390 <USART1_IRQHandler+0x10>)
 800b386:	f7f8 fe35 	bl	8003ff4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b38a:	bf00      	nop
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	20000690 	.word	0x20000690

0800b394 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(UART4))
 800b398:	4831      	ldr	r0, [pc, #196]	; (800b460 <UART4_IRQHandler+0xcc>)
 800b39a:	f7ff ff94 	bl	800b2c6 <LL_USART_IsActiveFlag_RXNE>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d058      	beq.n	800b456 <UART4_IRQHandler+0xc2>
	{
		LL_USART_ClearFlag_RXNE(UART4);
 800b3a4:	482e      	ldr	r0, [pc, #184]	; (800b460 <UART4_IRQHandler+0xcc>)
 800b3a6:	f7ff ffa1 	bl	800b2ec <LL_USART_ClearFlag_RXNE>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 800b3aa:	482d      	ldr	r0, [pc, #180]	; (800b460 <UART4_IRQHandler+0xcc>)
 800b3ac:	f7ff ffac 	bl	800b308 <LL_USART_ReceiveData8>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	4b2b      	ldr	r3, [pc, #172]	; (800b464 <UART4_IRQHandler+0xd0>)
 800b3b6:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 800b3b8:	4b2b      	ldr	r3, [pc, #172]	; (800b468 <UART4_IRQHandler+0xd4>)
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	701a      	strb	r2, [r3, #0]

		//LL_USART_TransmitData8(USART6, uart4_rx_data);

		switch(cnt)
 800b3be:	4b2b      	ldr	r3, [pc, #172]	; (800b46c <UART4_IRQHandler+0xd8>)
 800b3c0:	781b      	ldrb	r3, [r3, #0]
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d015      	beq.n	800b3f2 <UART4_IRQHandler+0x5e>
 800b3c6:	2b23      	cmp	r3, #35	; 0x23
 800b3c8:	d029      	beq.n	800b41e <UART4_IRQHandler+0x8a>
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d135      	bne.n	800b43a <UART4_IRQHandler+0xa6>
		{
		case 0:
			if(uart4_rx_data == 0xb5)
 800b3ce:	4b25      	ldr	r3, [pc, #148]	; (800b464 <UART4_IRQHandler+0xd0>)
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	2bb5      	cmp	r3, #181	; 0xb5
 800b3d4:	d141      	bne.n	800b45a <UART4_IRQHandler+0xc6>
			{
				m8n_rx_buf[cnt] = uart4_rx_data;
 800b3d6:	4b25      	ldr	r3, [pc, #148]	; (800b46c <UART4_IRQHandler+0xd8>)
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	4b21      	ldr	r3, [pc, #132]	; (800b464 <UART4_IRQHandler+0xd0>)
 800b3de:	7819      	ldrb	r1, [r3, #0]
 800b3e0:	4b23      	ldr	r3, [pc, #140]	; (800b470 <UART4_IRQHandler+0xdc>)
 800b3e2:	5499      	strb	r1, [r3, r2]
				cnt++;
 800b3e4:	4b21      	ldr	r3, [pc, #132]	; (800b46c <UART4_IRQHandler+0xd8>)
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	b2da      	uxtb	r2, r3
 800b3ec:	4b1f      	ldr	r3, [pc, #124]	; (800b46c <UART4_IRQHandler+0xd8>)
 800b3ee:	701a      	strb	r2, [r3, #0]
			}
			break;
 800b3f0:	e033      	b.n	800b45a <UART4_IRQHandler+0xc6>
		case 1:
			if(uart4_rx_data == 0x62)
 800b3f2:	4b1c      	ldr	r3, [pc, #112]	; (800b464 <UART4_IRQHandler+0xd0>)
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	2b62      	cmp	r3, #98	; 0x62
 800b3f8:	d10d      	bne.n	800b416 <UART4_IRQHandler+0x82>
			{
				m8n_rx_buf[cnt] = uart4_rx_data;
 800b3fa:	4b1c      	ldr	r3, [pc, #112]	; (800b46c <UART4_IRQHandler+0xd8>)
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	461a      	mov	r2, r3
 800b400:	4b18      	ldr	r3, [pc, #96]	; (800b464 <UART4_IRQHandler+0xd0>)
 800b402:	7819      	ldrb	r1, [r3, #0]
 800b404:	4b1a      	ldr	r3, [pc, #104]	; (800b470 <UART4_IRQHandler+0xdc>)
 800b406:	5499      	strb	r1, [r3, r2]
				cnt++;
 800b408:	4b18      	ldr	r3, [pc, #96]	; (800b46c <UART4_IRQHandler+0xd8>)
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	3301      	adds	r3, #1
 800b40e:	b2da      	uxtb	r2, r3
 800b410:	4b16      	ldr	r3, [pc, #88]	; (800b46c <UART4_IRQHandler+0xd8>)
 800b412:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 800b414:	e022      	b.n	800b45c <UART4_IRQHandler+0xc8>
				cnt = 0;
 800b416:	4b15      	ldr	r3, [pc, #84]	; (800b46c <UART4_IRQHandler+0xd8>)
 800b418:	2200      	movs	r2, #0
 800b41a:	701a      	strb	r2, [r3, #0]
			break;
 800b41c:	e01e      	b.n	800b45c <UART4_IRQHandler+0xc8>
		case 35:
			m8n_rx_buf[cnt] = uart4_rx_data;
 800b41e:	4b13      	ldr	r3, [pc, #76]	; (800b46c <UART4_IRQHandler+0xd8>)
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	461a      	mov	r2, r3
 800b424:	4b0f      	ldr	r3, [pc, #60]	; (800b464 <UART4_IRQHandler+0xd0>)
 800b426:	7819      	ldrb	r1, [r3, #0]
 800b428:	4b11      	ldr	r3, [pc, #68]	; (800b470 <UART4_IRQHandler+0xdc>)
 800b42a:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 800b42c:	4b0f      	ldr	r3, [pc, #60]	; (800b46c <UART4_IRQHandler+0xd8>)
 800b42e:	2200      	movs	r2, #0
 800b430:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 800b432:	4b10      	ldr	r3, [pc, #64]	; (800b474 <UART4_IRQHandler+0xe0>)
 800b434:	2201      	movs	r2, #1
 800b436:	701a      	strb	r2, [r3, #0]
			break;
 800b438:	e010      	b.n	800b45c <UART4_IRQHandler+0xc8>
		default:
			m8n_rx_buf[cnt] = uart4_rx_data;
 800b43a:	4b0c      	ldr	r3, [pc, #48]	; (800b46c <UART4_IRQHandler+0xd8>)
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	461a      	mov	r2, r3
 800b440:	4b08      	ldr	r3, [pc, #32]	; (800b464 <UART4_IRQHandler+0xd0>)
 800b442:	7819      	ldrb	r1, [r3, #0]
 800b444:	4b0a      	ldr	r3, [pc, #40]	; (800b470 <UART4_IRQHandler+0xdc>)
 800b446:	5499      	strb	r1, [r3, r2]
			cnt++;
 800b448:	4b08      	ldr	r3, [pc, #32]	; (800b46c <UART4_IRQHandler+0xd8>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	3301      	adds	r3, #1
 800b44e:	b2da      	uxtb	r2, r3
 800b450:	4b06      	ldr	r3, [pc, #24]	; (800b46c <UART4_IRQHandler+0xd8>)
 800b452:	701a      	strb	r2, [r3, #0]
			break;
 800b454:	e002      	b.n	800b45c <UART4_IRQHandler+0xc8>
		}
	}
 800b456:	bf00      	nop
 800b458:	e000      	b.n	800b45c <UART4_IRQHandler+0xc8>
			break;
 800b45a:	bf00      	nop
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800b45c:	bf00      	nop
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	40004c00 	.word	0x40004c00
 800b464:	20000211 	.word	0x20000211
 800b468:	20000210 	.word	0x20000210
 800b46c:	2000021b 	.word	0x2000021b
 800b470:	2000066c 	.word	0x2000066c
 800b474:	20000214 	.word	0x20000214

0800b478 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt = 0;
	if(LL_USART_IsActiveFlag_RXNE(UART5))
 800b47c:	4831      	ldr	r0, [pc, #196]	; (800b544 <UART5_IRQHandler+0xcc>)
 800b47e:	f7ff ff22 	bl	800b2c6 <LL_USART_IsActiveFlag_RXNE>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d058      	beq.n	800b53a <UART5_IRQHandler+0xc2>
	{
		LL_USART_ClearFlag_RXNE(UART5);
 800b488:	482e      	ldr	r0, [pc, #184]	; (800b544 <UART5_IRQHandler+0xcc>)
 800b48a:	f7ff ff2f 	bl	800b2ec <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);
 800b48e:	482d      	ldr	r0, [pc, #180]	; (800b544 <UART5_IRQHandler+0xcc>)
 800b490:	f7ff ff3a 	bl	800b308 <LL_USART_ReceiveData8>
 800b494:	4603      	mov	r3, r0
 800b496:	461a      	mov	r2, r3
 800b498:	4b2b      	ldr	r3, [pc, #172]	; (800b548 <UART5_IRQHandler+0xd0>)
 800b49a:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 800b49c:	4b2b      	ldr	r3, [pc, #172]	; (800b54c <UART5_IRQHandler+0xd4>)
 800b49e:	2201      	movs	r2, #1
 800b4a0:	701a      	strb	r2, [r3, #0]

		switch(cnt)
 800b4a2:	4b2b      	ldr	r3, [pc, #172]	; (800b550 <UART5_IRQHandler+0xd8>)
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d015      	beq.n	800b4d6 <UART5_IRQHandler+0x5e>
 800b4aa:	2b1f      	cmp	r3, #31
 800b4ac:	d029      	beq.n	800b502 <UART5_IRQHandler+0x8a>
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d135      	bne.n	800b51e <UART5_IRQHandler+0xa6>
		{
		case 0:
			if(uart5_rx_data == 0x20)
 800b4b2:	4b25      	ldr	r3, [pc, #148]	; (800b548 <UART5_IRQHandler+0xd0>)
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	2b20      	cmp	r3, #32
 800b4b8:	d141      	bne.n	800b53e <UART5_IRQHandler+0xc6>
			{
				ibus_rx_buf[cnt] = uart5_rx_data;
 800b4ba:	4b25      	ldr	r3, [pc, #148]	; (800b550 <UART5_IRQHandler+0xd8>)
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	4b21      	ldr	r3, [pc, #132]	; (800b548 <UART5_IRQHandler+0xd0>)
 800b4c2:	7819      	ldrb	r1, [r3, #0]
 800b4c4:	4b23      	ldr	r3, [pc, #140]	; (800b554 <UART5_IRQHandler+0xdc>)
 800b4c6:	5499      	strb	r1, [r3, r2]
				cnt++;
 800b4c8:	4b21      	ldr	r3, [pc, #132]	; (800b550 <UART5_IRQHandler+0xd8>)
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	b2da      	uxtb	r2, r3
 800b4d0:	4b1f      	ldr	r3, [pc, #124]	; (800b550 <UART5_IRQHandler+0xd8>)
 800b4d2:	701a      	strb	r2, [r3, #0]
			}
			break;
 800b4d4:	e033      	b.n	800b53e <UART5_IRQHandler+0xc6>
		case 1:
			if(uart5_rx_data == 0x40)
 800b4d6:	4b1c      	ldr	r3, [pc, #112]	; (800b548 <UART5_IRQHandler+0xd0>)
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	2b40      	cmp	r3, #64	; 0x40
 800b4dc:	d10d      	bne.n	800b4fa <UART5_IRQHandler+0x82>
			{
				ibus_rx_buf[cnt] = uart5_rx_data;
 800b4de:	4b1c      	ldr	r3, [pc, #112]	; (800b550 <UART5_IRQHandler+0xd8>)
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	4b18      	ldr	r3, [pc, #96]	; (800b548 <UART5_IRQHandler+0xd0>)
 800b4e6:	7819      	ldrb	r1, [r3, #0]
 800b4e8:	4b1a      	ldr	r3, [pc, #104]	; (800b554 <UART5_IRQHandler+0xdc>)
 800b4ea:	5499      	strb	r1, [r3, r2]
				cnt++;
 800b4ec:	4b18      	ldr	r3, [pc, #96]	; (800b550 <UART5_IRQHandler+0xd8>)
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	b2da      	uxtb	r2, r3
 800b4f4:	4b16      	ldr	r3, [pc, #88]	; (800b550 <UART5_IRQHandler+0xd8>)
 800b4f6:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 800b4f8:	e022      	b.n	800b540 <UART5_IRQHandler+0xc8>
				cnt = 0;
 800b4fa:	4b15      	ldr	r3, [pc, #84]	; (800b550 <UART5_IRQHandler+0xd8>)
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	701a      	strb	r2, [r3, #0]
			break;
 800b500:	e01e      	b.n	800b540 <UART5_IRQHandler+0xc8>
		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 800b502:	4b13      	ldr	r3, [pc, #76]	; (800b550 <UART5_IRQHandler+0xd8>)
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	461a      	mov	r2, r3
 800b508:	4b0f      	ldr	r3, [pc, #60]	; (800b548 <UART5_IRQHandler+0xd0>)
 800b50a:	7819      	ldrb	r1, [r3, #0]
 800b50c:	4b11      	ldr	r3, [pc, #68]	; (800b554 <UART5_IRQHandler+0xdc>)
 800b50e:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 800b510:	4b0f      	ldr	r3, [pc, #60]	; (800b550 <UART5_IRQHandler+0xd8>)
 800b512:	2200      	movs	r2, #0
 800b514:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 800b516:	4b10      	ldr	r3, [pc, #64]	; (800b558 <UART5_IRQHandler+0xe0>)
 800b518:	2201      	movs	r2, #1
 800b51a:	701a      	strb	r2, [r3, #0]
			break;
 800b51c:	e010      	b.n	800b540 <UART5_IRQHandler+0xc8>
		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 800b51e:	4b0c      	ldr	r3, [pc, #48]	; (800b550 <UART5_IRQHandler+0xd8>)
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	461a      	mov	r2, r3
 800b524:	4b08      	ldr	r3, [pc, #32]	; (800b548 <UART5_IRQHandler+0xd0>)
 800b526:	7819      	ldrb	r1, [r3, #0]
 800b528:	4b0a      	ldr	r3, [pc, #40]	; (800b554 <UART5_IRQHandler+0xdc>)
 800b52a:	5499      	strb	r1, [r3, r2]
			cnt++;
 800b52c:	4b08      	ldr	r3, [pc, #32]	; (800b550 <UART5_IRQHandler+0xd8>)
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	3301      	adds	r3, #1
 800b532:	b2da      	uxtb	r2, r3
 800b534:	4b06      	ldr	r3, [pc, #24]	; (800b550 <UART5_IRQHandler+0xd8>)
 800b536:	701a      	strb	r2, [r3, #0]
			break;
 800b538:	e002      	b.n	800b540 <UART5_IRQHandler+0xc8>
		}

//		while(!LL_USART_IsActiveFlag_TXE(USART6));
//		LL_USART_TransmitData8(USART6, uart5_rx_data);
	}
 800b53a:	bf00      	nop
 800b53c:	e000      	b.n	800b540 <UART5_IRQHandler+0xc8>
			break;
 800b53e:	bf00      	nop
  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800b540:	bf00      	nop
 800b542:	bd80      	pop	{r7, pc}
 800b544:	40005000 	.word	0x40005000
 800b548:	20000213 	.word	0x20000213
 800b54c:	20000212 	.word	0x20000212
 800b550:	2000021c 	.word	0x2000021c
 800b554:	2000064c 	.word	0x2000064c
 800b558:	20000215 	.word	0x20000215

0800b55c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	static unsigned char tim7_1ms_count = 0;
	static unsigned char tim7_20ms_count = 0;
	static unsigned char tim7_100ms_count = 0;
	static unsigned short tim7_1000ms_count = 0;
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 800b560:	4825      	ldr	r0, [pc, #148]	; (800b5f8 <TIM7_IRQHandler+0x9c>)
 800b562:	f7ff fe9d 	bl	800b2a0 <LL_TIM_IsActiveFlag_UPDATE>
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d043      	beq.n	800b5f4 <TIM7_IRQHandler+0x98>
	{
		LL_TIM_ClearFlag_UPDATE(TIM7);
 800b56c:	4822      	ldr	r0, [pc, #136]	; (800b5f8 <TIM7_IRQHandler+0x9c>)
 800b56e:	f7ff fe89 	bl	800b284 <LL_TIM_ClearFlag_UPDATE>

		tim7_1ms_count++;
 800b572:	4b22      	ldr	r3, [pc, #136]	; (800b5fc <TIM7_IRQHandler+0xa0>)
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	3301      	adds	r3, #1
 800b578:	b2da      	uxtb	r2, r3
 800b57a:	4b20      	ldr	r3, [pc, #128]	; (800b5fc <TIM7_IRQHandler+0xa0>)
 800b57c:	701a      	strb	r2, [r3, #0]
		if(tim7_1ms_count == 1)
 800b57e:	4b1f      	ldr	r3, [pc, #124]	; (800b5fc <TIM7_IRQHandler+0xa0>)
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	2b01      	cmp	r3, #1
 800b584:	d105      	bne.n	800b592 <TIM7_IRQHandler+0x36>
		{
			tim7_1ms_count = 0;
 800b586:	4b1d      	ldr	r3, [pc, #116]	; (800b5fc <TIM7_IRQHandler+0xa0>)
 800b588:	2200      	movs	r2, #0
 800b58a:	701a      	strb	r2, [r3, #0]
			tim7_1ms_flag = 1;
 800b58c:	4b1c      	ldr	r3, [pc, #112]	; (800b600 <TIM7_IRQHandler+0xa4>)
 800b58e:	2201      	movs	r2, #1
 800b590:	701a      	strb	r2, [r3, #0]
		}

		tim7_20ms_count++;
 800b592:	4b1c      	ldr	r3, [pc, #112]	; (800b604 <TIM7_IRQHandler+0xa8>)
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	3301      	adds	r3, #1
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	4b1a      	ldr	r3, [pc, #104]	; (800b604 <TIM7_IRQHandler+0xa8>)
 800b59c:	701a      	strb	r2, [r3, #0]
		if(tim7_20ms_count == 20)
 800b59e:	4b19      	ldr	r3, [pc, #100]	; (800b604 <TIM7_IRQHandler+0xa8>)
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	2b14      	cmp	r3, #20
 800b5a4:	d105      	bne.n	800b5b2 <TIM7_IRQHandler+0x56>
		{
			tim7_20ms_count = 0;
 800b5a6:	4b17      	ldr	r3, [pc, #92]	; (800b604 <TIM7_IRQHandler+0xa8>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	701a      	strb	r2, [r3, #0]
			tim7_20ms_flag = 1;
 800b5ac:	4b16      	ldr	r3, [pc, #88]	; (800b608 <TIM7_IRQHandler+0xac>)
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	701a      	strb	r2, [r3, #0]
		}

		tim7_100ms_count++;
 800b5b2:	4b16      	ldr	r3, [pc, #88]	; (800b60c <TIM7_IRQHandler+0xb0>)
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	b2da      	uxtb	r2, r3
 800b5ba:	4b14      	ldr	r3, [pc, #80]	; (800b60c <TIM7_IRQHandler+0xb0>)
 800b5bc:	701a      	strb	r2, [r3, #0]
		if(tim7_100ms_count == 100)
 800b5be:	4b13      	ldr	r3, [pc, #76]	; (800b60c <TIM7_IRQHandler+0xb0>)
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	2b64      	cmp	r3, #100	; 0x64
 800b5c4:	d105      	bne.n	800b5d2 <TIM7_IRQHandler+0x76>
		{
			tim7_100ms_count = 0;
 800b5c6:	4b11      	ldr	r3, [pc, #68]	; (800b60c <TIM7_IRQHandler+0xb0>)
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	701a      	strb	r2, [r3, #0]
			tim7_100ms_flag = 1;
 800b5cc:	4b10      	ldr	r3, [pc, #64]	; (800b610 <TIM7_IRQHandler+0xb4>)
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	701a      	strb	r2, [r3, #0]
		}

		tim7_1000ms_count++;
 800b5d2:	4b10      	ldr	r3, [pc, #64]	; (800b614 <TIM7_IRQHandler+0xb8>)
 800b5d4:	881b      	ldrh	r3, [r3, #0]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	b29a      	uxth	r2, r3
 800b5da:	4b0e      	ldr	r3, [pc, #56]	; (800b614 <TIM7_IRQHandler+0xb8>)
 800b5dc:	801a      	strh	r2, [r3, #0]
		if(tim7_1000ms_count == 1000)
 800b5de:	4b0d      	ldr	r3, [pc, #52]	; (800b614 <TIM7_IRQHandler+0xb8>)
 800b5e0:	881b      	ldrh	r3, [r3, #0]
 800b5e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b5e6:	d105      	bne.n	800b5f4 <TIM7_IRQHandler+0x98>
		{
			tim7_1000ms_count = 0;
 800b5e8:	4b0a      	ldr	r3, [pc, #40]	; (800b614 <TIM7_IRQHandler+0xb8>)
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	801a      	strh	r2, [r3, #0]
			tim7_1000ms_flag = 1;
 800b5ee:	4b0a      	ldr	r3, [pc, #40]	; (800b618 <TIM7_IRQHandler+0xbc>)
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800b5f4:	bf00      	nop
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	40001400 	.word	0x40001400
 800b5fc:	2000021d 	.word	0x2000021d
 800b600:	20000217 	.word	0x20000217
 800b604:	2000021e 	.word	0x2000021e
 800b608:	20000218 	.word	0x20000218
 800b60c:	2000021f 	.word	0x2000021f
 800b610:	20000219 	.word	0x20000219
 800b614:	20000220 	.word	0x20000220
 800b618:	2000021a 	.word	0x2000021a

0800b61c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800b620:	4802      	ldr	r0, [pc, #8]	; (800b62c <DMA2_Stream0_IRQHandler+0x10>)
 800b622:	f7f6 fb53 	bl	8001ccc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800b626:	bf00      	nop
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	2000054c 	.word	0x2000054c

0800b630 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6))
 800b634:	480a      	ldr	r0, [pc, #40]	; (800b660 <USART6_IRQHandler+0x30>)
 800b636:	f7ff fe46 	bl	800b2c6 <LL_USART_IsActiveFlag_RXNE>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00c      	beq.n	800b65a <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6);
 800b640:	4807      	ldr	r0, [pc, #28]	; (800b660 <USART6_IRQHandler+0x30>)
 800b642:	f7ff fe53 	bl	800b2ec <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);
 800b646:	4806      	ldr	r0, [pc, #24]	; (800b660 <USART6_IRQHandler+0x30>)
 800b648:	f7ff fe5e 	bl	800b308 <LL_USART_ReceiveData8>
 800b64c:	4603      	mov	r3, r0
 800b64e:	461a      	mov	r2, r3
 800b650:	4b04      	ldr	r3, [pc, #16]	; (800b664 <USART6_IRQHandler+0x34>)
 800b652:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;
 800b654:	4b04      	ldr	r3, [pc, #16]	; (800b668 <USART6_IRQHandler+0x38>)
 800b656:	2201      	movs	r2, #1
 800b658:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800b65a:	bf00      	nop
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	40011400 	.word	0x40011400
 800b664:	2000020f 	.word	0x2000020f
 800b668:	2000020e 	.word	0x2000020e

0800b66c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b086      	sub	sp, #24
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b678:	2300      	movs	r3, #0
 800b67a:	617b      	str	r3, [r7, #20]
 800b67c:	e00a      	b.n	800b694 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b67e:	f3af 8000 	nop.w
 800b682:	4601      	mov	r1, r0
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	1c5a      	adds	r2, r3, #1
 800b688:	60ba      	str	r2, [r7, #8]
 800b68a:	b2ca      	uxtb	r2, r1
 800b68c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	3301      	adds	r3, #1
 800b692:	617b      	str	r3, [r7, #20]
 800b694:	697a      	ldr	r2, [r7, #20]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	429a      	cmp	r2, r3
 800b69a:	dbf0      	blt.n	800b67e <_read+0x12>
	}

return len;
 800b69c:	687b      	ldr	r3, [r7, #4]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3718      	adds	r7, #24
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 800b6a6:	b480      	push	{r7}
 800b6a8:	b083      	sub	sp, #12
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
	return -1;
 800b6ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	370c      	adds	r7, #12
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr

0800b6be <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b6be:	b480      	push	{r7}
 800b6c0:	b083      	sub	sp, #12
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
 800b6c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b6ce:	605a      	str	r2, [r3, #4]
	return 0;
 800b6d0:	2300      	movs	r3, #0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	370c      	adds	r7, #12
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <_isatty>:

int _isatty(int file)
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b083      	sub	sp, #12
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
	return 1;
 800b6e6:	2301      	movs	r3, #1
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
	return 0;
 800b700:	2300      	movs	r3, #0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3714      	adds	r7, #20
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr
	...

0800b710 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800b718:	4b11      	ldr	r3, [pc, #68]	; (800b760 <_sbrk+0x50>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d102      	bne.n	800b726 <_sbrk+0x16>
		heap_end = &end;
 800b720:	4b0f      	ldr	r3, [pc, #60]	; (800b760 <_sbrk+0x50>)
 800b722:	4a10      	ldr	r2, [pc, #64]	; (800b764 <_sbrk+0x54>)
 800b724:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800b726:	4b0e      	ldr	r3, [pc, #56]	; (800b760 <_sbrk+0x50>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800b72c:	4b0c      	ldr	r3, [pc, #48]	; (800b760 <_sbrk+0x50>)
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	4413      	add	r3, r2
 800b734:	466a      	mov	r2, sp
 800b736:	4293      	cmp	r3, r2
 800b738:	d907      	bls.n	800b74a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800b73a:	f000 fe01 	bl	800c340 <__errno>
 800b73e:	4602      	mov	r2, r0
 800b740:	230c      	movs	r3, #12
 800b742:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800b744:	f04f 33ff 	mov.w	r3, #4294967295
 800b748:	e006      	b.n	800b758 <_sbrk+0x48>
	}

	heap_end += incr;
 800b74a:	4b05      	ldr	r3, [pc, #20]	; (800b760 <_sbrk+0x50>)
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4413      	add	r3, r2
 800b752:	4a03      	ldr	r2, [pc, #12]	; (800b760 <_sbrk+0x50>)
 800b754:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800b756:	68fb      	ldr	r3, [r7, #12]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	20000224 	.word	0x20000224
 800b764:	200006d8 	.word	0x200006d8

0800b768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b768:	b480      	push	{r7}
 800b76a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b76c:	4b16      	ldr	r3, [pc, #88]	; (800b7c8 <SystemInit+0x60>)
 800b76e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b772:	4a15      	ldr	r2, [pc, #84]	; (800b7c8 <SystemInit+0x60>)
 800b774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b77c:	4b13      	ldr	r3, [pc, #76]	; (800b7cc <SystemInit+0x64>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4a12      	ldr	r2, [pc, #72]	; (800b7cc <SystemInit+0x64>)
 800b782:	f043 0301 	orr.w	r3, r3, #1
 800b786:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b788:	4b10      	ldr	r3, [pc, #64]	; (800b7cc <SystemInit+0x64>)
 800b78a:	2200      	movs	r2, #0
 800b78c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b78e:	4b0f      	ldr	r3, [pc, #60]	; (800b7cc <SystemInit+0x64>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a0e      	ldr	r2, [pc, #56]	; (800b7cc <SystemInit+0x64>)
 800b794:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800b798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b79c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b79e:	4b0b      	ldr	r3, [pc, #44]	; (800b7cc <SystemInit+0x64>)
 800b7a0:	4a0b      	ldr	r2, [pc, #44]	; (800b7d0 <SystemInit+0x68>)
 800b7a2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b7a4:	4b09      	ldr	r3, [pc, #36]	; (800b7cc <SystemInit+0x64>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a08      	ldr	r2, [pc, #32]	; (800b7cc <SystemInit+0x64>)
 800b7aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b7b0:	4b06      	ldr	r3, [pc, #24]	; (800b7cc <SystemInit+0x64>)
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b7b6:	4b04      	ldr	r3, [pc, #16]	; (800b7c8 <SystemInit+0x60>)
 800b7b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b7bc:	609a      	str	r2, [r3, #8]
#endif
}
 800b7be:	bf00      	nop
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr
 800b7c8:	e000ed00 	.word	0xe000ed00
 800b7cc:	40023800 	.word	0x40023800
 800b7d0:	24003010 	.word	0x24003010

0800b7d4 <__NVIC_GetPriorityGrouping>:
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b7d8:	4b04      	ldr	r3, [pc, #16]	; (800b7ec <__NVIC_GetPriorityGrouping+0x18>)
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	0a1b      	lsrs	r3, r3, #8
 800b7de:	f003 0307 	and.w	r3, r3, #7
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr
 800b7ec:	e000ed00 	.word	0xe000ed00

0800b7f0 <__NVIC_EnableIRQ>:
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b7fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	db0b      	blt.n	800b81a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b802:	79fb      	ldrb	r3, [r7, #7]
 800b804:	f003 021f 	and.w	r2, r3, #31
 800b808:	4907      	ldr	r1, [pc, #28]	; (800b828 <__NVIC_EnableIRQ+0x38>)
 800b80a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b80e:	095b      	lsrs	r3, r3, #5
 800b810:	2001      	movs	r0, #1
 800b812:	fa00 f202 	lsl.w	r2, r0, r2
 800b816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b81a:	bf00      	nop
 800b81c:	370c      	adds	r7, #12
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	e000e100 	.word	0xe000e100

0800b82c <__NVIC_SetPriority>:
{
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	4603      	mov	r3, r0
 800b834:	6039      	str	r1, [r7, #0]
 800b836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	db0a      	blt.n	800b856 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	b2da      	uxtb	r2, r3
 800b844:	490c      	ldr	r1, [pc, #48]	; (800b878 <__NVIC_SetPriority+0x4c>)
 800b846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b84a:	0112      	lsls	r2, r2, #4
 800b84c:	b2d2      	uxtb	r2, r2
 800b84e:	440b      	add	r3, r1
 800b850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b854:	e00a      	b.n	800b86c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	b2da      	uxtb	r2, r3
 800b85a:	4908      	ldr	r1, [pc, #32]	; (800b87c <__NVIC_SetPriority+0x50>)
 800b85c:	79fb      	ldrb	r3, [r7, #7]
 800b85e:	f003 030f 	and.w	r3, r3, #15
 800b862:	3b04      	subs	r3, #4
 800b864:	0112      	lsls	r2, r2, #4
 800b866:	b2d2      	uxtb	r2, r2
 800b868:	440b      	add	r3, r1
 800b86a:	761a      	strb	r2, [r3, #24]
}
 800b86c:	bf00      	nop
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr
 800b878:	e000e100 	.word	0xe000e100
 800b87c:	e000ed00 	.word	0xe000ed00

0800b880 <NVIC_EncodePriority>:
{
 800b880:	b480      	push	{r7}
 800b882:	b089      	sub	sp, #36	; 0x24
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f003 0307 	and.w	r3, r3, #7
 800b892:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	f1c3 0307 	rsb	r3, r3, #7
 800b89a:	2b04      	cmp	r3, #4
 800b89c:	bf28      	it	cs
 800b89e:	2304      	movcs	r3, #4
 800b8a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	3304      	adds	r3, #4
 800b8a6:	2b06      	cmp	r3, #6
 800b8a8:	d902      	bls.n	800b8b0 <NVIC_EncodePriority+0x30>
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	3b03      	subs	r3, #3
 800b8ae:	e000      	b.n	800b8b2 <NVIC_EncodePriority+0x32>
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8b8:	69bb      	ldr	r3, [r7, #24]
 800b8ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b8be:	43da      	mvns	r2, r3
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	401a      	ands	r2, r3
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b8c8:	f04f 31ff 	mov.w	r1, #4294967295
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	fa01 f303 	lsl.w	r3, r1, r3
 800b8d2:	43d9      	mvns	r1, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b8d8:	4313      	orrs	r3, r2
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3724      	adds	r7, #36	; 0x24
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <LL_TIM_EnableARRPreload>:
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b083      	sub	sp, #12
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	601a      	str	r2, [r3, #0]
}
 800b8fa:	bf00      	nop
 800b8fc:	370c      	adds	r7, #12
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr
	...

0800b908 <LL_TIM_OC_EnableFast>:
{
 800b908:	b4b0      	push	{r4, r5, r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2b01      	cmp	r3, #1
 800b916:	d01c      	beq.n	800b952 <LL_TIM_OC_EnableFast+0x4a>
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	2b04      	cmp	r3, #4
 800b91c:	d017      	beq.n	800b94e <LL_TIM_OC_EnableFast+0x46>
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	2b10      	cmp	r3, #16
 800b922:	d012      	beq.n	800b94a <LL_TIM_OC_EnableFast+0x42>
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	2b40      	cmp	r3, #64	; 0x40
 800b928:	d00d      	beq.n	800b946 <LL_TIM_OC_EnableFast+0x3e>
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b930:	d007      	beq.n	800b942 <LL_TIM_OC_EnableFast+0x3a>
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b938:	d101      	bne.n	800b93e <LL_TIM_OC_EnableFast+0x36>
 800b93a:	2305      	movs	r3, #5
 800b93c:	e00a      	b.n	800b954 <LL_TIM_OC_EnableFast+0x4c>
 800b93e:	2306      	movs	r3, #6
 800b940:	e008      	b.n	800b954 <LL_TIM_OC_EnableFast+0x4c>
 800b942:	2304      	movs	r3, #4
 800b944:	e006      	b.n	800b954 <LL_TIM_OC_EnableFast+0x4c>
 800b946:	2303      	movs	r3, #3
 800b948:	e004      	b.n	800b954 <LL_TIM_OC_EnableFast+0x4c>
 800b94a:	2302      	movs	r3, #2
 800b94c:	e002      	b.n	800b954 <LL_TIM_OC_EnableFast+0x4c>
 800b94e:	2301      	movs	r3, #1
 800b950:	e000      	b.n	800b954 <LL_TIM_OC_EnableFast+0x4c>
 800b952:	2300      	movs	r3, #0
 800b954:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	3318      	adds	r3, #24
 800b95a:	461a      	mov	r2, r3
 800b95c:	4629      	mov	r1, r5
 800b95e:	4b09      	ldr	r3, [pc, #36]	; (800b984 <LL_TIM_OC_EnableFast+0x7c>)
 800b960:	5c5b      	ldrb	r3, [r3, r1]
 800b962:	4413      	add	r3, r2
 800b964:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800b966:	6822      	ldr	r2, [r4, #0]
 800b968:	4629      	mov	r1, r5
 800b96a:	4b07      	ldr	r3, [pc, #28]	; (800b988 <LL_TIM_OC_EnableFast+0x80>)
 800b96c:	5c5b      	ldrb	r3, [r3, r1]
 800b96e:	4619      	mov	r1, r3
 800b970:	2304      	movs	r3, #4
 800b972:	408b      	lsls	r3, r1
 800b974:	4313      	orrs	r3, r2
 800b976:	6023      	str	r3, [r4, #0]
}
 800b978:	bf00      	nop
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bcb0      	pop	{r4, r5, r7}
 800b980:	4770      	bx	lr
 800b982:	bf00      	nop
 800b984:	0800fe9c 	.word	0x0800fe9c
 800b988:	0800fea4 	.word	0x0800fea4

0800b98c <LL_TIM_OC_EnablePreload>:
{
 800b98c:	b4b0      	push	{r4, r5, r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d01c      	beq.n	800b9d6 <LL_TIM_OC_EnablePreload+0x4a>
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	2b04      	cmp	r3, #4
 800b9a0:	d017      	beq.n	800b9d2 <LL_TIM_OC_EnablePreload+0x46>
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	2b10      	cmp	r3, #16
 800b9a6:	d012      	beq.n	800b9ce <LL_TIM_OC_EnablePreload+0x42>
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	2b40      	cmp	r3, #64	; 0x40
 800b9ac:	d00d      	beq.n	800b9ca <LL_TIM_OC_EnablePreload+0x3e>
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9b4:	d007      	beq.n	800b9c6 <LL_TIM_OC_EnablePreload+0x3a>
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9bc:	d101      	bne.n	800b9c2 <LL_TIM_OC_EnablePreload+0x36>
 800b9be:	2305      	movs	r3, #5
 800b9c0:	e00a      	b.n	800b9d8 <LL_TIM_OC_EnablePreload+0x4c>
 800b9c2:	2306      	movs	r3, #6
 800b9c4:	e008      	b.n	800b9d8 <LL_TIM_OC_EnablePreload+0x4c>
 800b9c6:	2304      	movs	r3, #4
 800b9c8:	e006      	b.n	800b9d8 <LL_TIM_OC_EnablePreload+0x4c>
 800b9ca:	2303      	movs	r3, #3
 800b9cc:	e004      	b.n	800b9d8 <LL_TIM_OC_EnablePreload+0x4c>
 800b9ce:	2302      	movs	r3, #2
 800b9d0:	e002      	b.n	800b9d8 <LL_TIM_OC_EnablePreload+0x4c>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e000      	b.n	800b9d8 <LL_TIM_OC_EnablePreload+0x4c>
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	3318      	adds	r3, #24
 800b9de:	461a      	mov	r2, r3
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	4b09      	ldr	r3, [pc, #36]	; (800ba08 <LL_TIM_OC_EnablePreload+0x7c>)
 800b9e4:	5c5b      	ldrb	r3, [r3, r1]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800b9ea:	6822      	ldr	r2, [r4, #0]
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	4b07      	ldr	r3, [pc, #28]	; (800ba0c <LL_TIM_OC_EnablePreload+0x80>)
 800b9f0:	5c5b      	ldrb	r3, [r3, r1]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	2308      	movs	r3, #8
 800b9f6:	408b      	lsls	r3, r1
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	6023      	str	r3, [r4, #0]
}
 800b9fc:	bf00      	nop
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bcb0      	pop	{r4, r5, r7}
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	0800fe9c 	.word	0x0800fe9c
 800ba0c:	0800fea4 	.word	0x0800fea4

0800ba10 <LL_TIM_SetClockSource>:
{
 800ba10:	b480      	push	{r7}
 800ba12:	b083      	sub	sp, #12
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba22:	f023 0307 	bic.w	r3, r3, #7
 800ba26:	683a      	ldr	r2, [r7, #0]
 800ba28:	431a      	orrs	r2, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	609a      	str	r2, [r3, #8]
}
 800ba2e:	bf00      	nop
 800ba30:	370c      	adds	r7, #12
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr

0800ba3a <LL_TIM_SetTriggerOutput>:
{
 800ba3a:	b480      	push	{r7}
 800ba3c:	b083      	sub	sp, #12
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	431a      	orrs	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	605a      	str	r2, [r3, #4]
}
 800ba54:	bf00      	nop
 800ba56:	370c      	adds	r7, #12
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr

0800ba60 <LL_TIM_DisableMasterSlaveMode>:
{
 800ba60:	b480      	push	{r7}
 800ba62:	b083      	sub	sp, #12
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	609a      	str	r2, [r3, #8]
}
 800ba74:	bf00      	nop
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <LL_AHB1_GRP1_EnableClock>:
{
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800ba88:	4b08      	ldr	r3, [pc, #32]	; (800baac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800ba8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba8c:	4907      	ldr	r1, [pc, #28]	; (800baac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	4313      	orrs	r3, r2
 800ba92:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800ba94:	4b05      	ldr	r3, [pc, #20]	; (800baac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800ba96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4013      	ands	r3, r2
 800ba9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
}
 800baa0:	bf00      	nop
 800baa2:	3714      	adds	r7, #20
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr
 800baac:	40023800 	.word	0x40023800

0800bab0 <LL_APB1_GRP1_EnableClock>:
{
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800bab8:	4b08      	ldr	r3, [pc, #32]	; (800badc <LL_APB1_GRP1_EnableClock+0x2c>)
 800baba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800babc:	4907      	ldr	r1, [pc, #28]	; (800badc <LL_APB1_GRP1_EnableClock+0x2c>)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4313      	orrs	r3, r2
 800bac2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800bac4:	4b05      	ldr	r3, [pc, #20]	; (800badc <LL_APB1_GRP1_EnableClock+0x2c>)
 800bac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	4013      	ands	r3, r2
 800bacc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bace:	68fb      	ldr	r3, [r7, #12]
}
 800bad0:	bf00      	nop
 800bad2:	3714      	adds	r7, #20
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr
 800badc:	40023800 	.word	0x40023800

0800bae0 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b094      	sub	sp, #80	; 0x50
 800bae4:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800bae6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800baea:	2200      	movs	r2, #0
 800baec:	601a      	str	r2, [r3, #0]
 800baee:	605a      	str	r2, [r3, #4]
 800baf0:	609a      	str	r2, [r3, #8]
 800baf2:	60da      	str	r2, [r3, #12]
 800baf4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800baf6:	f107 031c 	add.w	r3, r7, #28
 800bafa:	2220      	movs	r2, #32
 800bafc:	2100      	movs	r1, #0
 800bafe:	4618      	mov	r0, r3
 800bb00:	f000 fc48 	bl	800c394 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb04:	1d3b      	adds	r3, r7, #4
 800bb06:	2200      	movs	r2, #0
 800bb08:	601a      	str	r2, [r3, #0]
 800bb0a:	605a      	str	r2, [r3, #4]
 800bb0c:	609a      	str	r2, [r3, #8]
 800bb0e:	60da      	str	r2, [r3, #12]
 800bb10:	611a      	str	r2, [r3, #16]
 800bb12:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800bb14:	2002      	movs	r0, #2
 800bb16:	f7ff ffcb 	bl	800bab0 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 999;
 800bb1a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800bb1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800bb20:	2300      	movs	r3, #0
 800bb22:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 800bb24:	2314      	movs	r3, #20
 800bb26:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800bb2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bb30:	4619      	mov	r1, r3
 800bb32:	4822      	ldr	r0, [pc, #136]	; (800bbbc <MX_TIM3_Init+0xdc>)
 800bb34:	f7f9 fc08 	bl	8005348 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800bb38:	4820      	ldr	r0, [pc, #128]	; (800bbbc <MX_TIM3_Init+0xdc>)
 800bb3a:	f7ff fed4 	bl	800b8e6 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800bb3e:	2100      	movs	r1, #0
 800bb40:	481e      	ldr	r0, [pc, #120]	; (800bbbc <MX_TIM3_Init+0xdc>)
 800bb42:	f7ff ff65 	bl	800ba10 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800bb46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bb4a:	481c      	ldr	r0, [pc, #112]	; (800bbbc <MX_TIM3_Init+0xdc>)
 800bb4c:	f7ff ff1e 	bl	800b98c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800bb50:	2360      	movs	r3, #96	; 0x60
 800bb52:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800bb54:	2300      	movs	r3, #0
 800bb56:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 800bb5c:	230a      	movs	r3, #10
 800bb5e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800bb60:	2300      	movs	r3, #0
 800bb62:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800bb64:	f107 031c 	add.w	r3, r7, #28
 800bb68:	461a      	mov	r2, r3
 800bb6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bb6e:	4813      	ldr	r0, [pc, #76]	; (800bbbc <MX_TIM3_Init+0xdc>)
 800bb70:	f7f9 fc84 	bl	800547c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 800bb74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bb78:	4810      	ldr	r0, [pc, #64]	; (800bbbc <MX_TIM3_Init+0xdc>)
 800bb7a:	f7ff fec5 	bl	800b908 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800bb7e:	2100      	movs	r1, #0
 800bb80:	480e      	ldr	r0, [pc, #56]	; (800bbbc <MX_TIM3_Init+0xdc>)
 800bb82:	f7ff ff5a 	bl	800ba3a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800bb86:	480d      	ldr	r0, [pc, #52]	; (800bbbc <MX_TIM3_Init+0xdc>)
 800bb88:	f7ff ff6a 	bl	800ba60 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800bb8c:	2002      	movs	r0, #2
 800bb8e:	f7ff ff77 	bl	800ba80 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration    
    PB1     ------> TIM3_CH4 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800bb92:	2302      	movs	r3, #2
 800bb94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800bb96:	2302      	movs	r3, #2
 800bb98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800bba2:	2300      	movs	r3, #0
 800bba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800bba6:	2302      	movs	r3, #2
 800bba8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bbaa:	1d3b      	adds	r3, r7, #4
 800bbac:	4619      	mov	r1, r3
 800bbae:	4804      	ldr	r0, [pc, #16]	; (800bbc0 <MX_TIM3_Init+0xe0>)
 800bbb0:	f7f9 f936 	bl	8004e20 <LL_GPIO_Init>

}
 800bbb4:	bf00      	nop
 800bbb6:	3750      	adds	r7, #80	; 0x50
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	40000400 	.word	0x40000400
 800bbc0:	40020400 	.word	0x40020400

0800bbc4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b094      	sub	sp, #80	; 0x50
 800bbc8:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800bbca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bbce:	2200      	movs	r2, #0
 800bbd0:	601a      	str	r2, [r3, #0]
 800bbd2:	605a      	str	r2, [r3, #4]
 800bbd4:	609a      	str	r2, [r3, #8]
 800bbd6:	60da      	str	r2, [r3, #12]
 800bbd8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800bbda:	f107 031c 	add.w	r3, r7, #28
 800bbde:	2220      	movs	r2, #32
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f000 fbd6 	bl	800c394 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbe8:	1d3b      	adds	r3, r7, #4
 800bbea:	2200      	movs	r2, #0
 800bbec:	601a      	str	r2, [r3, #0]
 800bbee:	605a      	str	r2, [r3, #4]
 800bbf0:	609a      	str	r2, [r3, #8]
 800bbf2:	60da      	str	r2, [r3, #12]
 800bbf4:	611a      	str	r2, [r3, #16]
 800bbf6:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 800bbf8:	2008      	movs	r0, #8
 800bbfa:	f7ff ff59 	bl	800bab0 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 0;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800bc02:	2300      	movs	r3, #0
 800bc04:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 41999;
 800bc06:	f24a 430f 	movw	r3, #41999	; 0xa40f
 800bc0a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 800bc10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bc14:	4619      	mov	r1, r3
 800bc16:	4840      	ldr	r0, [pc, #256]	; (800bd18 <MX_TIM5_Init+0x154>)
 800bc18:	f7f9 fb96 	bl	8005348 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 800bc1c:	483e      	ldr	r0, [pc, #248]	; (800bd18 <MX_TIM5_Init+0x154>)
 800bc1e:	f7ff fe62 	bl	800b8e6 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 800bc22:	2100      	movs	r1, #0
 800bc24:	483c      	ldr	r0, [pc, #240]	; (800bd18 <MX_TIM5_Init+0x154>)
 800bc26:	f7ff fef3 	bl	800ba10 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 800bc2a:	2101      	movs	r1, #1
 800bc2c:	483a      	ldr	r0, [pc, #232]	; (800bd18 <MX_TIM5_Init+0x154>)
 800bc2e:	f7ff fead 	bl	800b98c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800bc32:	2360      	movs	r3, #96	; 0x60
 800bc34:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800bc36:	2300      	movs	r3, #0
 800bc38:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800bc42:	2300      	movs	r3, #0
 800bc44:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800bc46:	f107 031c 	add.w	r3, r7, #28
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	2101      	movs	r1, #1
 800bc4e:	4832      	ldr	r0, [pc, #200]	; (800bd18 <MX_TIM5_Init+0x154>)
 800bc50:	f7f9 fc14 	bl	800547c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 800bc54:	2101      	movs	r1, #1
 800bc56:	4830      	ldr	r0, [pc, #192]	; (800bd18 <MX_TIM5_Init+0x154>)
 800bc58:	f7ff fe56 	bl	800b908 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 800bc5c:	2110      	movs	r1, #16
 800bc5e:	482e      	ldr	r0, [pc, #184]	; (800bd18 <MX_TIM5_Init+0x154>)
 800bc60:	f7ff fe94 	bl	800b98c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800bc64:	2300      	movs	r3, #0
 800bc66:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800bc6c:	f107 031c 	add.w	r3, r7, #28
 800bc70:	461a      	mov	r2, r3
 800bc72:	2110      	movs	r1, #16
 800bc74:	4828      	ldr	r0, [pc, #160]	; (800bd18 <MX_TIM5_Init+0x154>)
 800bc76:	f7f9 fc01 	bl	800547c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 800bc7a:	2110      	movs	r1, #16
 800bc7c:	4826      	ldr	r0, [pc, #152]	; (800bd18 <MX_TIM5_Init+0x154>)
 800bc7e:	f7ff fe43 	bl	800b908 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 800bc82:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bc86:	4824      	ldr	r0, [pc, #144]	; (800bd18 <MX_TIM5_Init+0x154>)
 800bc88:	f7ff fe80 	bl	800b98c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800bc90:	2300      	movs	r3, #0
 800bc92:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800bc94:	f107 031c 	add.w	r3, r7, #28
 800bc98:	461a      	mov	r2, r3
 800bc9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bc9e:	481e      	ldr	r0, [pc, #120]	; (800bd18 <MX_TIM5_Init+0x154>)
 800bca0:	f7f9 fbec 	bl	800547c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 800bca4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bca8:	481b      	ldr	r0, [pc, #108]	; (800bd18 <MX_TIM5_Init+0x154>)
 800bcaa:	f7ff fe2d 	bl	800b908 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 800bcae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bcb2:	4819      	ldr	r0, [pc, #100]	; (800bd18 <MX_TIM5_Init+0x154>)
 800bcb4:	f7ff fe6a 	bl	800b98c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800bcc0:	f107 031c 	add.w	r3, r7, #28
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bcca:	4813      	ldr	r0, [pc, #76]	; (800bd18 <MX_TIM5_Init+0x154>)
 800bccc:	f7f9 fbd6 	bl	800547c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 800bcd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bcd4:	4810      	ldr	r0, [pc, #64]	; (800bd18 <MX_TIM5_Init+0x154>)
 800bcd6:	f7ff fe17 	bl	800b908 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 800bcda:	2100      	movs	r1, #0
 800bcdc:	480e      	ldr	r0, [pc, #56]	; (800bd18 <MX_TIM5_Init+0x154>)
 800bcde:	f7ff feac 	bl	800ba3a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 800bce2:	480d      	ldr	r0, [pc, #52]	; (800bd18 <MX_TIM5_Init+0x154>)
 800bce4:	f7ff febc 	bl	800ba60 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800bce8:	2001      	movs	r0, #1
 800bcea:	f7ff fec9 	bl	800ba80 <LL_AHB1_GRP1_EnableClock>
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800bcee:	230f      	movs	r3, #15
 800bcf0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800bcf2:	2302      	movs	r3, #2
 800bcf4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800bd02:	2302      	movs	r3, #2
 800bd04:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd06:	1d3b      	adds	r3, r7, #4
 800bd08:	4619      	mov	r1, r3
 800bd0a:	4804      	ldr	r0, [pc, #16]	; (800bd1c <MX_TIM5_Init+0x158>)
 800bd0c:	f7f9 f888 	bl	8004e20 <LL_GPIO_Init>

}
 800bd10:	bf00      	nop
 800bd12:	3750      	adds	r7, #80	; 0x50
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	40000c00 	.word	0x40000c00
 800bd1c:	40020000 	.word	0x40020000

0800bd20 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b086      	sub	sp, #24
 800bd24:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800bd26:	1d3b      	adds	r3, r7, #4
 800bd28:	2200      	movs	r2, #0
 800bd2a:	601a      	str	r2, [r3, #0]
 800bd2c:	605a      	str	r2, [r3, #4]
 800bd2e:	609a      	str	r2, [r3, #8]
 800bd30:	60da      	str	r2, [r3, #12]
 800bd32:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 800bd34:	2020      	movs	r0, #32
 800bd36:	f7ff febb 	bl	800bab0 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800bd3a:	f7ff fd4b 	bl	800b7d4 <__NVIC_GetPriorityGrouping>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	2200      	movs	r2, #0
 800bd42:	2100      	movs	r1, #0
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7ff fd9b 	bl	800b880 <NVIC_EncodePriority>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	2037      	movs	r0, #55	; 0x37
 800bd50:	f7ff fd6c 	bl	800b82c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 800bd54:	2037      	movs	r0, #55	; 0x37
 800bd56:	f7ff fd4b 	bl	800b7f0 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 41999;
 800bd5a:	f24a 430f 	movw	r3, #41999	; 0xa40f
 800bd5e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800bd60:	2300      	movs	r3, #0
 800bd62:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1;
 800bd64:	2301      	movs	r3, #1
 800bd66:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 800bd68:	1d3b      	adds	r3, r7, #4
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	4808      	ldr	r0, [pc, #32]	; (800bd90 <MX_TIM7_Init+0x70>)
 800bd6e:	f7f9 faeb 	bl	8005348 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 800bd72:	4807      	ldr	r0, [pc, #28]	; (800bd90 <MX_TIM7_Init+0x70>)
 800bd74:	f7ff fdb7 	bl	800b8e6 <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 800bd78:	2100      	movs	r1, #0
 800bd7a:	4805      	ldr	r0, [pc, #20]	; (800bd90 <MX_TIM7_Init+0x70>)
 800bd7c:	f7ff fe5d 	bl	800ba3a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 800bd80:	4803      	ldr	r0, [pc, #12]	; (800bd90 <MX_TIM7_Init+0x70>)
 800bd82:	f7ff fe6d 	bl	800ba60 <LL_TIM_DisableMasterSlaveMode>

}
 800bd86:	bf00      	nop
 800bd88:	3718      	adds	r7, #24
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	40001400 	.word	0x40001400

0800bd94 <__NVIC_GetPriorityGrouping>:
{
 800bd94:	b480      	push	{r7}
 800bd96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bd98:	4b04      	ldr	r3, [pc, #16]	; (800bdac <__NVIC_GetPriorityGrouping+0x18>)
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	0a1b      	lsrs	r3, r3, #8
 800bd9e:	f003 0307 	and.w	r3, r3, #7
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr
 800bdac:	e000ed00 	.word	0xe000ed00

0800bdb0 <__NVIC_EnableIRQ>:
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bdba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	db0b      	blt.n	800bdda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bdc2:	79fb      	ldrb	r3, [r7, #7]
 800bdc4:	f003 021f 	and.w	r2, r3, #31
 800bdc8:	4907      	ldr	r1, [pc, #28]	; (800bde8 <__NVIC_EnableIRQ+0x38>)
 800bdca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdce:	095b      	lsrs	r3, r3, #5
 800bdd0:	2001      	movs	r0, #1
 800bdd2:	fa00 f202 	lsl.w	r2, r0, r2
 800bdd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bdda:	bf00      	nop
 800bddc:	370c      	adds	r7, #12
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop
 800bde8:	e000e100 	.word	0xe000e100

0800bdec <__NVIC_SetPriority>:
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	6039      	str	r1, [r7, #0]
 800bdf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bdf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	db0a      	blt.n	800be16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	b2da      	uxtb	r2, r3
 800be04:	490c      	ldr	r1, [pc, #48]	; (800be38 <__NVIC_SetPriority+0x4c>)
 800be06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be0a:	0112      	lsls	r2, r2, #4
 800be0c:	b2d2      	uxtb	r2, r2
 800be0e:	440b      	add	r3, r1
 800be10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800be14:	e00a      	b.n	800be2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	b2da      	uxtb	r2, r3
 800be1a:	4908      	ldr	r1, [pc, #32]	; (800be3c <__NVIC_SetPriority+0x50>)
 800be1c:	79fb      	ldrb	r3, [r7, #7]
 800be1e:	f003 030f 	and.w	r3, r3, #15
 800be22:	3b04      	subs	r3, #4
 800be24:	0112      	lsls	r2, r2, #4
 800be26:	b2d2      	uxtb	r2, r2
 800be28:	440b      	add	r3, r1
 800be2a:	761a      	strb	r2, [r3, #24]
}
 800be2c:	bf00      	nop
 800be2e:	370c      	adds	r7, #12
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr
 800be38:	e000e100 	.word	0xe000e100
 800be3c:	e000ed00 	.word	0xe000ed00

0800be40 <NVIC_EncodePriority>:
{
 800be40:	b480      	push	{r7}
 800be42:	b089      	sub	sp, #36	; 0x24
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f003 0307 	and.w	r3, r3, #7
 800be52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	f1c3 0307 	rsb	r3, r3, #7
 800be5a:	2b04      	cmp	r3, #4
 800be5c:	bf28      	it	cs
 800be5e:	2304      	movcs	r3, #4
 800be60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800be62:	69fb      	ldr	r3, [r7, #28]
 800be64:	3304      	adds	r3, #4
 800be66:	2b06      	cmp	r3, #6
 800be68:	d902      	bls.n	800be70 <NVIC_EncodePriority+0x30>
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	3b03      	subs	r3, #3
 800be6e:	e000      	b.n	800be72 <NVIC_EncodePriority+0x32>
 800be70:	2300      	movs	r3, #0
 800be72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be74:	f04f 32ff 	mov.w	r2, #4294967295
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	fa02 f303 	lsl.w	r3, r2, r3
 800be7e:	43da      	mvns	r2, r3
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	401a      	ands	r2, r3
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800be88:	f04f 31ff 	mov.w	r1, #4294967295
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	fa01 f303 	lsl.w	r3, r1, r3
 800be92:	43d9      	mvns	r1, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be98:	4313      	orrs	r3, r2
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3724      	adds	r7, #36	; 0x24
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <LL_USART_Enable>:
{
 800bea6:	b480      	push	{r7}
 800bea8:	b083      	sub	sp, #12
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	60da      	str	r2, [r3, #12]
}
 800beba:	bf00      	nop
 800bebc:	370c      	adds	r7, #12
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr

0800bec6 <LL_USART_ConfigAsyncMode>:
{
 800bec6:	b480      	push	{r7}
 800bec8:	b083      	sub	sp, #12
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	695b      	ldr	r3, [r3, #20]
 800bede:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	615a      	str	r2, [r3, #20]
}
 800bee6:	bf00      	nop
 800bee8:	370c      	adds	r7, #12
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr
	...

0800bef4 <LL_AHB1_GRP1_EnableClock>:
{
 800bef4:	b480      	push	{r7}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800befc:	4b08      	ldr	r3, [pc, #32]	; (800bf20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800befe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf00:	4907      	ldr	r1, [pc, #28]	; (800bf20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4313      	orrs	r3, r2
 800bf06:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800bf08:	4b05      	ldr	r3, [pc, #20]	; (800bf20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800bf0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4013      	ands	r3, r2
 800bf10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bf12:	68fb      	ldr	r3, [r7, #12]
}
 800bf14:	bf00      	nop
 800bf16:	3714      	adds	r7, #20
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr
 800bf20:	40023800 	.word	0x40023800

0800bf24 <LL_APB1_GRP1_EnableClock>:
{
 800bf24:	b480      	push	{r7}
 800bf26:	b085      	sub	sp, #20
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800bf2c:	4b08      	ldr	r3, [pc, #32]	; (800bf50 <LL_APB1_GRP1_EnableClock+0x2c>)
 800bf2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf30:	4907      	ldr	r1, [pc, #28]	; (800bf50 <LL_APB1_GRP1_EnableClock+0x2c>)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	4313      	orrs	r3, r2
 800bf36:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800bf38:	4b05      	ldr	r3, [pc, #20]	; (800bf50 <LL_APB1_GRP1_EnableClock+0x2c>)
 800bf3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	4013      	ands	r3, r2
 800bf40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bf42:	68fb      	ldr	r3, [r7, #12]
}
 800bf44:	bf00      	nop
 800bf46:	3714      	adds	r7, #20
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr
 800bf50:	40023800 	.word	0x40023800

0800bf54 <LL_APB2_GRP1_EnableClock>:
{
 800bf54:	b480      	push	{r7}
 800bf56:	b085      	sub	sp, #20
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800bf5c:	4b08      	ldr	r3, [pc, #32]	; (800bf80 <LL_APB2_GRP1_EnableClock+0x2c>)
 800bf5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf60:	4907      	ldr	r1, [pc, #28]	; (800bf80 <LL_APB2_GRP1_EnableClock+0x2c>)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	4313      	orrs	r3, r2
 800bf66:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800bf68:	4b05      	ldr	r3, [pc, #20]	; (800bf80 <LL_APB2_GRP1_EnableClock+0x2c>)
 800bf6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4013      	ands	r3, r2
 800bf70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bf72:	68fb      	ldr	r3, [r7, #12]
}
 800bf74:	bf00      	nop
 800bf76:	3714      	adds	r7, #20
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr
 800bf80:	40023800 	.word	0x40023800

0800bf84 <MX_UART4_Init>:

UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b08e      	sub	sp, #56	; 0x38
 800bf88:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800bf8a:	f107 031c 	add.w	r3, r7, #28
 800bf8e:	2200      	movs	r2, #0
 800bf90:	601a      	str	r2, [r3, #0]
 800bf92:	605a      	str	r2, [r3, #4]
 800bf94:	609a      	str	r2, [r3, #8]
 800bf96:	60da      	str	r2, [r3, #12]
 800bf98:	611a      	str	r2, [r3, #16]
 800bf9a:	615a      	str	r2, [r3, #20]
 800bf9c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf9e:	1d3b      	adds	r3, r7, #4
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	601a      	str	r2, [r3, #0]
 800bfa4:	605a      	str	r2, [r3, #4]
 800bfa6:	609a      	str	r2, [r3, #8]
 800bfa8:	60da      	str	r2, [r3, #12]
 800bfaa:	611a      	str	r2, [r3, #16]
 800bfac:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800bfae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bfb2:	f7ff ffb7 	bl	800bf24 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800bfb6:	2004      	movs	r0, #4
 800bfb8:	f7ff ff9c 	bl	800bef4 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration  
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX 
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 800bfbc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800bfc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800bfc2:	2302      	movs	r3, #2
 800bfc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800bfc6:	2303      	movs	r3, #3
 800bfc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800bfd2:	2308      	movs	r3, #8
 800bfd4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bfd6:	1d3b      	adds	r3, r7, #4
 800bfd8:	4619      	mov	r1, r3
 800bfda:	4819      	ldr	r0, [pc, #100]	; (800c040 <MX_UART4_Init+0xbc>)
 800bfdc:	f7f8 ff20 	bl	8004e20 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800bfe0:	f7ff fed8 	bl	800bd94 <__NVIC_GetPriorityGrouping>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	2100      	movs	r1, #0
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7ff ff28 	bl	800be40 <NVIC_EncodePriority>
 800bff0:	4603      	mov	r3, r0
 800bff2:	4619      	mov	r1, r3
 800bff4:	2034      	movs	r0, #52	; 0x34
 800bff6:	f7ff fef9 	bl	800bdec <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 800bffa:	2034      	movs	r0, #52	; 0x34
 800bffc:	f7ff fed8 	bl	800bdb0 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 9600;
 800c000:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800c004:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800c006:	2300      	movs	r3, #0
 800c008:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800c00a:	2300      	movs	r3, #0
 800c00c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800c00e:	2300      	movs	r3, #0
 800c010:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800c012:	230c      	movs	r3, #12
 800c014:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800c016:	2300      	movs	r3, #0
 800c018:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800c01a:	2300      	movs	r3, #0
 800c01c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800c01e:	f107 031c 	add.w	r3, r7, #28
 800c022:	4619      	mov	r1, r3
 800c024:	4807      	ldr	r0, [pc, #28]	; (800c044 <MX_UART4_Init+0xc0>)
 800c026:	f7f9 fde7 	bl	8005bf8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 800c02a:	4806      	ldr	r0, [pc, #24]	; (800c044 <MX_UART4_Init+0xc0>)
 800c02c:	f7ff ff4b 	bl	800bec6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 800c030:	4804      	ldr	r0, [pc, #16]	; (800c044 <MX_UART4_Init+0xc0>)
 800c032:	f7ff ff38 	bl	800bea6 <LL_USART_Enable>

}
 800c036:	bf00      	nop
 800c038:	3738      	adds	r7, #56	; 0x38
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	40020800 	.word	0x40020800
 800c044:	40004c00 	.word	0x40004c00

0800c048 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b08e      	sub	sp, #56	; 0x38
 800c04c:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800c04e:	f107 031c 	add.w	r3, r7, #28
 800c052:	2200      	movs	r2, #0
 800c054:	601a      	str	r2, [r3, #0]
 800c056:	605a      	str	r2, [r3, #4]
 800c058:	609a      	str	r2, [r3, #8]
 800c05a:	60da      	str	r2, [r3, #12]
 800c05c:	611a      	str	r2, [r3, #16]
 800c05e:	615a      	str	r2, [r3, #20]
 800c060:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c062:	1d3b      	adds	r3, r7, #4
 800c064:	2200      	movs	r2, #0
 800c066:	601a      	str	r2, [r3, #0]
 800c068:	605a      	str	r2, [r3, #4]
 800c06a:	609a      	str	r2, [r3, #8]
 800c06c:	60da      	str	r2, [r3, #12]
 800c06e:	611a      	str	r2, [r3, #16]
 800c070:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800c072:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c076:	f7ff ff55 	bl	800bf24 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800c07a:	2004      	movs	r0, #4
 800c07c:	f7ff ff3a 	bl	800bef4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800c080:	2008      	movs	r0, #8
 800c082:	f7ff ff37 	bl	800bef4 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration  
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 800c086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c08a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800c08c:	2302      	movs	r3, #2
 800c08e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800c090:	2303      	movs	r3, #3
 800c092:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800c094:	2300      	movs	r3, #0
 800c096:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800c098:	2301      	movs	r3, #1
 800c09a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800c09c:	2308      	movs	r3, #8
 800c09e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c0a0:	1d3b      	adds	r3, r7, #4
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	4821      	ldr	r0, [pc, #132]	; (800c12c <MX_UART5_Init+0xe4>)
 800c0a6:	f7f8 febb 	bl	8004e20 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800c0aa:	2304      	movs	r3, #4
 800c0ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800c0ae:	2302      	movs	r3, #2
 800c0b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800c0b2:	2303      	movs	r3, #3
 800c0b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800c0be:	2308      	movs	r3, #8
 800c0c0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c0c2:	1d3b      	adds	r3, r7, #4
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	481a      	ldr	r0, [pc, #104]	; (800c130 <MX_UART5_Init+0xe8>)
 800c0c8:	f7f8 feaa 	bl	8004e20 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800c0cc:	f7ff fe62 	bl	800bd94 <__NVIC_GetPriorityGrouping>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7ff feb2 	bl	800be40 <NVIC_EncodePriority>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	4619      	mov	r1, r3
 800c0e0:	2035      	movs	r0, #53	; 0x35
 800c0e2:	f7ff fe83 	bl	800bdec <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 800c0e6:	2035      	movs	r0, #53	; 0x35
 800c0e8:	f7ff fe62 	bl	800bdb0 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 800c0ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800c0f0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 800c0fe:	2304      	movs	r3, #4
 800c100:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800c102:	2300      	movs	r3, #0
 800c104:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800c106:	2300      	movs	r3, #0
 800c108:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800c10a:	f107 031c 	add.w	r3, r7, #28
 800c10e:	4619      	mov	r1, r3
 800c110:	4808      	ldr	r0, [pc, #32]	; (800c134 <MX_UART5_Init+0xec>)
 800c112:	f7f9 fd71 	bl	8005bf8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 800c116:	4807      	ldr	r0, [pc, #28]	; (800c134 <MX_UART5_Init+0xec>)
 800c118:	f7ff fed5 	bl	800bec6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800c11c:	4805      	ldr	r0, [pc, #20]	; (800c134 <MX_UART5_Init+0xec>)
 800c11e:	f7ff fec2 	bl	800bea6 <LL_USART_Enable>

}
 800c122:	bf00      	nop
 800c124:	3738      	adds	r7, #56	; 0x38
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	40020800 	.word	0x40020800
 800c130:	40020c00 	.word	0x40020c00
 800c134:	40005000 	.word	0x40005000

0800c138 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800c13c:	4b11      	ldr	r3, [pc, #68]	; (800c184 <MX_USART1_UART_Init+0x4c>)
 800c13e:	4a12      	ldr	r2, [pc, #72]	; (800c188 <MX_USART1_UART_Init+0x50>)
 800c140:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c142:	4b10      	ldr	r3, [pc, #64]	; (800c184 <MX_USART1_UART_Init+0x4c>)
 800c144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800c148:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c14a:	4b0e      	ldr	r3, [pc, #56]	; (800c184 <MX_USART1_UART_Init+0x4c>)
 800c14c:	2200      	movs	r2, #0
 800c14e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c150:	4b0c      	ldr	r3, [pc, #48]	; (800c184 <MX_USART1_UART_Init+0x4c>)
 800c152:	2200      	movs	r2, #0
 800c154:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c156:	4b0b      	ldr	r3, [pc, #44]	; (800c184 <MX_USART1_UART_Init+0x4c>)
 800c158:	2200      	movs	r2, #0
 800c15a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c15c:	4b09      	ldr	r3, [pc, #36]	; (800c184 <MX_USART1_UART_Init+0x4c>)
 800c15e:	220c      	movs	r2, #12
 800c160:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c162:	4b08      	ldr	r3, [pc, #32]	; (800c184 <MX_USART1_UART_Init+0x4c>)
 800c164:	2200      	movs	r2, #0
 800c166:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c168:	4b06      	ldr	r3, [pc, #24]	; (800c184 <MX_USART1_UART_Init+0x4c>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c16e:	4805      	ldr	r0, [pc, #20]	; (800c184 <MX_USART1_UART_Init+0x4c>)
 800c170:	f7f7 fdc0 	bl	8003cf4 <HAL_UART_Init>
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d001      	beq.n	800c17e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800c17a:	f7fe ff01 	bl	800af80 <Error_Handler>
  }

}
 800c17e:	bf00      	nop
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	20000690 	.word	0x20000690
 800c188:	40011000 	.word	0x40011000

0800c18c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b08e      	sub	sp, #56	; 0x38
 800c190:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800c192:	f107 031c 	add.w	r3, r7, #28
 800c196:	2200      	movs	r2, #0
 800c198:	601a      	str	r2, [r3, #0]
 800c19a:	605a      	str	r2, [r3, #4]
 800c19c:	609a      	str	r2, [r3, #8]
 800c19e:	60da      	str	r2, [r3, #12]
 800c1a0:	611a      	str	r2, [r3, #16]
 800c1a2:	615a      	str	r2, [r3, #20]
 800c1a4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c1a6:	1d3b      	adds	r3, r7, #4
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	605a      	str	r2, [r3, #4]
 800c1ae:	609a      	str	r2, [r3, #8]
 800c1b0:	60da      	str	r2, [r3, #12]
 800c1b2:	611a      	str	r2, [r3, #16]
 800c1b4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800c1b6:	2020      	movs	r0, #32
 800c1b8:	f7ff fecc 	bl	800bf54 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800c1bc:	2004      	movs	r0, #4
 800c1be:	f7ff fe99 	bl	800bef4 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration  
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800c1c2:	23c0      	movs	r3, #192	; 0xc0
 800c1c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800c1c6:	2302      	movs	r3, #2
 800c1c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800c1ca:	2303      	movs	r3, #3
 800c1cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800c1d6:	2308      	movs	r3, #8
 800c1d8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c1da:	1d3b      	adds	r3, r7, #4
 800c1dc:	4619      	mov	r1, r3
 800c1de:	4819      	ldr	r0, [pc, #100]	; (800c244 <MX_USART6_UART_Init+0xb8>)
 800c1e0:	f7f8 fe1e 	bl	8004e20 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800c1e4:	f7ff fdd6 	bl	800bd94 <__NVIC_GetPriorityGrouping>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7ff fe26 	bl	800be40 <NVIC_EncodePriority>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	2047      	movs	r0, #71	; 0x47
 800c1fa:	f7ff fdf7 	bl	800bdec <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800c1fe:	2047      	movs	r0, #71	; 0x47
 800c200:	f7ff fdd6 	bl	800bdb0 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 800c204:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800c208:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800c20a:	2300      	movs	r3, #0
 800c20c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800c20e:	2300      	movs	r3, #0
 800c210:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800c212:	2300      	movs	r3, #0
 800c214:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800c216:	230c      	movs	r3, #12
 800c218:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800c21a:	2300      	movs	r3, #0
 800c21c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800c21e:	2300      	movs	r3, #0
 800c220:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800c222:	f107 031c 	add.w	r3, r7, #28
 800c226:	4619      	mov	r1, r3
 800c228:	4807      	ldr	r0, [pc, #28]	; (800c248 <MX_USART6_UART_Init+0xbc>)
 800c22a:	f7f9 fce5 	bl	8005bf8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800c22e:	4806      	ldr	r0, [pc, #24]	; (800c248 <MX_USART6_UART_Init+0xbc>)
 800c230:	f7ff fe49 	bl	800bec6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800c234:	4804      	ldr	r0, [pc, #16]	; (800c248 <MX_USART6_UART_Init+0xbc>)
 800c236:	f7ff fe36 	bl	800bea6 <LL_USART_Enable>

}
 800c23a:	bf00      	nop
 800c23c:	3738      	adds	r7, #56	; 0x38
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	40020800 	.word	0x40020800
 800c248:	40011400 	.word	0x40011400

0800c24c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b08a      	sub	sp, #40	; 0x28
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c254:	f107 0314 	add.w	r3, r7, #20
 800c258:	2200      	movs	r2, #0
 800c25a:	601a      	str	r2, [r3, #0]
 800c25c:	605a      	str	r2, [r3, #4]
 800c25e:	609a      	str	r2, [r3, #8]
 800c260:	60da      	str	r2, [r3, #12]
 800c262:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a1d      	ldr	r2, [pc, #116]	; (800c2e0 <HAL_UART_MspInit+0x94>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d134      	bne.n	800c2d8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c26e:	2300      	movs	r3, #0
 800c270:	613b      	str	r3, [r7, #16]
 800c272:	4b1c      	ldr	r3, [pc, #112]	; (800c2e4 <HAL_UART_MspInit+0x98>)
 800c274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c276:	4a1b      	ldr	r2, [pc, #108]	; (800c2e4 <HAL_UART_MspInit+0x98>)
 800c278:	f043 0310 	orr.w	r3, r3, #16
 800c27c:	6453      	str	r3, [r2, #68]	; 0x44
 800c27e:	4b19      	ldr	r3, [pc, #100]	; (800c2e4 <HAL_UART_MspInit+0x98>)
 800c280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c282:	f003 0310 	and.w	r3, r3, #16
 800c286:	613b      	str	r3, [r7, #16]
 800c288:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c28a:	2300      	movs	r3, #0
 800c28c:	60fb      	str	r3, [r7, #12]
 800c28e:	4b15      	ldr	r3, [pc, #84]	; (800c2e4 <HAL_UART_MspInit+0x98>)
 800c290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c292:	4a14      	ldr	r2, [pc, #80]	; (800c2e4 <HAL_UART_MspInit+0x98>)
 800c294:	f043 0301 	orr.w	r3, r3, #1
 800c298:	6313      	str	r3, [r2, #48]	; 0x30
 800c29a:	4b12      	ldr	r3, [pc, #72]	; (800c2e4 <HAL_UART_MspInit+0x98>)
 800c29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c29e:	f003 0301 	and.w	r3, r3, #1
 800c2a2:	60fb      	str	r3, [r7, #12]
 800c2a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800c2a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800c2aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2ac:	2302      	movs	r3, #2
 800c2ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2b4:	2303      	movs	r3, #3
 800c2b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c2b8:	2307      	movs	r3, #7
 800c2ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2bc:	f107 0314 	add.w	r3, r7, #20
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	4809      	ldr	r0, [pc, #36]	; (800c2e8 <HAL_UART_MspInit+0x9c>)
 800c2c4:	f7f5 ff6a 	bl	800219c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	2100      	movs	r1, #0
 800c2cc:	2025      	movs	r0, #37	; 0x25
 800c2ce:	f7f5 fb9e 	bl	8001a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c2d2:	2025      	movs	r0, #37	; 0x25
 800c2d4:	f7f5 fbb7 	bl	8001a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800c2d8:	bf00      	nop
 800c2da:	3728      	adds	r7, #40	; 0x28
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	40011000 	.word	0x40011000
 800c2e4:	40023800 	.word	0x40023800
 800c2e8:	40020000 	.word	0x40020000

0800c2ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800c2ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c324 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c2f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c2f2:	e003      	b.n	800c2fc <LoopCopyDataInit>

0800c2f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c2f4:	4b0c      	ldr	r3, [pc, #48]	; (800c328 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c2f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c2f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c2fa:	3104      	adds	r1, #4

0800c2fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c2fc:	480b      	ldr	r0, [pc, #44]	; (800c32c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c2fe:	4b0c      	ldr	r3, [pc, #48]	; (800c330 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c300:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c302:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c304:	d3f6      	bcc.n	800c2f4 <CopyDataInit>
  ldr  r2, =_sbss
 800c306:	4a0b      	ldr	r2, [pc, #44]	; (800c334 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c308:	e002      	b.n	800c310 <LoopFillZerobss>

0800c30a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c30a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c30c:	f842 3b04 	str.w	r3, [r2], #4

0800c310 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c310:	4b09      	ldr	r3, [pc, #36]	; (800c338 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c312:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c314:	d3f9      	bcc.n	800c30a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c316:	f7ff fa27 	bl	800b768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c31a:	f000 f817 	bl	800c34c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c31e:	f7fc fccf 	bl	8008cc0 <main>
  bx  lr    
 800c322:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800c324:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800c328:	080101c4 	.word	0x080101c4
  ldr  r0, =_sdata
 800c32c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c330:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 800c334:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 800c338:	200006d4 	.word	0x200006d4

0800c33c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c33c:	e7fe      	b.n	800c33c <ADC_IRQHandler>
	...

0800c340 <__errno>:
 800c340:	4b01      	ldr	r3, [pc, #4]	; (800c348 <__errno+0x8>)
 800c342:	6818      	ldr	r0, [r3, #0]
 800c344:	4770      	bx	lr
 800c346:	bf00      	nop
 800c348:	20000010 	.word	0x20000010

0800c34c <__libc_init_array>:
 800c34c:	b570      	push	{r4, r5, r6, lr}
 800c34e:	4e0d      	ldr	r6, [pc, #52]	; (800c384 <__libc_init_array+0x38>)
 800c350:	4c0d      	ldr	r4, [pc, #52]	; (800c388 <__libc_init_array+0x3c>)
 800c352:	1ba4      	subs	r4, r4, r6
 800c354:	10a4      	asrs	r4, r4, #2
 800c356:	2500      	movs	r5, #0
 800c358:	42a5      	cmp	r5, r4
 800c35a:	d109      	bne.n	800c370 <__libc_init_array+0x24>
 800c35c:	4e0b      	ldr	r6, [pc, #44]	; (800c38c <__libc_init_array+0x40>)
 800c35e:	4c0c      	ldr	r4, [pc, #48]	; (800c390 <__libc_init_array+0x44>)
 800c360:	f003 fb80 	bl	800fa64 <_init>
 800c364:	1ba4      	subs	r4, r4, r6
 800c366:	10a4      	asrs	r4, r4, #2
 800c368:	2500      	movs	r5, #0
 800c36a:	42a5      	cmp	r5, r4
 800c36c:	d105      	bne.n	800c37a <__libc_init_array+0x2e>
 800c36e:	bd70      	pop	{r4, r5, r6, pc}
 800c370:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c374:	4798      	blx	r3
 800c376:	3501      	adds	r5, #1
 800c378:	e7ee      	b.n	800c358 <__libc_init_array+0xc>
 800c37a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c37e:	4798      	blx	r3
 800c380:	3501      	adds	r5, #1
 800c382:	e7f2      	b.n	800c36a <__libc_init_array+0x1e>
 800c384:	080101bc 	.word	0x080101bc
 800c388:	080101bc 	.word	0x080101bc
 800c38c:	080101bc 	.word	0x080101bc
 800c390:	080101c0 	.word	0x080101c0

0800c394 <memset>:
 800c394:	4402      	add	r2, r0
 800c396:	4603      	mov	r3, r0
 800c398:	4293      	cmp	r3, r2
 800c39a:	d100      	bne.n	800c39e <memset+0xa>
 800c39c:	4770      	bx	lr
 800c39e:	f803 1b01 	strb.w	r1, [r3], #1
 800c3a2:	e7f9      	b.n	800c398 <memset+0x4>

0800c3a4 <__cvt>:
 800c3a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a8:	ec55 4b10 	vmov	r4, r5, d0
 800c3ac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c3ae:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c3b2:	2d00      	cmp	r5, #0
 800c3b4:	460e      	mov	r6, r1
 800c3b6:	4691      	mov	r9, r2
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	bfb8      	it	lt
 800c3bc:	4622      	movlt	r2, r4
 800c3be:	462b      	mov	r3, r5
 800c3c0:	f027 0720 	bic.w	r7, r7, #32
 800c3c4:	bfbb      	ittet	lt
 800c3c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c3ca:	461d      	movlt	r5, r3
 800c3cc:	2300      	movge	r3, #0
 800c3ce:	232d      	movlt	r3, #45	; 0x2d
 800c3d0:	bfb8      	it	lt
 800c3d2:	4614      	movlt	r4, r2
 800c3d4:	2f46      	cmp	r7, #70	; 0x46
 800c3d6:	700b      	strb	r3, [r1, #0]
 800c3d8:	d004      	beq.n	800c3e4 <__cvt+0x40>
 800c3da:	2f45      	cmp	r7, #69	; 0x45
 800c3dc:	d100      	bne.n	800c3e0 <__cvt+0x3c>
 800c3de:	3601      	adds	r6, #1
 800c3e0:	2102      	movs	r1, #2
 800c3e2:	e000      	b.n	800c3e6 <__cvt+0x42>
 800c3e4:	2103      	movs	r1, #3
 800c3e6:	ab03      	add	r3, sp, #12
 800c3e8:	9301      	str	r3, [sp, #4]
 800c3ea:	ab02      	add	r3, sp, #8
 800c3ec:	9300      	str	r3, [sp, #0]
 800c3ee:	4632      	mov	r2, r6
 800c3f0:	4653      	mov	r3, sl
 800c3f2:	ec45 4b10 	vmov	d0, r4, r5
 800c3f6:	f000 fdfb 	bl	800cff0 <_dtoa_r>
 800c3fa:	2f47      	cmp	r7, #71	; 0x47
 800c3fc:	4680      	mov	r8, r0
 800c3fe:	d102      	bne.n	800c406 <__cvt+0x62>
 800c400:	f019 0f01 	tst.w	r9, #1
 800c404:	d026      	beq.n	800c454 <__cvt+0xb0>
 800c406:	2f46      	cmp	r7, #70	; 0x46
 800c408:	eb08 0906 	add.w	r9, r8, r6
 800c40c:	d111      	bne.n	800c432 <__cvt+0x8e>
 800c40e:	f898 3000 	ldrb.w	r3, [r8]
 800c412:	2b30      	cmp	r3, #48	; 0x30
 800c414:	d10a      	bne.n	800c42c <__cvt+0x88>
 800c416:	2200      	movs	r2, #0
 800c418:	2300      	movs	r3, #0
 800c41a:	4620      	mov	r0, r4
 800c41c:	4629      	mov	r1, r5
 800c41e:	f7f4 fb53 	bl	8000ac8 <__aeabi_dcmpeq>
 800c422:	b918      	cbnz	r0, 800c42c <__cvt+0x88>
 800c424:	f1c6 0601 	rsb	r6, r6, #1
 800c428:	f8ca 6000 	str.w	r6, [sl]
 800c42c:	f8da 3000 	ldr.w	r3, [sl]
 800c430:	4499      	add	r9, r3
 800c432:	2200      	movs	r2, #0
 800c434:	2300      	movs	r3, #0
 800c436:	4620      	mov	r0, r4
 800c438:	4629      	mov	r1, r5
 800c43a:	f7f4 fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800c43e:	b938      	cbnz	r0, 800c450 <__cvt+0xac>
 800c440:	2230      	movs	r2, #48	; 0x30
 800c442:	9b03      	ldr	r3, [sp, #12]
 800c444:	454b      	cmp	r3, r9
 800c446:	d205      	bcs.n	800c454 <__cvt+0xb0>
 800c448:	1c59      	adds	r1, r3, #1
 800c44a:	9103      	str	r1, [sp, #12]
 800c44c:	701a      	strb	r2, [r3, #0]
 800c44e:	e7f8      	b.n	800c442 <__cvt+0x9e>
 800c450:	f8cd 900c 	str.w	r9, [sp, #12]
 800c454:	9b03      	ldr	r3, [sp, #12]
 800c456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c458:	eba3 0308 	sub.w	r3, r3, r8
 800c45c:	4640      	mov	r0, r8
 800c45e:	6013      	str	r3, [r2, #0]
 800c460:	b004      	add	sp, #16
 800c462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c466 <__exponent>:
 800c466:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c468:	2900      	cmp	r1, #0
 800c46a:	4604      	mov	r4, r0
 800c46c:	bfba      	itte	lt
 800c46e:	4249      	neglt	r1, r1
 800c470:	232d      	movlt	r3, #45	; 0x2d
 800c472:	232b      	movge	r3, #43	; 0x2b
 800c474:	2909      	cmp	r1, #9
 800c476:	f804 2b02 	strb.w	r2, [r4], #2
 800c47a:	7043      	strb	r3, [r0, #1]
 800c47c:	dd20      	ble.n	800c4c0 <__exponent+0x5a>
 800c47e:	f10d 0307 	add.w	r3, sp, #7
 800c482:	461f      	mov	r7, r3
 800c484:	260a      	movs	r6, #10
 800c486:	fb91 f5f6 	sdiv	r5, r1, r6
 800c48a:	fb06 1115 	mls	r1, r6, r5, r1
 800c48e:	3130      	adds	r1, #48	; 0x30
 800c490:	2d09      	cmp	r5, #9
 800c492:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c496:	f103 32ff 	add.w	r2, r3, #4294967295
 800c49a:	4629      	mov	r1, r5
 800c49c:	dc09      	bgt.n	800c4b2 <__exponent+0x4c>
 800c49e:	3130      	adds	r1, #48	; 0x30
 800c4a0:	3b02      	subs	r3, #2
 800c4a2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c4a6:	42bb      	cmp	r3, r7
 800c4a8:	4622      	mov	r2, r4
 800c4aa:	d304      	bcc.n	800c4b6 <__exponent+0x50>
 800c4ac:	1a10      	subs	r0, r2, r0
 800c4ae:	b003      	add	sp, #12
 800c4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4b2:	4613      	mov	r3, r2
 800c4b4:	e7e7      	b.n	800c486 <__exponent+0x20>
 800c4b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4ba:	f804 2b01 	strb.w	r2, [r4], #1
 800c4be:	e7f2      	b.n	800c4a6 <__exponent+0x40>
 800c4c0:	2330      	movs	r3, #48	; 0x30
 800c4c2:	4419      	add	r1, r3
 800c4c4:	7083      	strb	r3, [r0, #2]
 800c4c6:	1d02      	adds	r2, r0, #4
 800c4c8:	70c1      	strb	r1, [r0, #3]
 800c4ca:	e7ef      	b.n	800c4ac <__exponent+0x46>

0800c4cc <_printf_float>:
 800c4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d0:	b08d      	sub	sp, #52	; 0x34
 800c4d2:	460c      	mov	r4, r1
 800c4d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c4d8:	4616      	mov	r6, r2
 800c4da:	461f      	mov	r7, r3
 800c4dc:	4605      	mov	r5, r0
 800c4de:	f001 fcb9 	bl	800de54 <_localeconv_r>
 800c4e2:	6803      	ldr	r3, [r0, #0]
 800c4e4:	9304      	str	r3, [sp, #16]
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7f3 fe72 	bl	80001d0 <strlen>
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c4f0:	f8d8 3000 	ldr.w	r3, [r8]
 800c4f4:	9005      	str	r0, [sp, #20]
 800c4f6:	3307      	adds	r3, #7
 800c4f8:	f023 0307 	bic.w	r3, r3, #7
 800c4fc:	f103 0208 	add.w	r2, r3, #8
 800c500:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c504:	f8d4 b000 	ldr.w	fp, [r4]
 800c508:	f8c8 2000 	str.w	r2, [r8]
 800c50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c510:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c514:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c518:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c51c:	9307      	str	r3, [sp, #28]
 800c51e:	f8cd 8018 	str.w	r8, [sp, #24]
 800c522:	f04f 32ff 	mov.w	r2, #4294967295
 800c526:	4ba7      	ldr	r3, [pc, #668]	; (800c7c4 <_printf_float+0x2f8>)
 800c528:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c52c:	f7f4 fafe 	bl	8000b2c <__aeabi_dcmpun>
 800c530:	bb70      	cbnz	r0, 800c590 <_printf_float+0xc4>
 800c532:	f04f 32ff 	mov.w	r2, #4294967295
 800c536:	4ba3      	ldr	r3, [pc, #652]	; (800c7c4 <_printf_float+0x2f8>)
 800c538:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c53c:	f7f4 fad8 	bl	8000af0 <__aeabi_dcmple>
 800c540:	bb30      	cbnz	r0, 800c590 <_printf_float+0xc4>
 800c542:	2200      	movs	r2, #0
 800c544:	2300      	movs	r3, #0
 800c546:	4640      	mov	r0, r8
 800c548:	4649      	mov	r1, r9
 800c54a:	f7f4 fac7 	bl	8000adc <__aeabi_dcmplt>
 800c54e:	b110      	cbz	r0, 800c556 <_printf_float+0x8a>
 800c550:	232d      	movs	r3, #45	; 0x2d
 800c552:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c556:	4a9c      	ldr	r2, [pc, #624]	; (800c7c8 <_printf_float+0x2fc>)
 800c558:	4b9c      	ldr	r3, [pc, #624]	; (800c7cc <_printf_float+0x300>)
 800c55a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c55e:	bf8c      	ite	hi
 800c560:	4690      	movhi	r8, r2
 800c562:	4698      	movls	r8, r3
 800c564:	2303      	movs	r3, #3
 800c566:	f02b 0204 	bic.w	r2, fp, #4
 800c56a:	6123      	str	r3, [r4, #16]
 800c56c:	6022      	str	r2, [r4, #0]
 800c56e:	f04f 0900 	mov.w	r9, #0
 800c572:	9700      	str	r7, [sp, #0]
 800c574:	4633      	mov	r3, r6
 800c576:	aa0b      	add	r2, sp, #44	; 0x2c
 800c578:	4621      	mov	r1, r4
 800c57a:	4628      	mov	r0, r5
 800c57c:	f000 f9e6 	bl	800c94c <_printf_common>
 800c580:	3001      	adds	r0, #1
 800c582:	f040 808d 	bne.w	800c6a0 <_printf_float+0x1d4>
 800c586:	f04f 30ff 	mov.w	r0, #4294967295
 800c58a:	b00d      	add	sp, #52	; 0x34
 800c58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c590:	4642      	mov	r2, r8
 800c592:	464b      	mov	r3, r9
 800c594:	4640      	mov	r0, r8
 800c596:	4649      	mov	r1, r9
 800c598:	f7f4 fac8 	bl	8000b2c <__aeabi_dcmpun>
 800c59c:	b110      	cbz	r0, 800c5a4 <_printf_float+0xd8>
 800c59e:	4a8c      	ldr	r2, [pc, #560]	; (800c7d0 <_printf_float+0x304>)
 800c5a0:	4b8c      	ldr	r3, [pc, #560]	; (800c7d4 <_printf_float+0x308>)
 800c5a2:	e7da      	b.n	800c55a <_printf_float+0x8e>
 800c5a4:	6861      	ldr	r1, [r4, #4]
 800c5a6:	1c4b      	adds	r3, r1, #1
 800c5a8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c5ac:	a80a      	add	r0, sp, #40	; 0x28
 800c5ae:	d13e      	bne.n	800c62e <_printf_float+0x162>
 800c5b0:	2306      	movs	r3, #6
 800c5b2:	6063      	str	r3, [r4, #4]
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c5ba:	ab09      	add	r3, sp, #36	; 0x24
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	ec49 8b10 	vmov	d0, r8, r9
 800c5c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c5c6:	6022      	str	r2, [r4, #0]
 800c5c8:	f8cd a004 	str.w	sl, [sp, #4]
 800c5cc:	6861      	ldr	r1, [r4, #4]
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	f7ff fee8 	bl	800c3a4 <__cvt>
 800c5d4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c5d8:	2b47      	cmp	r3, #71	; 0x47
 800c5da:	4680      	mov	r8, r0
 800c5dc:	d109      	bne.n	800c5f2 <_printf_float+0x126>
 800c5de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5e0:	1cd8      	adds	r0, r3, #3
 800c5e2:	db02      	blt.n	800c5ea <_printf_float+0x11e>
 800c5e4:	6862      	ldr	r2, [r4, #4]
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	dd47      	ble.n	800c67a <_printf_float+0x1ae>
 800c5ea:	f1aa 0a02 	sub.w	sl, sl, #2
 800c5ee:	fa5f fa8a 	uxtb.w	sl, sl
 800c5f2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c5f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5f8:	d824      	bhi.n	800c644 <_printf_float+0x178>
 800c5fa:	3901      	subs	r1, #1
 800c5fc:	4652      	mov	r2, sl
 800c5fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c602:	9109      	str	r1, [sp, #36]	; 0x24
 800c604:	f7ff ff2f 	bl	800c466 <__exponent>
 800c608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c60a:	1813      	adds	r3, r2, r0
 800c60c:	2a01      	cmp	r2, #1
 800c60e:	4681      	mov	r9, r0
 800c610:	6123      	str	r3, [r4, #16]
 800c612:	dc02      	bgt.n	800c61a <_printf_float+0x14e>
 800c614:	6822      	ldr	r2, [r4, #0]
 800c616:	07d1      	lsls	r1, r2, #31
 800c618:	d501      	bpl.n	800c61e <_printf_float+0x152>
 800c61a:	3301      	adds	r3, #1
 800c61c:	6123      	str	r3, [r4, #16]
 800c61e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c622:	2b00      	cmp	r3, #0
 800c624:	d0a5      	beq.n	800c572 <_printf_float+0xa6>
 800c626:	232d      	movs	r3, #45	; 0x2d
 800c628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c62c:	e7a1      	b.n	800c572 <_printf_float+0xa6>
 800c62e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c632:	f000 8177 	beq.w	800c924 <_printf_float+0x458>
 800c636:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c63a:	d1bb      	bne.n	800c5b4 <_printf_float+0xe8>
 800c63c:	2900      	cmp	r1, #0
 800c63e:	d1b9      	bne.n	800c5b4 <_printf_float+0xe8>
 800c640:	2301      	movs	r3, #1
 800c642:	e7b6      	b.n	800c5b2 <_printf_float+0xe6>
 800c644:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c648:	d119      	bne.n	800c67e <_printf_float+0x1b2>
 800c64a:	2900      	cmp	r1, #0
 800c64c:	6863      	ldr	r3, [r4, #4]
 800c64e:	dd0c      	ble.n	800c66a <_printf_float+0x19e>
 800c650:	6121      	str	r1, [r4, #16]
 800c652:	b913      	cbnz	r3, 800c65a <_printf_float+0x18e>
 800c654:	6822      	ldr	r2, [r4, #0]
 800c656:	07d2      	lsls	r2, r2, #31
 800c658:	d502      	bpl.n	800c660 <_printf_float+0x194>
 800c65a:	3301      	adds	r3, #1
 800c65c:	440b      	add	r3, r1
 800c65e:	6123      	str	r3, [r4, #16]
 800c660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c662:	65a3      	str	r3, [r4, #88]	; 0x58
 800c664:	f04f 0900 	mov.w	r9, #0
 800c668:	e7d9      	b.n	800c61e <_printf_float+0x152>
 800c66a:	b913      	cbnz	r3, 800c672 <_printf_float+0x1a6>
 800c66c:	6822      	ldr	r2, [r4, #0]
 800c66e:	07d0      	lsls	r0, r2, #31
 800c670:	d501      	bpl.n	800c676 <_printf_float+0x1aa>
 800c672:	3302      	adds	r3, #2
 800c674:	e7f3      	b.n	800c65e <_printf_float+0x192>
 800c676:	2301      	movs	r3, #1
 800c678:	e7f1      	b.n	800c65e <_printf_float+0x192>
 800c67a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c67e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c682:	4293      	cmp	r3, r2
 800c684:	db05      	blt.n	800c692 <_printf_float+0x1c6>
 800c686:	6822      	ldr	r2, [r4, #0]
 800c688:	6123      	str	r3, [r4, #16]
 800c68a:	07d1      	lsls	r1, r2, #31
 800c68c:	d5e8      	bpl.n	800c660 <_printf_float+0x194>
 800c68e:	3301      	adds	r3, #1
 800c690:	e7e5      	b.n	800c65e <_printf_float+0x192>
 800c692:	2b00      	cmp	r3, #0
 800c694:	bfd4      	ite	le
 800c696:	f1c3 0302 	rsble	r3, r3, #2
 800c69a:	2301      	movgt	r3, #1
 800c69c:	4413      	add	r3, r2
 800c69e:	e7de      	b.n	800c65e <_printf_float+0x192>
 800c6a0:	6823      	ldr	r3, [r4, #0]
 800c6a2:	055a      	lsls	r2, r3, #21
 800c6a4:	d407      	bmi.n	800c6b6 <_printf_float+0x1ea>
 800c6a6:	6923      	ldr	r3, [r4, #16]
 800c6a8:	4642      	mov	r2, r8
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	47b8      	blx	r7
 800c6b0:	3001      	adds	r0, #1
 800c6b2:	d12b      	bne.n	800c70c <_printf_float+0x240>
 800c6b4:	e767      	b.n	800c586 <_printf_float+0xba>
 800c6b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c6ba:	f240 80dc 	bls.w	800c876 <_printf_float+0x3aa>
 800c6be:	2200      	movs	r2, #0
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c6c6:	f7f4 f9ff 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	d033      	beq.n	800c736 <_printf_float+0x26a>
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	4a41      	ldr	r2, [pc, #260]	; (800c7d8 <_printf_float+0x30c>)
 800c6d2:	4631      	mov	r1, r6
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	47b8      	blx	r7
 800c6d8:	3001      	adds	r0, #1
 800c6da:	f43f af54 	beq.w	800c586 <_printf_float+0xba>
 800c6de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	db02      	blt.n	800c6ec <_printf_float+0x220>
 800c6e6:	6823      	ldr	r3, [r4, #0]
 800c6e8:	07d8      	lsls	r0, r3, #31
 800c6ea:	d50f      	bpl.n	800c70c <_printf_float+0x240>
 800c6ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6f0:	4631      	mov	r1, r6
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	47b8      	blx	r7
 800c6f6:	3001      	adds	r0, #1
 800c6f8:	f43f af45 	beq.w	800c586 <_printf_float+0xba>
 800c6fc:	f04f 0800 	mov.w	r8, #0
 800c700:	f104 091a 	add.w	r9, r4, #26
 800c704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c706:	3b01      	subs	r3, #1
 800c708:	4543      	cmp	r3, r8
 800c70a:	dc09      	bgt.n	800c720 <_printf_float+0x254>
 800c70c:	6823      	ldr	r3, [r4, #0]
 800c70e:	079b      	lsls	r3, r3, #30
 800c710:	f100 8103 	bmi.w	800c91a <_printf_float+0x44e>
 800c714:	68e0      	ldr	r0, [r4, #12]
 800c716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c718:	4298      	cmp	r0, r3
 800c71a:	bfb8      	it	lt
 800c71c:	4618      	movlt	r0, r3
 800c71e:	e734      	b.n	800c58a <_printf_float+0xbe>
 800c720:	2301      	movs	r3, #1
 800c722:	464a      	mov	r2, r9
 800c724:	4631      	mov	r1, r6
 800c726:	4628      	mov	r0, r5
 800c728:	47b8      	blx	r7
 800c72a:	3001      	adds	r0, #1
 800c72c:	f43f af2b 	beq.w	800c586 <_printf_float+0xba>
 800c730:	f108 0801 	add.w	r8, r8, #1
 800c734:	e7e6      	b.n	800c704 <_printf_float+0x238>
 800c736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c738:	2b00      	cmp	r3, #0
 800c73a:	dc2b      	bgt.n	800c794 <_printf_float+0x2c8>
 800c73c:	2301      	movs	r3, #1
 800c73e:	4a26      	ldr	r2, [pc, #152]	; (800c7d8 <_printf_float+0x30c>)
 800c740:	4631      	mov	r1, r6
 800c742:	4628      	mov	r0, r5
 800c744:	47b8      	blx	r7
 800c746:	3001      	adds	r0, #1
 800c748:	f43f af1d 	beq.w	800c586 <_printf_float+0xba>
 800c74c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c74e:	b923      	cbnz	r3, 800c75a <_printf_float+0x28e>
 800c750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c752:	b913      	cbnz	r3, 800c75a <_printf_float+0x28e>
 800c754:	6823      	ldr	r3, [r4, #0]
 800c756:	07d9      	lsls	r1, r3, #31
 800c758:	d5d8      	bpl.n	800c70c <_printf_float+0x240>
 800c75a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c75e:	4631      	mov	r1, r6
 800c760:	4628      	mov	r0, r5
 800c762:	47b8      	blx	r7
 800c764:	3001      	adds	r0, #1
 800c766:	f43f af0e 	beq.w	800c586 <_printf_float+0xba>
 800c76a:	f04f 0900 	mov.w	r9, #0
 800c76e:	f104 0a1a 	add.w	sl, r4, #26
 800c772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c774:	425b      	negs	r3, r3
 800c776:	454b      	cmp	r3, r9
 800c778:	dc01      	bgt.n	800c77e <_printf_float+0x2b2>
 800c77a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c77c:	e794      	b.n	800c6a8 <_printf_float+0x1dc>
 800c77e:	2301      	movs	r3, #1
 800c780:	4652      	mov	r2, sl
 800c782:	4631      	mov	r1, r6
 800c784:	4628      	mov	r0, r5
 800c786:	47b8      	blx	r7
 800c788:	3001      	adds	r0, #1
 800c78a:	f43f aefc 	beq.w	800c586 <_printf_float+0xba>
 800c78e:	f109 0901 	add.w	r9, r9, #1
 800c792:	e7ee      	b.n	800c772 <_printf_float+0x2a6>
 800c794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c796:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c798:	429a      	cmp	r2, r3
 800c79a:	bfa8      	it	ge
 800c79c:	461a      	movge	r2, r3
 800c79e:	2a00      	cmp	r2, #0
 800c7a0:	4691      	mov	r9, r2
 800c7a2:	dd07      	ble.n	800c7b4 <_printf_float+0x2e8>
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	4631      	mov	r1, r6
 800c7a8:	4642      	mov	r2, r8
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	47b8      	blx	r7
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	f43f aee9 	beq.w	800c586 <_printf_float+0xba>
 800c7b4:	f104 031a 	add.w	r3, r4, #26
 800c7b8:	f04f 0b00 	mov.w	fp, #0
 800c7bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7c0:	9306      	str	r3, [sp, #24]
 800c7c2:	e015      	b.n	800c7f0 <_printf_float+0x324>
 800c7c4:	7fefffff 	.word	0x7fefffff
 800c7c8:	0801016a 	.word	0x0801016a
 800c7cc:	0800feb0 	.word	0x0800feb0
 800c7d0:	0800feb8 	.word	0x0800feb8
 800c7d4:	0800feb4 	.word	0x0800feb4
 800c7d8:	0800febc 	.word	0x0800febc
 800c7dc:	2301      	movs	r3, #1
 800c7de:	9a06      	ldr	r2, [sp, #24]
 800c7e0:	4631      	mov	r1, r6
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	47b8      	blx	r7
 800c7e6:	3001      	adds	r0, #1
 800c7e8:	f43f aecd 	beq.w	800c586 <_printf_float+0xba>
 800c7ec:	f10b 0b01 	add.w	fp, fp, #1
 800c7f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c7f4:	ebaa 0309 	sub.w	r3, sl, r9
 800c7f8:	455b      	cmp	r3, fp
 800c7fa:	dcef      	bgt.n	800c7dc <_printf_float+0x310>
 800c7fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c800:	429a      	cmp	r2, r3
 800c802:	44d0      	add	r8, sl
 800c804:	db15      	blt.n	800c832 <_printf_float+0x366>
 800c806:	6823      	ldr	r3, [r4, #0]
 800c808:	07da      	lsls	r2, r3, #31
 800c80a:	d412      	bmi.n	800c832 <_printf_float+0x366>
 800c80c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c80e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c810:	eba3 020a 	sub.w	r2, r3, sl
 800c814:	eba3 0a01 	sub.w	sl, r3, r1
 800c818:	4592      	cmp	sl, r2
 800c81a:	bfa8      	it	ge
 800c81c:	4692      	movge	sl, r2
 800c81e:	f1ba 0f00 	cmp.w	sl, #0
 800c822:	dc0e      	bgt.n	800c842 <_printf_float+0x376>
 800c824:	f04f 0800 	mov.w	r8, #0
 800c828:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c82c:	f104 091a 	add.w	r9, r4, #26
 800c830:	e019      	b.n	800c866 <_printf_float+0x39a>
 800c832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c836:	4631      	mov	r1, r6
 800c838:	4628      	mov	r0, r5
 800c83a:	47b8      	blx	r7
 800c83c:	3001      	adds	r0, #1
 800c83e:	d1e5      	bne.n	800c80c <_printf_float+0x340>
 800c840:	e6a1      	b.n	800c586 <_printf_float+0xba>
 800c842:	4653      	mov	r3, sl
 800c844:	4642      	mov	r2, r8
 800c846:	4631      	mov	r1, r6
 800c848:	4628      	mov	r0, r5
 800c84a:	47b8      	blx	r7
 800c84c:	3001      	adds	r0, #1
 800c84e:	d1e9      	bne.n	800c824 <_printf_float+0x358>
 800c850:	e699      	b.n	800c586 <_printf_float+0xba>
 800c852:	2301      	movs	r3, #1
 800c854:	464a      	mov	r2, r9
 800c856:	4631      	mov	r1, r6
 800c858:	4628      	mov	r0, r5
 800c85a:	47b8      	blx	r7
 800c85c:	3001      	adds	r0, #1
 800c85e:	f43f ae92 	beq.w	800c586 <_printf_float+0xba>
 800c862:	f108 0801 	add.w	r8, r8, #1
 800c866:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c86a:	1a9b      	subs	r3, r3, r2
 800c86c:	eba3 030a 	sub.w	r3, r3, sl
 800c870:	4543      	cmp	r3, r8
 800c872:	dcee      	bgt.n	800c852 <_printf_float+0x386>
 800c874:	e74a      	b.n	800c70c <_printf_float+0x240>
 800c876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c878:	2a01      	cmp	r2, #1
 800c87a:	dc01      	bgt.n	800c880 <_printf_float+0x3b4>
 800c87c:	07db      	lsls	r3, r3, #31
 800c87e:	d53a      	bpl.n	800c8f6 <_printf_float+0x42a>
 800c880:	2301      	movs	r3, #1
 800c882:	4642      	mov	r2, r8
 800c884:	4631      	mov	r1, r6
 800c886:	4628      	mov	r0, r5
 800c888:	47b8      	blx	r7
 800c88a:	3001      	adds	r0, #1
 800c88c:	f43f ae7b 	beq.w	800c586 <_printf_float+0xba>
 800c890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c894:	4631      	mov	r1, r6
 800c896:	4628      	mov	r0, r5
 800c898:	47b8      	blx	r7
 800c89a:	3001      	adds	r0, #1
 800c89c:	f108 0801 	add.w	r8, r8, #1
 800c8a0:	f43f ae71 	beq.w	800c586 <_printf_float+0xba>
 800c8a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	f103 3aff 	add.w	sl, r3, #4294967295
 800c8ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	f7f4 f909 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8b6:	b9c8      	cbnz	r0, 800c8ec <_printf_float+0x420>
 800c8b8:	4653      	mov	r3, sl
 800c8ba:	4642      	mov	r2, r8
 800c8bc:	4631      	mov	r1, r6
 800c8be:	4628      	mov	r0, r5
 800c8c0:	47b8      	blx	r7
 800c8c2:	3001      	adds	r0, #1
 800c8c4:	d10e      	bne.n	800c8e4 <_printf_float+0x418>
 800c8c6:	e65e      	b.n	800c586 <_printf_float+0xba>
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	4652      	mov	r2, sl
 800c8cc:	4631      	mov	r1, r6
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	47b8      	blx	r7
 800c8d2:	3001      	adds	r0, #1
 800c8d4:	f43f ae57 	beq.w	800c586 <_printf_float+0xba>
 800c8d8:	f108 0801 	add.w	r8, r8, #1
 800c8dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8de:	3b01      	subs	r3, #1
 800c8e0:	4543      	cmp	r3, r8
 800c8e2:	dcf1      	bgt.n	800c8c8 <_printf_float+0x3fc>
 800c8e4:	464b      	mov	r3, r9
 800c8e6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c8ea:	e6de      	b.n	800c6aa <_printf_float+0x1de>
 800c8ec:	f04f 0800 	mov.w	r8, #0
 800c8f0:	f104 0a1a 	add.w	sl, r4, #26
 800c8f4:	e7f2      	b.n	800c8dc <_printf_float+0x410>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e7df      	b.n	800c8ba <_printf_float+0x3ee>
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	464a      	mov	r2, r9
 800c8fe:	4631      	mov	r1, r6
 800c900:	4628      	mov	r0, r5
 800c902:	47b8      	blx	r7
 800c904:	3001      	adds	r0, #1
 800c906:	f43f ae3e 	beq.w	800c586 <_printf_float+0xba>
 800c90a:	f108 0801 	add.w	r8, r8, #1
 800c90e:	68e3      	ldr	r3, [r4, #12]
 800c910:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c912:	1a9b      	subs	r3, r3, r2
 800c914:	4543      	cmp	r3, r8
 800c916:	dcf0      	bgt.n	800c8fa <_printf_float+0x42e>
 800c918:	e6fc      	b.n	800c714 <_printf_float+0x248>
 800c91a:	f04f 0800 	mov.w	r8, #0
 800c91e:	f104 0919 	add.w	r9, r4, #25
 800c922:	e7f4      	b.n	800c90e <_printf_float+0x442>
 800c924:	2900      	cmp	r1, #0
 800c926:	f43f ae8b 	beq.w	800c640 <_printf_float+0x174>
 800c92a:	2300      	movs	r3, #0
 800c92c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c930:	ab09      	add	r3, sp, #36	; 0x24
 800c932:	9300      	str	r3, [sp, #0]
 800c934:	ec49 8b10 	vmov	d0, r8, r9
 800c938:	6022      	str	r2, [r4, #0]
 800c93a:	f8cd a004 	str.w	sl, [sp, #4]
 800c93e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c942:	4628      	mov	r0, r5
 800c944:	f7ff fd2e 	bl	800c3a4 <__cvt>
 800c948:	4680      	mov	r8, r0
 800c94a:	e648      	b.n	800c5de <_printf_float+0x112>

0800c94c <_printf_common>:
 800c94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c950:	4691      	mov	r9, r2
 800c952:	461f      	mov	r7, r3
 800c954:	688a      	ldr	r2, [r1, #8]
 800c956:	690b      	ldr	r3, [r1, #16]
 800c958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c95c:	4293      	cmp	r3, r2
 800c95e:	bfb8      	it	lt
 800c960:	4613      	movlt	r3, r2
 800c962:	f8c9 3000 	str.w	r3, [r9]
 800c966:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c96a:	4606      	mov	r6, r0
 800c96c:	460c      	mov	r4, r1
 800c96e:	b112      	cbz	r2, 800c976 <_printf_common+0x2a>
 800c970:	3301      	adds	r3, #1
 800c972:	f8c9 3000 	str.w	r3, [r9]
 800c976:	6823      	ldr	r3, [r4, #0]
 800c978:	0699      	lsls	r1, r3, #26
 800c97a:	bf42      	ittt	mi
 800c97c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c980:	3302      	addmi	r3, #2
 800c982:	f8c9 3000 	strmi.w	r3, [r9]
 800c986:	6825      	ldr	r5, [r4, #0]
 800c988:	f015 0506 	ands.w	r5, r5, #6
 800c98c:	d107      	bne.n	800c99e <_printf_common+0x52>
 800c98e:	f104 0a19 	add.w	sl, r4, #25
 800c992:	68e3      	ldr	r3, [r4, #12]
 800c994:	f8d9 2000 	ldr.w	r2, [r9]
 800c998:	1a9b      	subs	r3, r3, r2
 800c99a:	42ab      	cmp	r3, r5
 800c99c:	dc28      	bgt.n	800c9f0 <_printf_common+0xa4>
 800c99e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c9a2:	6822      	ldr	r2, [r4, #0]
 800c9a4:	3300      	adds	r3, #0
 800c9a6:	bf18      	it	ne
 800c9a8:	2301      	movne	r3, #1
 800c9aa:	0692      	lsls	r2, r2, #26
 800c9ac:	d42d      	bmi.n	800ca0a <_printf_common+0xbe>
 800c9ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9b2:	4639      	mov	r1, r7
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	47c0      	blx	r8
 800c9b8:	3001      	adds	r0, #1
 800c9ba:	d020      	beq.n	800c9fe <_printf_common+0xb2>
 800c9bc:	6823      	ldr	r3, [r4, #0]
 800c9be:	68e5      	ldr	r5, [r4, #12]
 800c9c0:	f8d9 2000 	ldr.w	r2, [r9]
 800c9c4:	f003 0306 	and.w	r3, r3, #6
 800c9c8:	2b04      	cmp	r3, #4
 800c9ca:	bf08      	it	eq
 800c9cc:	1aad      	subeq	r5, r5, r2
 800c9ce:	68a3      	ldr	r3, [r4, #8]
 800c9d0:	6922      	ldr	r2, [r4, #16]
 800c9d2:	bf0c      	ite	eq
 800c9d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9d8:	2500      	movne	r5, #0
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	bfc4      	itt	gt
 800c9de:	1a9b      	subgt	r3, r3, r2
 800c9e0:	18ed      	addgt	r5, r5, r3
 800c9e2:	f04f 0900 	mov.w	r9, #0
 800c9e6:	341a      	adds	r4, #26
 800c9e8:	454d      	cmp	r5, r9
 800c9ea:	d11a      	bne.n	800ca22 <_printf_common+0xd6>
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	e008      	b.n	800ca02 <_printf_common+0xb6>
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	4652      	mov	r2, sl
 800c9f4:	4639      	mov	r1, r7
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	47c0      	blx	r8
 800c9fa:	3001      	adds	r0, #1
 800c9fc:	d103      	bne.n	800ca06 <_printf_common+0xba>
 800c9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800ca02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca06:	3501      	adds	r5, #1
 800ca08:	e7c3      	b.n	800c992 <_printf_common+0x46>
 800ca0a:	18e1      	adds	r1, r4, r3
 800ca0c:	1c5a      	adds	r2, r3, #1
 800ca0e:	2030      	movs	r0, #48	; 0x30
 800ca10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca14:	4422      	add	r2, r4
 800ca16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca1e:	3302      	adds	r3, #2
 800ca20:	e7c5      	b.n	800c9ae <_printf_common+0x62>
 800ca22:	2301      	movs	r3, #1
 800ca24:	4622      	mov	r2, r4
 800ca26:	4639      	mov	r1, r7
 800ca28:	4630      	mov	r0, r6
 800ca2a:	47c0      	blx	r8
 800ca2c:	3001      	adds	r0, #1
 800ca2e:	d0e6      	beq.n	800c9fe <_printf_common+0xb2>
 800ca30:	f109 0901 	add.w	r9, r9, #1
 800ca34:	e7d8      	b.n	800c9e8 <_printf_common+0x9c>
	...

0800ca38 <_printf_i>:
 800ca38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ca40:	460c      	mov	r4, r1
 800ca42:	7e09      	ldrb	r1, [r1, #24]
 800ca44:	b085      	sub	sp, #20
 800ca46:	296e      	cmp	r1, #110	; 0x6e
 800ca48:	4617      	mov	r7, r2
 800ca4a:	4606      	mov	r6, r0
 800ca4c:	4698      	mov	r8, r3
 800ca4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca50:	f000 80b3 	beq.w	800cbba <_printf_i+0x182>
 800ca54:	d822      	bhi.n	800ca9c <_printf_i+0x64>
 800ca56:	2963      	cmp	r1, #99	; 0x63
 800ca58:	d036      	beq.n	800cac8 <_printf_i+0x90>
 800ca5a:	d80a      	bhi.n	800ca72 <_printf_i+0x3a>
 800ca5c:	2900      	cmp	r1, #0
 800ca5e:	f000 80b9 	beq.w	800cbd4 <_printf_i+0x19c>
 800ca62:	2958      	cmp	r1, #88	; 0x58
 800ca64:	f000 8083 	beq.w	800cb6e <_printf_i+0x136>
 800ca68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ca70:	e032      	b.n	800cad8 <_printf_i+0xa0>
 800ca72:	2964      	cmp	r1, #100	; 0x64
 800ca74:	d001      	beq.n	800ca7a <_printf_i+0x42>
 800ca76:	2969      	cmp	r1, #105	; 0x69
 800ca78:	d1f6      	bne.n	800ca68 <_printf_i+0x30>
 800ca7a:	6820      	ldr	r0, [r4, #0]
 800ca7c:	6813      	ldr	r3, [r2, #0]
 800ca7e:	0605      	lsls	r5, r0, #24
 800ca80:	f103 0104 	add.w	r1, r3, #4
 800ca84:	d52a      	bpl.n	800cadc <_printf_i+0xa4>
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	6011      	str	r1, [r2, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	da03      	bge.n	800ca96 <_printf_i+0x5e>
 800ca8e:	222d      	movs	r2, #45	; 0x2d
 800ca90:	425b      	negs	r3, r3
 800ca92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ca96:	486f      	ldr	r0, [pc, #444]	; (800cc54 <_printf_i+0x21c>)
 800ca98:	220a      	movs	r2, #10
 800ca9a:	e039      	b.n	800cb10 <_printf_i+0xd8>
 800ca9c:	2973      	cmp	r1, #115	; 0x73
 800ca9e:	f000 809d 	beq.w	800cbdc <_printf_i+0x1a4>
 800caa2:	d808      	bhi.n	800cab6 <_printf_i+0x7e>
 800caa4:	296f      	cmp	r1, #111	; 0x6f
 800caa6:	d020      	beq.n	800caea <_printf_i+0xb2>
 800caa8:	2970      	cmp	r1, #112	; 0x70
 800caaa:	d1dd      	bne.n	800ca68 <_printf_i+0x30>
 800caac:	6823      	ldr	r3, [r4, #0]
 800caae:	f043 0320 	orr.w	r3, r3, #32
 800cab2:	6023      	str	r3, [r4, #0]
 800cab4:	e003      	b.n	800cabe <_printf_i+0x86>
 800cab6:	2975      	cmp	r1, #117	; 0x75
 800cab8:	d017      	beq.n	800caea <_printf_i+0xb2>
 800caba:	2978      	cmp	r1, #120	; 0x78
 800cabc:	d1d4      	bne.n	800ca68 <_printf_i+0x30>
 800cabe:	2378      	movs	r3, #120	; 0x78
 800cac0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cac4:	4864      	ldr	r0, [pc, #400]	; (800cc58 <_printf_i+0x220>)
 800cac6:	e055      	b.n	800cb74 <_printf_i+0x13c>
 800cac8:	6813      	ldr	r3, [r2, #0]
 800caca:	1d19      	adds	r1, r3, #4
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	6011      	str	r1, [r2, #0]
 800cad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cad8:	2301      	movs	r3, #1
 800cada:	e08c      	b.n	800cbf6 <_printf_i+0x1be>
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	6011      	str	r1, [r2, #0]
 800cae0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cae4:	bf18      	it	ne
 800cae6:	b21b      	sxthne	r3, r3
 800cae8:	e7cf      	b.n	800ca8a <_printf_i+0x52>
 800caea:	6813      	ldr	r3, [r2, #0]
 800caec:	6825      	ldr	r5, [r4, #0]
 800caee:	1d18      	adds	r0, r3, #4
 800caf0:	6010      	str	r0, [r2, #0]
 800caf2:	0628      	lsls	r0, r5, #24
 800caf4:	d501      	bpl.n	800cafa <_printf_i+0xc2>
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	e002      	b.n	800cb00 <_printf_i+0xc8>
 800cafa:	0668      	lsls	r0, r5, #25
 800cafc:	d5fb      	bpl.n	800caf6 <_printf_i+0xbe>
 800cafe:	881b      	ldrh	r3, [r3, #0]
 800cb00:	4854      	ldr	r0, [pc, #336]	; (800cc54 <_printf_i+0x21c>)
 800cb02:	296f      	cmp	r1, #111	; 0x6f
 800cb04:	bf14      	ite	ne
 800cb06:	220a      	movne	r2, #10
 800cb08:	2208      	moveq	r2, #8
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb10:	6865      	ldr	r5, [r4, #4]
 800cb12:	60a5      	str	r5, [r4, #8]
 800cb14:	2d00      	cmp	r5, #0
 800cb16:	f2c0 8095 	blt.w	800cc44 <_printf_i+0x20c>
 800cb1a:	6821      	ldr	r1, [r4, #0]
 800cb1c:	f021 0104 	bic.w	r1, r1, #4
 800cb20:	6021      	str	r1, [r4, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d13d      	bne.n	800cba2 <_printf_i+0x16a>
 800cb26:	2d00      	cmp	r5, #0
 800cb28:	f040 808e 	bne.w	800cc48 <_printf_i+0x210>
 800cb2c:	4665      	mov	r5, ip
 800cb2e:	2a08      	cmp	r2, #8
 800cb30:	d10b      	bne.n	800cb4a <_printf_i+0x112>
 800cb32:	6823      	ldr	r3, [r4, #0]
 800cb34:	07db      	lsls	r3, r3, #31
 800cb36:	d508      	bpl.n	800cb4a <_printf_i+0x112>
 800cb38:	6923      	ldr	r3, [r4, #16]
 800cb3a:	6862      	ldr	r2, [r4, #4]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	bfde      	ittt	le
 800cb40:	2330      	movle	r3, #48	; 0x30
 800cb42:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb46:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb4a:	ebac 0305 	sub.w	r3, ip, r5
 800cb4e:	6123      	str	r3, [r4, #16]
 800cb50:	f8cd 8000 	str.w	r8, [sp]
 800cb54:	463b      	mov	r3, r7
 800cb56:	aa03      	add	r2, sp, #12
 800cb58:	4621      	mov	r1, r4
 800cb5a:	4630      	mov	r0, r6
 800cb5c:	f7ff fef6 	bl	800c94c <_printf_common>
 800cb60:	3001      	adds	r0, #1
 800cb62:	d14d      	bne.n	800cc00 <_printf_i+0x1c8>
 800cb64:	f04f 30ff 	mov.w	r0, #4294967295
 800cb68:	b005      	add	sp, #20
 800cb6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb6e:	4839      	ldr	r0, [pc, #228]	; (800cc54 <_printf_i+0x21c>)
 800cb70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cb74:	6813      	ldr	r3, [r2, #0]
 800cb76:	6821      	ldr	r1, [r4, #0]
 800cb78:	1d1d      	adds	r5, r3, #4
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	6015      	str	r5, [r2, #0]
 800cb7e:	060a      	lsls	r2, r1, #24
 800cb80:	d50b      	bpl.n	800cb9a <_printf_i+0x162>
 800cb82:	07ca      	lsls	r2, r1, #31
 800cb84:	bf44      	itt	mi
 800cb86:	f041 0120 	orrmi.w	r1, r1, #32
 800cb8a:	6021      	strmi	r1, [r4, #0]
 800cb8c:	b91b      	cbnz	r3, 800cb96 <_printf_i+0x15e>
 800cb8e:	6822      	ldr	r2, [r4, #0]
 800cb90:	f022 0220 	bic.w	r2, r2, #32
 800cb94:	6022      	str	r2, [r4, #0]
 800cb96:	2210      	movs	r2, #16
 800cb98:	e7b7      	b.n	800cb0a <_printf_i+0xd2>
 800cb9a:	064d      	lsls	r5, r1, #25
 800cb9c:	bf48      	it	mi
 800cb9e:	b29b      	uxthmi	r3, r3
 800cba0:	e7ef      	b.n	800cb82 <_printf_i+0x14a>
 800cba2:	4665      	mov	r5, ip
 800cba4:	fbb3 f1f2 	udiv	r1, r3, r2
 800cba8:	fb02 3311 	mls	r3, r2, r1, r3
 800cbac:	5cc3      	ldrb	r3, [r0, r3]
 800cbae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	2900      	cmp	r1, #0
 800cbb6:	d1f5      	bne.n	800cba4 <_printf_i+0x16c>
 800cbb8:	e7b9      	b.n	800cb2e <_printf_i+0xf6>
 800cbba:	6813      	ldr	r3, [r2, #0]
 800cbbc:	6825      	ldr	r5, [r4, #0]
 800cbbe:	6961      	ldr	r1, [r4, #20]
 800cbc0:	1d18      	adds	r0, r3, #4
 800cbc2:	6010      	str	r0, [r2, #0]
 800cbc4:	0628      	lsls	r0, r5, #24
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	d501      	bpl.n	800cbce <_printf_i+0x196>
 800cbca:	6019      	str	r1, [r3, #0]
 800cbcc:	e002      	b.n	800cbd4 <_printf_i+0x19c>
 800cbce:	066a      	lsls	r2, r5, #25
 800cbd0:	d5fb      	bpl.n	800cbca <_printf_i+0x192>
 800cbd2:	8019      	strh	r1, [r3, #0]
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	6123      	str	r3, [r4, #16]
 800cbd8:	4665      	mov	r5, ip
 800cbda:	e7b9      	b.n	800cb50 <_printf_i+0x118>
 800cbdc:	6813      	ldr	r3, [r2, #0]
 800cbde:	1d19      	adds	r1, r3, #4
 800cbe0:	6011      	str	r1, [r2, #0]
 800cbe2:	681d      	ldr	r5, [r3, #0]
 800cbe4:	6862      	ldr	r2, [r4, #4]
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	4628      	mov	r0, r5
 800cbea:	f7f3 faf9 	bl	80001e0 <memchr>
 800cbee:	b108      	cbz	r0, 800cbf4 <_printf_i+0x1bc>
 800cbf0:	1b40      	subs	r0, r0, r5
 800cbf2:	6060      	str	r0, [r4, #4]
 800cbf4:	6863      	ldr	r3, [r4, #4]
 800cbf6:	6123      	str	r3, [r4, #16]
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbfe:	e7a7      	b.n	800cb50 <_printf_i+0x118>
 800cc00:	6923      	ldr	r3, [r4, #16]
 800cc02:	462a      	mov	r2, r5
 800cc04:	4639      	mov	r1, r7
 800cc06:	4630      	mov	r0, r6
 800cc08:	47c0      	blx	r8
 800cc0a:	3001      	adds	r0, #1
 800cc0c:	d0aa      	beq.n	800cb64 <_printf_i+0x12c>
 800cc0e:	6823      	ldr	r3, [r4, #0]
 800cc10:	079b      	lsls	r3, r3, #30
 800cc12:	d413      	bmi.n	800cc3c <_printf_i+0x204>
 800cc14:	68e0      	ldr	r0, [r4, #12]
 800cc16:	9b03      	ldr	r3, [sp, #12]
 800cc18:	4298      	cmp	r0, r3
 800cc1a:	bfb8      	it	lt
 800cc1c:	4618      	movlt	r0, r3
 800cc1e:	e7a3      	b.n	800cb68 <_printf_i+0x130>
 800cc20:	2301      	movs	r3, #1
 800cc22:	464a      	mov	r2, r9
 800cc24:	4639      	mov	r1, r7
 800cc26:	4630      	mov	r0, r6
 800cc28:	47c0      	blx	r8
 800cc2a:	3001      	adds	r0, #1
 800cc2c:	d09a      	beq.n	800cb64 <_printf_i+0x12c>
 800cc2e:	3501      	adds	r5, #1
 800cc30:	68e3      	ldr	r3, [r4, #12]
 800cc32:	9a03      	ldr	r2, [sp, #12]
 800cc34:	1a9b      	subs	r3, r3, r2
 800cc36:	42ab      	cmp	r3, r5
 800cc38:	dcf2      	bgt.n	800cc20 <_printf_i+0x1e8>
 800cc3a:	e7eb      	b.n	800cc14 <_printf_i+0x1dc>
 800cc3c:	2500      	movs	r5, #0
 800cc3e:	f104 0919 	add.w	r9, r4, #25
 800cc42:	e7f5      	b.n	800cc30 <_printf_i+0x1f8>
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1ac      	bne.n	800cba2 <_printf_i+0x16a>
 800cc48:	7803      	ldrb	r3, [r0, #0]
 800cc4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc52:	e76c      	b.n	800cb2e <_printf_i+0xf6>
 800cc54:	0800febe 	.word	0x0800febe
 800cc58:	0800fecf 	.word	0x0800fecf

0800cc5c <iprintf>:
 800cc5c:	b40f      	push	{r0, r1, r2, r3}
 800cc5e:	4b0a      	ldr	r3, [pc, #40]	; (800cc88 <iprintf+0x2c>)
 800cc60:	b513      	push	{r0, r1, r4, lr}
 800cc62:	681c      	ldr	r4, [r3, #0]
 800cc64:	b124      	cbz	r4, 800cc70 <iprintf+0x14>
 800cc66:	69a3      	ldr	r3, [r4, #24]
 800cc68:	b913      	cbnz	r3, 800cc70 <iprintf+0x14>
 800cc6a:	4620      	mov	r0, r4
 800cc6c:	f001 f868 	bl	800dd40 <__sinit>
 800cc70:	ab05      	add	r3, sp, #20
 800cc72:	9a04      	ldr	r2, [sp, #16]
 800cc74:	68a1      	ldr	r1, [r4, #8]
 800cc76:	9301      	str	r3, [sp, #4]
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f001 fd2b 	bl	800e6d4 <_vfiprintf_r>
 800cc7e:	b002      	add	sp, #8
 800cc80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc84:	b004      	add	sp, #16
 800cc86:	4770      	bx	lr
 800cc88:	20000010 	.word	0x20000010

0800cc8c <_puts_r>:
 800cc8c:	b570      	push	{r4, r5, r6, lr}
 800cc8e:	460e      	mov	r6, r1
 800cc90:	4605      	mov	r5, r0
 800cc92:	b118      	cbz	r0, 800cc9c <_puts_r+0x10>
 800cc94:	6983      	ldr	r3, [r0, #24]
 800cc96:	b90b      	cbnz	r3, 800cc9c <_puts_r+0x10>
 800cc98:	f001 f852 	bl	800dd40 <__sinit>
 800cc9c:	69ab      	ldr	r3, [r5, #24]
 800cc9e:	68ac      	ldr	r4, [r5, #8]
 800cca0:	b913      	cbnz	r3, 800cca8 <_puts_r+0x1c>
 800cca2:	4628      	mov	r0, r5
 800cca4:	f001 f84c 	bl	800dd40 <__sinit>
 800cca8:	4b23      	ldr	r3, [pc, #140]	; (800cd38 <_puts_r+0xac>)
 800ccaa:	429c      	cmp	r4, r3
 800ccac:	d117      	bne.n	800ccde <_puts_r+0x52>
 800ccae:	686c      	ldr	r4, [r5, #4]
 800ccb0:	89a3      	ldrh	r3, [r4, #12]
 800ccb2:	071b      	lsls	r3, r3, #28
 800ccb4:	d51d      	bpl.n	800ccf2 <_puts_r+0x66>
 800ccb6:	6923      	ldr	r3, [r4, #16]
 800ccb8:	b1db      	cbz	r3, 800ccf2 <_puts_r+0x66>
 800ccba:	3e01      	subs	r6, #1
 800ccbc:	68a3      	ldr	r3, [r4, #8]
 800ccbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ccc2:	3b01      	subs	r3, #1
 800ccc4:	60a3      	str	r3, [r4, #8]
 800ccc6:	b9e9      	cbnz	r1, 800cd04 <_puts_r+0x78>
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	da2e      	bge.n	800cd2a <_puts_r+0x9e>
 800cccc:	4622      	mov	r2, r4
 800ccce:	210a      	movs	r1, #10
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	f000 f83f 	bl	800cd54 <__swbuf_r>
 800ccd6:	3001      	adds	r0, #1
 800ccd8:	d011      	beq.n	800ccfe <_puts_r+0x72>
 800ccda:	200a      	movs	r0, #10
 800ccdc:	e011      	b.n	800cd02 <_puts_r+0x76>
 800ccde:	4b17      	ldr	r3, [pc, #92]	; (800cd3c <_puts_r+0xb0>)
 800cce0:	429c      	cmp	r4, r3
 800cce2:	d101      	bne.n	800cce8 <_puts_r+0x5c>
 800cce4:	68ac      	ldr	r4, [r5, #8]
 800cce6:	e7e3      	b.n	800ccb0 <_puts_r+0x24>
 800cce8:	4b15      	ldr	r3, [pc, #84]	; (800cd40 <_puts_r+0xb4>)
 800ccea:	429c      	cmp	r4, r3
 800ccec:	bf08      	it	eq
 800ccee:	68ec      	ldreq	r4, [r5, #12]
 800ccf0:	e7de      	b.n	800ccb0 <_puts_r+0x24>
 800ccf2:	4621      	mov	r1, r4
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	f000 f87f 	bl	800cdf8 <__swsetup_r>
 800ccfa:	2800      	cmp	r0, #0
 800ccfc:	d0dd      	beq.n	800ccba <_puts_r+0x2e>
 800ccfe:	f04f 30ff 	mov.w	r0, #4294967295
 800cd02:	bd70      	pop	{r4, r5, r6, pc}
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	da04      	bge.n	800cd12 <_puts_r+0x86>
 800cd08:	69a2      	ldr	r2, [r4, #24]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	dc06      	bgt.n	800cd1c <_puts_r+0x90>
 800cd0e:	290a      	cmp	r1, #10
 800cd10:	d004      	beq.n	800cd1c <_puts_r+0x90>
 800cd12:	6823      	ldr	r3, [r4, #0]
 800cd14:	1c5a      	adds	r2, r3, #1
 800cd16:	6022      	str	r2, [r4, #0]
 800cd18:	7019      	strb	r1, [r3, #0]
 800cd1a:	e7cf      	b.n	800ccbc <_puts_r+0x30>
 800cd1c:	4622      	mov	r2, r4
 800cd1e:	4628      	mov	r0, r5
 800cd20:	f000 f818 	bl	800cd54 <__swbuf_r>
 800cd24:	3001      	adds	r0, #1
 800cd26:	d1c9      	bne.n	800ccbc <_puts_r+0x30>
 800cd28:	e7e9      	b.n	800ccfe <_puts_r+0x72>
 800cd2a:	6823      	ldr	r3, [r4, #0]
 800cd2c:	200a      	movs	r0, #10
 800cd2e:	1c5a      	adds	r2, r3, #1
 800cd30:	6022      	str	r2, [r4, #0]
 800cd32:	7018      	strb	r0, [r3, #0]
 800cd34:	e7e5      	b.n	800cd02 <_puts_r+0x76>
 800cd36:	bf00      	nop
 800cd38:	0800ff10 	.word	0x0800ff10
 800cd3c:	0800ff30 	.word	0x0800ff30
 800cd40:	0800fef0 	.word	0x0800fef0

0800cd44 <puts>:
 800cd44:	4b02      	ldr	r3, [pc, #8]	; (800cd50 <puts+0xc>)
 800cd46:	4601      	mov	r1, r0
 800cd48:	6818      	ldr	r0, [r3, #0]
 800cd4a:	f7ff bf9f 	b.w	800cc8c <_puts_r>
 800cd4e:	bf00      	nop
 800cd50:	20000010 	.word	0x20000010

0800cd54 <__swbuf_r>:
 800cd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd56:	460e      	mov	r6, r1
 800cd58:	4614      	mov	r4, r2
 800cd5a:	4605      	mov	r5, r0
 800cd5c:	b118      	cbz	r0, 800cd66 <__swbuf_r+0x12>
 800cd5e:	6983      	ldr	r3, [r0, #24]
 800cd60:	b90b      	cbnz	r3, 800cd66 <__swbuf_r+0x12>
 800cd62:	f000 ffed 	bl	800dd40 <__sinit>
 800cd66:	4b21      	ldr	r3, [pc, #132]	; (800cdec <__swbuf_r+0x98>)
 800cd68:	429c      	cmp	r4, r3
 800cd6a:	d12a      	bne.n	800cdc2 <__swbuf_r+0x6e>
 800cd6c:	686c      	ldr	r4, [r5, #4]
 800cd6e:	69a3      	ldr	r3, [r4, #24]
 800cd70:	60a3      	str	r3, [r4, #8]
 800cd72:	89a3      	ldrh	r3, [r4, #12]
 800cd74:	071a      	lsls	r2, r3, #28
 800cd76:	d52e      	bpl.n	800cdd6 <__swbuf_r+0x82>
 800cd78:	6923      	ldr	r3, [r4, #16]
 800cd7a:	b363      	cbz	r3, 800cdd6 <__swbuf_r+0x82>
 800cd7c:	6923      	ldr	r3, [r4, #16]
 800cd7e:	6820      	ldr	r0, [r4, #0]
 800cd80:	1ac0      	subs	r0, r0, r3
 800cd82:	6963      	ldr	r3, [r4, #20]
 800cd84:	b2f6      	uxtb	r6, r6
 800cd86:	4283      	cmp	r3, r0
 800cd88:	4637      	mov	r7, r6
 800cd8a:	dc04      	bgt.n	800cd96 <__swbuf_r+0x42>
 800cd8c:	4621      	mov	r1, r4
 800cd8e:	4628      	mov	r0, r5
 800cd90:	f000 ff6c 	bl	800dc6c <_fflush_r>
 800cd94:	bb28      	cbnz	r0, 800cde2 <__swbuf_r+0x8e>
 800cd96:	68a3      	ldr	r3, [r4, #8]
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	60a3      	str	r3, [r4, #8]
 800cd9c:	6823      	ldr	r3, [r4, #0]
 800cd9e:	1c5a      	adds	r2, r3, #1
 800cda0:	6022      	str	r2, [r4, #0]
 800cda2:	701e      	strb	r6, [r3, #0]
 800cda4:	6963      	ldr	r3, [r4, #20]
 800cda6:	3001      	adds	r0, #1
 800cda8:	4283      	cmp	r3, r0
 800cdaa:	d004      	beq.n	800cdb6 <__swbuf_r+0x62>
 800cdac:	89a3      	ldrh	r3, [r4, #12]
 800cdae:	07db      	lsls	r3, r3, #31
 800cdb0:	d519      	bpl.n	800cde6 <__swbuf_r+0x92>
 800cdb2:	2e0a      	cmp	r6, #10
 800cdb4:	d117      	bne.n	800cde6 <__swbuf_r+0x92>
 800cdb6:	4621      	mov	r1, r4
 800cdb8:	4628      	mov	r0, r5
 800cdba:	f000 ff57 	bl	800dc6c <_fflush_r>
 800cdbe:	b190      	cbz	r0, 800cde6 <__swbuf_r+0x92>
 800cdc0:	e00f      	b.n	800cde2 <__swbuf_r+0x8e>
 800cdc2:	4b0b      	ldr	r3, [pc, #44]	; (800cdf0 <__swbuf_r+0x9c>)
 800cdc4:	429c      	cmp	r4, r3
 800cdc6:	d101      	bne.n	800cdcc <__swbuf_r+0x78>
 800cdc8:	68ac      	ldr	r4, [r5, #8]
 800cdca:	e7d0      	b.n	800cd6e <__swbuf_r+0x1a>
 800cdcc:	4b09      	ldr	r3, [pc, #36]	; (800cdf4 <__swbuf_r+0xa0>)
 800cdce:	429c      	cmp	r4, r3
 800cdd0:	bf08      	it	eq
 800cdd2:	68ec      	ldreq	r4, [r5, #12]
 800cdd4:	e7cb      	b.n	800cd6e <__swbuf_r+0x1a>
 800cdd6:	4621      	mov	r1, r4
 800cdd8:	4628      	mov	r0, r5
 800cdda:	f000 f80d 	bl	800cdf8 <__swsetup_r>
 800cdde:	2800      	cmp	r0, #0
 800cde0:	d0cc      	beq.n	800cd7c <__swbuf_r+0x28>
 800cde2:	f04f 37ff 	mov.w	r7, #4294967295
 800cde6:	4638      	mov	r0, r7
 800cde8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdea:	bf00      	nop
 800cdec:	0800ff10 	.word	0x0800ff10
 800cdf0:	0800ff30 	.word	0x0800ff30
 800cdf4:	0800fef0 	.word	0x0800fef0

0800cdf8 <__swsetup_r>:
 800cdf8:	4b32      	ldr	r3, [pc, #200]	; (800cec4 <__swsetup_r+0xcc>)
 800cdfa:	b570      	push	{r4, r5, r6, lr}
 800cdfc:	681d      	ldr	r5, [r3, #0]
 800cdfe:	4606      	mov	r6, r0
 800ce00:	460c      	mov	r4, r1
 800ce02:	b125      	cbz	r5, 800ce0e <__swsetup_r+0x16>
 800ce04:	69ab      	ldr	r3, [r5, #24]
 800ce06:	b913      	cbnz	r3, 800ce0e <__swsetup_r+0x16>
 800ce08:	4628      	mov	r0, r5
 800ce0a:	f000 ff99 	bl	800dd40 <__sinit>
 800ce0e:	4b2e      	ldr	r3, [pc, #184]	; (800cec8 <__swsetup_r+0xd0>)
 800ce10:	429c      	cmp	r4, r3
 800ce12:	d10f      	bne.n	800ce34 <__swsetup_r+0x3c>
 800ce14:	686c      	ldr	r4, [r5, #4]
 800ce16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	0715      	lsls	r5, r2, #28
 800ce1e:	d42c      	bmi.n	800ce7a <__swsetup_r+0x82>
 800ce20:	06d0      	lsls	r0, r2, #27
 800ce22:	d411      	bmi.n	800ce48 <__swsetup_r+0x50>
 800ce24:	2209      	movs	r2, #9
 800ce26:	6032      	str	r2, [r6, #0]
 800ce28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce2c:	81a3      	strh	r3, [r4, #12]
 800ce2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce32:	e03e      	b.n	800ceb2 <__swsetup_r+0xba>
 800ce34:	4b25      	ldr	r3, [pc, #148]	; (800cecc <__swsetup_r+0xd4>)
 800ce36:	429c      	cmp	r4, r3
 800ce38:	d101      	bne.n	800ce3e <__swsetup_r+0x46>
 800ce3a:	68ac      	ldr	r4, [r5, #8]
 800ce3c:	e7eb      	b.n	800ce16 <__swsetup_r+0x1e>
 800ce3e:	4b24      	ldr	r3, [pc, #144]	; (800ced0 <__swsetup_r+0xd8>)
 800ce40:	429c      	cmp	r4, r3
 800ce42:	bf08      	it	eq
 800ce44:	68ec      	ldreq	r4, [r5, #12]
 800ce46:	e7e6      	b.n	800ce16 <__swsetup_r+0x1e>
 800ce48:	0751      	lsls	r1, r2, #29
 800ce4a:	d512      	bpl.n	800ce72 <__swsetup_r+0x7a>
 800ce4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce4e:	b141      	cbz	r1, 800ce62 <__swsetup_r+0x6a>
 800ce50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce54:	4299      	cmp	r1, r3
 800ce56:	d002      	beq.n	800ce5e <__swsetup_r+0x66>
 800ce58:	4630      	mov	r0, r6
 800ce5a:	f001 fb69 	bl	800e530 <_free_r>
 800ce5e:	2300      	movs	r3, #0
 800ce60:	6363      	str	r3, [r4, #52]	; 0x34
 800ce62:	89a3      	ldrh	r3, [r4, #12]
 800ce64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce68:	81a3      	strh	r3, [r4, #12]
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	6063      	str	r3, [r4, #4]
 800ce6e:	6923      	ldr	r3, [r4, #16]
 800ce70:	6023      	str	r3, [r4, #0]
 800ce72:	89a3      	ldrh	r3, [r4, #12]
 800ce74:	f043 0308 	orr.w	r3, r3, #8
 800ce78:	81a3      	strh	r3, [r4, #12]
 800ce7a:	6923      	ldr	r3, [r4, #16]
 800ce7c:	b94b      	cbnz	r3, 800ce92 <__swsetup_r+0x9a>
 800ce7e:	89a3      	ldrh	r3, [r4, #12]
 800ce80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce88:	d003      	beq.n	800ce92 <__swsetup_r+0x9a>
 800ce8a:	4621      	mov	r1, r4
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	f001 f813 	bl	800deb8 <__smakebuf_r>
 800ce92:	89a2      	ldrh	r2, [r4, #12]
 800ce94:	f012 0301 	ands.w	r3, r2, #1
 800ce98:	d00c      	beq.n	800ceb4 <__swsetup_r+0xbc>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	60a3      	str	r3, [r4, #8]
 800ce9e:	6963      	ldr	r3, [r4, #20]
 800cea0:	425b      	negs	r3, r3
 800cea2:	61a3      	str	r3, [r4, #24]
 800cea4:	6923      	ldr	r3, [r4, #16]
 800cea6:	b953      	cbnz	r3, 800cebe <__swsetup_r+0xc6>
 800cea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ceac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ceb0:	d1ba      	bne.n	800ce28 <__swsetup_r+0x30>
 800ceb2:	bd70      	pop	{r4, r5, r6, pc}
 800ceb4:	0792      	lsls	r2, r2, #30
 800ceb6:	bf58      	it	pl
 800ceb8:	6963      	ldrpl	r3, [r4, #20]
 800ceba:	60a3      	str	r3, [r4, #8]
 800cebc:	e7f2      	b.n	800cea4 <__swsetup_r+0xac>
 800cebe:	2000      	movs	r0, #0
 800cec0:	e7f7      	b.n	800ceb2 <__swsetup_r+0xba>
 800cec2:	bf00      	nop
 800cec4:	20000010 	.word	0x20000010
 800cec8:	0800ff10 	.word	0x0800ff10
 800cecc:	0800ff30 	.word	0x0800ff30
 800ced0:	0800fef0 	.word	0x0800fef0

0800ced4 <quorem>:
 800ced4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced8:	6903      	ldr	r3, [r0, #16]
 800ceda:	690c      	ldr	r4, [r1, #16]
 800cedc:	42a3      	cmp	r3, r4
 800cede:	4680      	mov	r8, r0
 800cee0:	f2c0 8082 	blt.w	800cfe8 <quorem+0x114>
 800cee4:	3c01      	subs	r4, #1
 800cee6:	f101 0714 	add.w	r7, r1, #20
 800ceea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ceee:	f100 0614 	add.w	r6, r0, #20
 800cef2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800cef6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800cefa:	eb06 030c 	add.w	r3, r6, ip
 800cefe:	3501      	adds	r5, #1
 800cf00:	eb07 090c 	add.w	r9, r7, ip
 800cf04:	9301      	str	r3, [sp, #4]
 800cf06:	fbb0 f5f5 	udiv	r5, r0, r5
 800cf0a:	b395      	cbz	r5, 800cf72 <quorem+0x9e>
 800cf0c:	f04f 0a00 	mov.w	sl, #0
 800cf10:	4638      	mov	r0, r7
 800cf12:	46b6      	mov	lr, r6
 800cf14:	46d3      	mov	fp, sl
 800cf16:	f850 2b04 	ldr.w	r2, [r0], #4
 800cf1a:	b293      	uxth	r3, r2
 800cf1c:	fb05 a303 	mla	r3, r5, r3, sl
 800cf20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	ebab 0303 	sub.w	r3, fp, r3
 800cf2a:	0c12      	lsrs	r2, r2, #16
 800cf2c:	f8de b000 	ldr.w	fp, [lr]
 800cf30:	fb05 a202 	mla	r2, r5, r2, sl
 800cf34:	fa13 f38b 	uxtah	r3, r3, fp
 800cf38:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cf3c:	fa1f fb82 	uxth.w	fp, r2
 800cf40:	f8de 2000 	ldr.w	r2, [lr]
 800cf44:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800cf48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf52:	4581      	cmp	r9, r0
 800cf54:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cf58:	f84e 3b04 	str.w	r3, [lr], #4
 800cf5c:	d2db      	bcs.n	800cf16 <quorem+0x42>
 800cf5e:	f856 300c 	ldr.w	r3, [r6, ip]
 800cf62:	b933      	cbnz	r3, 800cf72 <quorem+0x9e>
 800cf64:	9b01      	ldr	r3, [sp, #4]
 800cf66:	3b04      	subs	r3, #4
 800cf68:	429e      	cmp	r6, r3
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	d330      	bcc.n	800cfd0 <quorem+0xfc>
 800cf6e:	f8c8 4010 	str.w	r4, [r8, #16]
 800cf72:	4640      	mov	r0, r8
 800cf74:	f001 fa08 	bl	800e388 <__mcmp>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	db25      	blt.n	800cfc8 <quorem+0xf4>
 800cf7c:	3501      	adds	r5, #1
 800cf7e:	4630      	mov	r0, r6
 800cf80:	f04f 0c00 	mov.w	ip, #0
 800cf84:	f857 2b04 	ldr.w	r2, [r7], #4
 800cf88:	f8d0 e000 	ldr.w	lr, [r0]
 800cf8c:	b293      	uxth	r3, r2
 800cf8e:	ebac 0303 	sub.w	r3, ip, r3
 800cf92:	0c12      	lsrs	r2, r2, #16
 800cf94:	fa13 f38e 	uxtah	r3, r3, lr
 800cf98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cf9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cfa0:	b29b      	uxth	r3, r3
 800cfa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfa6:	45b9      	cmp	r9, r7
 800cfa8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cfac:	f840 3b04 	str.w	r3, [r0], #4
 800cfb0:	d2e8      	bcs.n	800cf84 <quorem+0xb0>
 800cfb2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cfb6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800cfba:	b92a      	cbnz	r2, 800cfc8 <quorem+0xf4>
 800cfbc:	3b04      	subs	r3, #4
 800cfbe:	429e      	cmp	r6, r3
 800cfc0:	461a      	mov	r2, r3
 800cfc2:	d30b      	bcc.n	800cfdc <quorem+0x108>
 800cfc4:	f8c8 4010 	str.w	r4, [r8, #16]
 800cfc8:	4628      	mov	r0, r5
 800cfca:	b003      	add	sp, #12
 800cfcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd0:	6812      	ldr	r2, [r2, #0]
 800cfd2:	3b04      	subs	r3, #4
 800cfd4:	2a00      	cmp	r2, #0
 800cfd6:	d1ca      	bne.n	800cf6e <quorem+0x9a>
 800cfd8:	3c01      	subs	r4, #1
 800cfda:	e7c5      	b.n	800cf68 <quorem+0x94>
 800cfdc:	6812      	ldr	r2, [r2, #0]
 800cfde:	3b04      	subs	r3, #4
 800cfe0:	2a00      	cmp	r2, #0
 800cfe2:	d1ef      	bne.n	800cfc4 <quorem+0xf0>
 800cfe4:	3c01      	subs	r4, #1
 800cfe6:	e7ea      	b.n	800cfbe <quorem+0xea>
 800cfe8:	2000      	movs	r0, #0
 800cfea:	e7ee      	b.n	800cfca <quorem+0xf6>
 800cfec:	0000      	movs	r0, r0
	...

0800cff0 <_dtoa_r>:
 800cff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff4:	ec57 6b10 	vmov	r6, r7, d0
 800cff8:	b097      	sub	sp, #92	; 0x5c
 800cffa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cffc:	9106      	str	r1, [sp, #24]
 800cffe:	4604      	mov	r4, r0
 800d000:	920b      	str	r2, [sp, #44]	; 0x2c
 800d002:	9312      	str	r3, [sp, #72]	; 0x48
 800d004:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d008:	e9cd 6700 	strd	r6, r7, [sp]
 800d00c:	b93d      	cbnz	r5, 800d01e <_dtoa_r+0x2e>
 800d00e:	2010      	movs	r0, #16
 800d010:	f000 ff92 	bl	800df38 <malloc>
 800d014:	6260      	str	r0, [r4, #36]	; 0x24
 800d016:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d01a:	6005      	str	r5, [r0, #0]
 800d01c:	60c5      	str	r5, [r0, #12]
 800d01e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d020:	6819      	ldr	r1, [r3, #0]
 800d022:	b151      	cbz	r1, 800d03a <_dtoa_r+0x4a>
 800d024:	685a      	ldr	r2, [r3, #4]
 800d026:	604a      	str	r2, [r1, #4]
 800d028:	2301      	movs	r3, #1
 800d02a:	4093      	lsls	r3, r2
 800d02c:	608b      	str	r3, [r1, #8]
 800d02e:	4620      	mov	r0, r4
 800d030:	f000 ffc9 	bl	800dfc6 <_Bfree>
 800d034:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d036:	2200      	movs	r2, #0
 800d038:	601a      	str	r2, [r3, #0]
 800d03a:	1e3b      	subs	r3, r7, #0
 800d03c:	bfbb      	ittet	lt
 800d03e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d042:	9301      	strlt	r3, [sp, #4]
 800d044:	2300      	movge	r3, #0
 800d046:	2201      	movlt	r2, #1
 800d048:	bfac      	ite	ge
 800d04a:	f8c8 3000 	strge.w	r3, [r8]
 800d04e:	f8c8 2000 	strlt.w	r2, [r8]
 800d052:	4baf      	ldr	r3, [pc, #700]	; (800d310 <_dtoa_r+0x320>)
 800d054:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d058:	ea33 0308 	bics.w	r3, r3, r8
 800d05c:	d114      	bne.n	800d088 <_dtoa_r+0x98>
 800d05e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d060:	f242 730f 	movw	r3, #9999	; 0x270f
 800d064:	6013      	str	r3, [r2, #0]
 800d066:	9b00      	ldr	r3, [sp, #0]
 800d068:	b923      	cbnz	r3, 800d074 <_dtoa_r+0x84>
 800d06a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d06e:	2800      	cmp	r0, #0
 800d070:	f000 8542 	beq.w	800daf8 <_dtoa_r+0xb08>
 800d074:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d076:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d324 <_dtoa_r+0x334>
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	f000 8544 	beq.w	800db08 <_dtoa_r+0xb18>
 800d080:	f10b 0303 	add.w	r3, fp, #3
 800d084:	f000 bd3e 	b.w	800db04 <_dtoa_r+0xb14>
 800d088:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d08c:	2200      	movs	r2, #0
 800d08e:	2300      	movs	r3, #0
 800d090:	4630      	mov	r0, r6
 800d092:	4639      	mov	r1, r7
 800d094:	f7f3 fd18 	bl	8000ac8 <__aeabi_dcmpeq>
 800d098:	4681      	mov	r9, r0
 800d09a:	b168      	cbz	r0, 800d0b8 <_dtoa_r+0xc8>
 800d09c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d09e:	2301      	movs	r3, #1
 800d0a0:	6013      	str	r3, [r2, #0]
 800d0a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	f000 8524 	beq.w	800daf2 <_dtoa_r+0xb02>
 800d0aa:	4b9a      	ldr	r3, [pc, #616]	; (800d314 <_dtoa_r+0x324>)
 800d0ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d0ae:	f103 3bff 	add.w	fp, r3, #4294967295
 800d0b2:	6013      	str	r3, [r2, #0]
 800d0b4:	f000 bd28 	b.w	800db08 <_dtoa_r+0xb18>
 800d0b8:	aa14      	add	r2, sp, #80	; 0x50
 800d0ba:	a915      	add	r1, sp, #84	; 0x54
 800d0bc:	ec47 6b10 	vmov	d0, r6, r7
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f001 f9d8 	bl	800e476 <__d2b>
 800d0c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d0ca:	9004      	str	r0, [sp, #16]
 800d0cc:	2d00      	cmp	r5, #0
 800d0ce:	d07c      	beq.n	800d1ca <_dtoa_r+0x1da>
 800d0d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d0d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d0d8:	46b2      	mov	sl, r6
 800d0da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d0de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d0e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	4b8b      	ldr	r3, [pc, #556]	; (800d318 <_dtoa_r+0x328>)
 800d0ea:	4650      	mov	r0, sl
 800d0ec:	4659      	mov	r1, fp
 800d0ee:	f7f3 f8cb 	bl	8000288 <__aeabi_dsub>
 800d0f2:	a381      	add	r3, pc, #516	; (adr r3, 800d2f8 <_dtoa_r+0x308>)
 800d0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f8:	f7f3 fa7e 	bl	80005f8 <__aeabi_dmul>
 800d0fc:	a380      	add	r3, pc, #512	; (adr r3, 800d300 <_dtoa_r+0x310>)
 800d0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d102:	f7f3 f8c3 	bl	800028c <__adddf3>
 800d106:	4606      	mov	r6, r0
 800d108:	4628      	mov	r0, r5
 800d10a:	460f      	mov	r7, r1
 800d10c:	f7f3 fa0a 	bl	8000524 <__aeabi_i2d>
 800d110:	a37d      	add	r3, pc, #500	; (adr r3, 800d308 <_dtoa_r+0x318>)
 800d112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d116:	f7f3 fa6f 	bl	80005f8 <__aeabi_dmul>
 800d11a:	4602      	mov	r2, r0
 800d11c:	460b      	mov	r3, r1
 800d11e:	4630      	mov	r0, r6
 800d120:	4639      	mov	r1, r7
 800d122:	f7f3 f8b3 	bl	800028c <__adddf3>
 800d126:	4606      	mov	r6, r0
 800d128:	460f      	mov	r7, r1
 800d12a:	f7f3 fd15 	bl	8000b58 <__aeabi_d2iz>
 800d12e:	2200      	movs	r2, #0
 800d130:	4682      	mov	sl, r0
 800d132:	2300      	movs	r3, #0
 800d134:	4630      	mov	r0, r6
 800d136:	4639      	mov	r1, r7
 800d138:	f7f3 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800d13c:	b148      	cbz	r0, 800d152 <_dtoa_r+0x162>
 800d13e:	4650      	mov	r0, sl
 800d140:	f7f3 f9f0 	bl	8000524 <__aeabi_i2d>
 800d144:	4632      	mov	r2, r6
 800d146:	463b      	mov	r3, r7
 800d148:	f7f3 fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800d14c:	b908      	cbnz	r0, 800d152 <_dtoa_r+0x162>
 800d14e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d152:	f1ba 0f16 	cmp.w	sl, #22
 800d156:	d859      	bhi.n	800d20c <_dtoa_r+0x21c>
 800d158:	4970      	ldr	r1, [pc, #448]	; (800d31c <_dtoa_r+0x32c>)
 800d15a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d15e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d162:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d166:	f7f3 fcd7 	bl	8000b18 <__aeabi_dcmpgt>
 800d16a:	2800      	cmp	r0, #0
 800d16c:	d050      	beq.n	800d210 <_dtoa_r+0x220>
 800d16e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d172:	2300      	movs	r3, #0
 800d174:	930f      	str	r3, [sp, #60]	; 0x3c
 800d176:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d178:	1b5d      	subs	r5, r3, r5
 800d17a:	f1b5 0801 	subs.w	r8, r5, #1
 800d17e:	bf49      	itett	mi
 800d180:	f1c5 0301 	rsbmi	r3, r5, #1
 800d184:	2300      	movpl	r3, #0
 800d186:	9305      	strmi	r3, [sp, #20]
 800d188:	f04f 0800 	movmi.w	r8, #0
 800d18c:	bf58      	it	pl
 800d18e:	9305      	strpl	r3, [sp, #20]
 800d190:	f1ba 0f00 	cmp.w	sl, #0
 800d194:	db3e      	blt.n	800d214 <_dtoa_r+0x224>
 800d196:	2300      	movs	r3, #0
 800d198:	44d0      	add	r8, sl
 800d19a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d19e:	9307      	str	r3, [sp, #28]
 800d1a0:	9b06      	ldr	r3, [sp, #24]
 800d1a2:	2b09      	cmp	r3, #9
 800d1a4:	f200 8090 	bhi.w	800d2c8 <_dtoa_r+0x2d8>
 800d1a8:	2b05      	cmp	r3, #5
 800d1aa:	bfc4      	itt	gt
 800d1ac:	3b04      	subgt	r3, #4
 800d1ae:	9306      	strgt	r3, [sp, #24]
 800d1b0:	9b06      	ldr	r3, [sp, #24]
 800d1b2:	f1a3 0302 	sub.w	r3, r3, #2
 800d1b6:	bfcc      	ite	gt
 800d1b8:	2500      	movgt	r5, #0
 800d1ba:	2501      	movle	r5, #1
 800d1bc:	2b03      	cmp	r3, #3
 800d1be:	f200 808f 	bhi.w	800d2e0 <_dtoa_r+0x2f0>
 800d1c2:	e8df f003 	tbb	[pc, r3]
 800d1c6:	7f7d      	.short	0x7f7d
 800d1c8:	7131      	.short	0x7131
 800d1ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d1ce:	441d      	add	r5, r3
 800d1d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d1d4:	2820      	cmp	r0, #32
 800d1d6:	dd13      	ble.n	800d200 <_dtoa_r+0x210>
 800d1d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d1dc:	9b00      	ldr	r3, [sp, #0]
 800d1de:	fa08 f800 	lsl.w	r8, r8, r0
 800d1e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d1e6:	fa23 f000 	lsr.w	r0, r3, r0
 800d1ea:	ea48 0000 	orr.w	r0, r8, r0
 800d1ee:	f7f3 f989 	bl	8000504 <__aeabi_ui2d>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	4682      	mov	sl, r0
 800d1f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d1fa:	3d01      	subs	r5, #1
 800d1fc:	9313      	str	r3, [sp, #76]	; 0x4c
 800d1fe:	e772      	b.n	800d0e6 <_dtoa_r+0xf6>
 800d200:	9b00      	ldr	r3, [sp, #0]
 800d202:	f1c0 0020 	rsb	r0, r0, #32
 800d206:	fa03 f000 	lsl.w	r0, r3, r0
 800d20a:	e7f0      	b.n	800d1ee <_dtoa_r+0x1fe>
 800d20c:	2301      	movs	r3, #1
 800d20e:	e7b1      	b.n	800d174 <_dtoa_r+0x184>
 800d210:	900f      	str	r0, [sp, #60]	; 0x3c
 800d212:	e7b0      	b.n	800d176 <_dtoa_r+0x186>
 800d214:	9b05      	ldr	r3, [sp, #20]
 800d216:	eba3 030a 	sub.w	r3, r3, sl
 800d21a:	9305      	str	r3, [sp, #20]
 800d21c:	f1ca 0300 	rsb	r3, sl, #0
 800d220:	9307      	str	r3, [sp, #28]
 800d222:	2300      	movs	r3, #0
 800d224:	930e      	str	r3, [sp, #56]	; 0x38
 800d226:	e7bb      	b.n	800d1a0 <_dtoa_r+0x1b0>
 800d228:	2301      	movs	r3, #1
 800d22a:	930a      	str	r3, [sp, #40]	; 0x28
 800d22c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d22e:	2b00      	cmp	r3, #0
 800d230:	dd59      	ble.n	800d2e6 <_dtoa_r+0x2f6>
 800d232:	9302      	str	r3, [sp, #8]
 800d234:	4699      	mov	r9, r3
 800d236:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d238:	2200      	movs	r2, #0
 800d23a:	6072      	str	r2, [r6, #4]
 800d23c:	2204      	movs	r2, #4
 800d23e:	f102 0014 	add.w	r0, r2, #20
 800d242:	4298      	cmp	r0, r3
 800d244:	6871      	ldr	r1, [r6, #4]
 800d246:	d953      	bls.n	800d2f0 <_dtoa_r+0x300>
 800d248:	4620      	mov	r0, r4
 800d24a:	f000 fe88 	bl	800df5e <_Balloc>
 800d24e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d250:	6030      	str	r0, [r6, #0]
 800d252:	f1b9 0f0e 	cmp.w	r9, #14
 800d256:	f8d3 b000 	ldr.w	fp, [r3]
 800d25a:	f200 80e6 	bhi.w	800d42a <_dtoa_r+0x43a>
 800d25e:	2d00      	cmp	r5, #0
 800d260:	f000 80e3 	beq.w	800d42a <_dtoa_r+0x43a>
 800d264:	ed9d 7b00 	vldr	d7, [sp]
 800d268:	f1ba 0f00 	cmp.w	sl, #0
 800d26c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d270:	dd74      	ble.n	800d35c <_dtoa_r+0x36c>
 800d272:	4a2a      	ldr	r2, [pc, #168]	; (800d31c <_dtoa_r+0x32c>)
 800d274:	f00a 030f 	and.w	r3, sl, #15
 800d278:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d27c:	ed93 7b00 	vldr	d7, [r3]
 800d280:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d284:	06f0      	lsls	r0, r6, #27
 800d286:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d28a:	d565      	bpl.n	800d358 <_dtoa_r+0x368>
 800d28c:	4b24      	ldr	r3, [pc, #144]	; (800d320 <_dtoa_r+0x330>)
 800d28e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d292:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d296:	f7f3 fad9 	bl	800084c <__aeabi_ddiv>
 800d29a:	e9cd 0100 	strd	r0, r1, [sp]
 800d29e:	f006 060f 	and.w	r6, r6, #15
 800d2a2:	2503      	movs	r5, #3
 800d2a4:	4f1e      	ldr	r7, [pc, #120]	; (800d320 <_dtoa_r+0x330>)
 800d2a6:	e04c      	b.n	800d342 <_dtoa_r+0x352>
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	930a      	str	r3, [sp, #40]	; 0x28
 800d2ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2ae:	4453      	add	r3, sl
 800d2b0:	f103 0901 	add.w	r9, r3, #1
 800d2b4:	9302      	str	r3, [sp, #8]
 800d2b6:	464b      	mov	r3, r9
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	bfb8      	it	lt
 800d2bc:	2301      	movlt	r3, #1
 800d2be:	e7ba      	b.n	800d236 <_dtoa_r+0x246>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	e7b2      	b.n	800d22a <_dtoa_r+0x23a>
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	e7f0      	b.n	800d2aa <_dtoa_r+0x2ba>
 800d2c8:	2501      	movs	r5, #1
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	9306      	str	r3, [sp, #24]
 800d2ce:	950a      	str	r5, [sp, #40]	; 0x28
 800d2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d2d4:	9302      	str	r3, [sp, #8]
 800d2d6:	4699      	mov	r9, r3
 800d2d8:	2200      	movs	r2, #0
 800d2da:	2312      	movs	r3, #18
 800d2dc:	920b      	str	r2, [sp, #44]	; 0x2c
 800d2de:	e7aa      	b.n	800d236 <_dtoa_r+0x246>
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	930a      	str	r3, [sp, #40]	; 0x28
 800d2e4:	e7f4      	b.n	800d2d0 <_dtoa_r+0x2e0>
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	9302      	str	r3, [sp, #8]
 800d2ea:	4699      	mov	r9, r3
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	e7f5      	b.n	800d2dc <_dtoa_r+0x2ec>
 800d2f0:	3101      	adds	r1, #1
 800d2f2:	6071      	str	r1, [r6, #4]
 800d2f4:	0052      	lsls	r2, r2, #1
 800d2f6:	e7a2      	b.n	800d23e <_dtoa_r+0x24e>
 800d2f8:	636f4361 	.word	0x636f4361
 800d2fc:	3fd287a7 	.word	0x3fd287a7
 800d300:	8b60c8b3 	.word	0x8b60c8b3
 800d304:	3fc68a28 	.word	0x3fc68a28
 800d308:	509f79fb 	.word	0x509f79fb
 800d30c:	3fd34413 	.word	0x3fd34413
 800d310:	7ff00000 	.word	0x7ff00000
 800d314:	0800febd 	.word	0x0800febd
 800d318:	3ff80000 	.word	0x3ff80000
 800d31c:	0800ff78 	.word	0x0800ff78
 800d320:	0800ff50 	.word	0x0800ff50
 800d324:	0800fee9 	.word	0x0800fee9
 800d328:	07f1      	lsls	r1, r6, #31
 800d32a:	d508      	bpl.n	800d33e <_dtoa_r+0x34e>
 800d32c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d330:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d334:	f7f3 f960 	bl	80005f8 <__aeabi_dmul>
 800d338:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d33c:	3501      	adds	r5, #1
 800d33e:	1076      	asrs	r6, r6, #1
 800d340:	3708      	adds	r7, #8
 800d342:	2e00      	cmp	r6, #0
 800d344:	d1f0      	bne.n	800d328 <_dtoa_r+0x338>
 800d346:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d34a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d34e:	f7f3 fa7d 	bl	800084c <__aeabi_ddiv>
 800d352:	e9cd 0100 	strd	r0, r1, [sp]
 800d356:	e01a      	b.n	800d38e <_dtoa_r+0x39e>
 800d358:	2502      	movs	r5, #2
 800d35a:	e7a3      	b.n	800d2a4 <_dtoa_r+0x2b4>
 800d35c:	f000 80a0 	beq.w	800d4a0 <_dtoa_r+0x4b0>
 800d360:	f1ca 0600 	rsb	r6, sl, #0
 800d364:	4b9f      	ldr	r3, [pc, #636]	; (800d5e4 <_dtoa_r+0x5f4>)
 800d366:	4fa0      	ldr	r7, [pc, #640]	; (800d5e8 <_dtoa_r+0x5f8>)
 800d368:	f006 020f 	and.w	r2, r6, #15
 800d36c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d374:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d378:	f7f3 f93e 	bl	80005f8 <__aeabi_dmul>
 800d37c:	e9cd 0100 	strd	r0, r1, [sp]
 800d380:	1136      	asrs	r6, r6, #4
 800d382:	2300      	movs	r3, #0
 800d384:	2502      	movs	r5, #2
 800d386:	2e00      	cmp	r6, #0
 800d388:	d17f      	bne.n	800d48a <_dtoa_r+0x49a>
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d1e1      	bne.n	800d352 <_dtoa_r+0x362>
 800d38e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d390:	2b00      	cmp	r3, #0
 800d392:	f000 8087 	beq.w	800d4a4 <_dtoa_r+0x4b4>
 800d396:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d39a:	2200      	movs	r2, #0
 800d39c:	4b93      	ldr	r3, [pc, #588]	; (800d5ec <_dtoa_r+0x5fc>)
 800d39e:	4630      	mov	r0, r6
 800d3a0:	4639      	mov	r1, r7
 800d3a2:	f7f3 fb9b 	bl	8000adc <__aeabi_dcmplt>
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	d07c      	beq.n	800d4a4 <_dtoa_r+0x4b4>
 800d3aa:	f1b9 0f00 	cmp.w	r9, #0
 800d3ae:	d079      	beq.n	800d4a4 <_dtoa_r+0x4b4>
 800d3b0:	9b02      	ldr	r3, [sp, #8]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	dd35      	ble.n	800d422 <_dtoa_r+0x432>
 800d3b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d3ba:	9308      	str	r3, [sp, #32]
 800d3bc:	4639      	mov	r1, r7
 800d3be:	2200      	movs	r2, #0
 800d3c0:	4b8b      	ldr	r3, [pc, #556]	; (800d5f0 <_dtoa_r+0x600>)
 800d3c2:	4630      	mov	r0, r6
 800d3c4:	f7f3 f918 	bl	80005f8 <__aeabi_dmul>
 800d3c8:	e9cd 0100 	strd	r0, r1, [sp]
 800d3cc:	9f02      	ldr	r7, [sp, #8]
 800d3ce:	3501      	adds	r5, #1
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	f7f3 f8a7 	bl	8000524 <__aeabi_i2d>
 800d3d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3da:	f7f3 f90d 	bl	80005f8 <__aeabi_dmul>
 800d3de:	2200      	movs	r2, #0
 800d3e0:	4b84      	ldr	r3, [pc, #528]	; (800d5f4 <_dtoa_r+0x604>)
 800d3e2:	f7f2 ff53 	bl	800028c <__adddf3>
 800d3e6:	4605      	mov	r5, r0
 800d3e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d3ec:	2f00      	cmp	r7, #0
 800d3ee:	d15d      	bne.n	800d4ac <_dtoa_r+0x4bc>
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	4b81      	ldr	r3, [pc, #516]	; (800d5f8 <_dtoa_r+0x608>)
 800d3f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3f8:	f7f2 ff46 	bl	8000288 <__aeabi_dsub>
 800d3fc:	462a      	mov	r2, r5
 800d3fe:	4633      	mov	r3, r6
 800d400:	e9cd 0100 	strd	r0, r1, [sp]
 800d404:	f7f3 fb88 	bl	8000b18 <__aeabi_dcmpgt>
 800d408:	2800      	cmp	r0, #0
 800d40a:	f040 8288 	bne.w	800d91e <_dtoa_r+0x92e>
 800d40e:	462a      	mov	r2, r5
 800d410:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d414:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d418:	f7f3 fb60 	bl	8000adc <__aeabi_dcmplt>
 800d41c:	2800      	cmp	r0, #0
 800d41e:	f040 827c 	bne.w	800d91a <_dtoa_r+0x92a>
 800d422:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d426:	e9cd 2300 	strd	r2, r3, [sp]
 800d42a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f2c0 8150 	blt.w	800d6d2 <_dtoa_r+0x6e2>
 800d432:	f1ba 0f0e 	cmp.w	sl, #14
 800d436:	f300 814c 	bgt.w	800d6d2 <_dtoa_r+0x6e2>
 800d43a:	4b6a      	ldr	r3, [pc, #424]	; (800d5e4 <_dtoa_r+0x5f4>)
 800d43c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d440:	ed93 7b00 	vldr	d7, [r3]
 800d444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d446:	2b00      	cmp	r3, #0
 800d448:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d44c:	f280 80d8 	bge.w	800d600 <_dtoa_r+0x610>
 800d450:	f1b9 0f00 	cmp.w	r9, #0
 800d454:	f300 80d4 	bgt.w	800d600 <_dtoa_r+0x610>
 800d458:	f040 825e 	bne.w	800d918 <_dtoa_r+0x928>
 800d45c:	2200      	movs	r2, #0
 800d45e:	4b66      	ldr	r3, [pc, #408]	; (800d5f8 <_dtoa_r+0x608>)
 800d460:	ec51 0b17 	vmov	r0, r1, d7
 800d464:	f7f3 f8c8 	bl	80005f8 <__aeabi_dmul>
 800d468:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d46c:	f7f3 fb4a 	bl	8000b04 <__aeabi_dcmpge>
 800d470:	464f      	mov	r7, r9
 800d472:	464e      	mov	r6, r9
 800d474:	2800      	cmp	r0, #0
 800d476:	f040 8234 	bne.w	800d8e2 <_dtoa_r+0x8f2>
 800d47a:	2331      	movs	r3, #49	; 0x31
 800d47c:	f10b 0501 	add.w	r5, fp, #1
 800d480:	f88b 3000 	strb.w	r3, [fp]
 800d484:	f10a 0a01 	add.w	sl, sl, #1
 800d488:	e22f      	b.n	800d8ea <_dtoa_r+0x8fa>
 800d48a:	07f2      	lsls	r2, r6, #31
 800d48c:	d505      	bpl.n	800d49a <_dtoa_r+0x4aa>
 800d48e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d492:	f7f3 f8b1 	bl	80005f8 <__aeabi_dmul>
 800d496:	3501      	adds	r5, #1
 800d498:	2301      	movs	r3, #1
 800d49a:	1076      	asrs	r6, r6, #1
 800d49c:	3708      	adds	r7, #8
 800d49e:	e772      	b.n	800d386 <_dtoa_r+0x396>
 800d4a0:	2502      	movs	r5, #2
 800d4a2:	e774      	b.n	800d38e <_dtoa_r+0x39e>
 800d4a4:	f8cd a020 	str.w	sl, [sp, #32]
 800d4a8:	464f      	mov	r7, r9
 800d4aa:	e791      	b.n	800d3d0 <_dtoa_r+0x3e0>
 800d4ac:	4b4d      	ldr	r3, [pc, #308]	; (800d5e4 <_dtoa_r+0x5f4>)
 800d4ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d4b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d4b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d047      	beq.n	800d54c <_dtoa_r+0x55c>
 800d4bc:	4602      	mov	r2, r0
 800d4be:	460b      	mov	r3, r1
 800d4c0:	2000      	movs	r0, #0
 800d4c2:	494e      	ldr	r1, [pc, #312]	; (800d5fc <_dtoa_r+0x60c>)
 800d4c4:	f7f3 f9c2 	bl	800084c <__aeabi_ddiv>
 800d4c8:	462a      	mov	r2, r5
 800d4ca:	4633      	mov	r3, r6
 800d4cc:	f7f2 fedc 	bl	8000288 <__aeabi_dsub>
 800d4d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d4d4:	465d      	mov	r5, fp
 800d4d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d4da:	f7f3 fb3d 	bl	8000b58 <__aeabi_d2iz>
 800d4de:	4606      	mov	r6, r0
 800d4e0:	f7f3 f820 	bl	8000524 <__aeabi_i2d>
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	460b      	mov	r3, r1
 800d4e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d4ec:	f7f2 fecc 	bl	8000288 <__aeabi_dsub>
 800d4f0:	3630      	adds	r6, #48	; 0x30
 800d4f2:	f805 6b01 	strb.w	r6, [r5], #1
 800d4f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d4fa:	e9cd 0100 	strd	r0, r1, [sp]
 800d4fe:	f7f3 faed 	bl	8000adc <__aeabi_dcmplt>
 800d502:	2800      	cmp	r0, #0
 800d504:	d163      	bne.n	800d5ce <_dtoa_r+0x5de>
 800d506:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d50a:	2000      	movs	r0, #0
 800d50c:	4937      	ldr	r1, [pc, #220]	; (800d5ec <_dtoa_r+0x5fc>)
 800d50e:	f7f2 febb 	bl	8000288 <__aeabi_dsub>
 800d512:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d516:	f7f3 fae1 	bl	8000adc <__aeabi_dcmplt>
 800d51a:	2800      	cmp	r0, #0
 800d51c:	f040 80b7 	bne.w	800d68e <_dtoa_r+0x69e>
 800d520:	eba5 030b 	sub.w	r3, r5, fp
 800d524:	429f      	cmp	r7, r3
 800d526:	f77f af7c 	ble.w	800d422 <_dtoa_r+0x432>
 800d52a:	2200      	movs	r2, #0
 800d52c:	4b30      	ldr	r3, [pc, #192]	; (800d5f0 <_dtoa_r+0x600>)
 800d52e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d532:	f7f3 f861 	bl	80005f8 <__aeabi_dmul>
 800d536:	2200      	movs	r2, #0
 800d538:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d53c:	4b2c      	ldr	r3, [pc, #176]	; (800d5f0 <_dtoa_r+0x600>)
 800d53e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d542:	f7f3 f859 	bl	80005f8 <__aeabi_dmul>
 800d546:	e9cd 0100 	strd	r0, r1, [sp]
 800d54a:	e7c4      	b.n	800d4d6 <_dtoa_r+0x4e6>
 800d54c:	462a      	mov	r2, r5
 800d54e:	4633      	mov	r3, r6
 800d550:	f7f3 f852 	bl	80005f8 <__aeabi_dmul>
 800d554:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d558:	eb0b 0507 	add.w	r5, fp, r7
 800d55c:	465e      	mov	r6, fp
 800d55e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d562:	f7f3 faf9 	bl	8000b58 <__aeabi_d2iz>
 800d566:	4607      	mov	r7, r0
 800d568:	f7f2 ffdc 	bl	8000524 <__aeabi_i2d>
 800d56c:	3730      	adds	r7, #48	; 0x30
 800d56e:	4602      	mov	r2, r0
 800d570:	460b      	mov	r3, r1
 800d572:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d576:	f7f2 fe87 	bl	8000288 <__aeabi_dsub>
 800d57a:	f806 7b01 	strb.w	r7, [r6], #1
 800d57e:	42ae      	cmp	r6, r5
 800d580:	e9cd 0100 	strd	r0, r1, [sp]
 800d584:	f04f 0200 	mov.w	r2, #0
 800d588:	d126      	bne.n	800d5d8 <_dtoa_r+0x5e8>
 800d58a:	4b1c      	ldr	r3, [pc, #112]	; (800d5fc <_dtoa_r+0x60c>)
 800d58c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d590:	f7f2 fe7c 	bl	800028c <__adddf3>
 800d594:	4602      	mov	r2, r0
 800d596:	460b      	mov	r3, r1
 800d598:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d59c:	f7f3 fabc 	bl	8000b18 <__aeabi_dcmpgt>
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d174      	bne.n	800d68e <_dtoa_r+0x69e>
 800d5a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	4914      	ldr	r1, [pc, #80]	; (800d5fc <_dtoa_r+0x60c>)
 800d5ac:	f7f2 fe6c 	bl	8000288 <__aeabi_dsub>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5b8:	f7f3 fa90 	bl	8000adc <__aeabi_dcmplt>
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	f43f af30 	beq.w	800d422 <_dtoa_r+0x432>
 800d5c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d5c6:	2b30      	cmp	r3, #48	; 0x30
 800d5c8:	f105 32ff 	add.w	r2, r5, #4294967295
 800d5cc:	d002      	beq.n	800d5d4 <_dtoa_r+0x5e4>
 800d5ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d5d2:	e04a      	b.n	800d66a <_dtoa_r+0x67a>
 800d5d4:	4615      	mov	r5, r2
 800d5d6:	e7f4      	b.n	800d5c2 <_dtoa_r+0x5d2>
 800d5d8:	4b05      	ldr	r3, [pc, #20]	; (800d5f0 <_dtoa_r+0x600>)
 800d5da:	f7f3 f80d 	bl	80005f8 <__aeabi_dmul>
 800d5de:	e9cd 0100 	strd	r0, r1, [sp]
 800d5e2:	e7bc      	b.n	800d55e <_dtoa_r+0x56e>
 800d5e4:	0800ff78 	.word	0x0800ff78
 800d5e8:	0800ff50 	.word	0x0800ff50
 800d5ec:	3ff00000 	.word	0x3ff00000
 800d5f0:	40240000 	.word	0x40240000
 800d5f4:	401c0000 	.word	0x401c0000
 800d5f8:	40140000 	.word	0x40140000
 800d5fc:	3fe00000 	.word	0x3fe00000
 800d600:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d604:	465d      	mov	r5, fp
 800d606:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d60a:	4630      	mov	r0, r6
 800d60c:	4639      	mov	r1, r7
 800d60e:	f7f3 f91d 	bl	800084c <__aeabi_ddiv>
 800d612:	f7f3 faa1 	bl	8000b58 <__aeabi_d2iz>
 800d616:	4680      	mov	r8, r0
 800d618:	f7f2 ff84 	bl	8000524 <__aeabi_i2d>
 800d61c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d620:	f7f2 ffea 	bl	80005f8 <__aeabi_dmul>
 800d624:	4602      	mov	r2, r0
 800d626:	460b      	mov	r3, r1
 800d628:	4630      	mov	r0, r6
 800d62a:	4639      	mov	r1, r7
 800d62c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d630:	f7f2 fe2a 	bl	8000288 <__aeabi_dsub>
 800d634:	f805 6b01 	strb.w	r6, [r5], #1
 800d638:	eba5 060b 	sub.w	r6, r5, fp
 800d63c:	45b1      	cmp	r9, r6
 800d63e:	4602      	mov	r2, r0
 800d640:	460b      	mov	r3, r1
 800d642:	d139      	bne.n	800d6b8 <_dtoa_r+0x6c8>
 800d644:	f7f2 fe22 	bl	800028c <__adddf3>
 800d648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d64c:	4606      	mov	r6, r0
 800d64e:	460f      	mov	r7, r1
 800d650:	f7f3 fa62 	bl	8000b18 <__aeabi_dcmpgt>
 800d654:	b9c8      	cbnz	r0, 800d68a <_dtoa_r+0x69a>
 800d656:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d65a:	4630      	mov	r0, r6
 800d65c:	4639      	mov	r1, r7
 800d65e:	f7f3 fa33 	bl	8000ac8 <__aeabi_dcmpeq>
 800d662:	b110      	cbz	r0, 800d66a <_dtoa_r+0x67a>
 800d664:	f018 0f01 	tst.w	r8, #1
 800d668:	d10f      	bne.n	800d68a <_dtoa_r+0x69a>
 800d66a:	9904      	ldr	r1, [sp, #16]
 800d66c:	4620      	mov	r0, r4
 800d66e:	f000 fcaa 	bl	800dfc6 <_Bfree>
 800d672:	2300      	movs	r3, #0
 800d674:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d676:	702b      	strb	r3, [r5, #0]
 800d678:	f10a 0301 	add.w	r3, sl, #1
 800d67c:	6013      	str	r3, [r2, #0]
 800d67e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d680:	2b00      	cmp	r3, #0
 800d682:	f000 8241 	beq.w	800db08 <_dtoa_r+0xb18>
 800d686:	601d      	str	r5, [r3, #0]
 800d688:	e23e      	b.n	800db08 <_dtoa_r+0xb18>
 800d68a:	f8cd a020 	str.w	sl, [sp, #32]
 800d68e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d692:	2a39      	cmp	r2, #57	; 0x39
 800d694:	f105 33ff 	add.w	r3, r5, #4294967295
 800d698:	d108      	bne.n	800d6ac <_dtoa_r+0x6bc>
 800d69a:	459b      	cmp	fp, r3
 800d69c:	d10a      	bne.n	800d6b4 <_dtoa_r+0x6c4>
 800d69e:	9b08      	ldr	r3, [sp, #32]
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	9308      	str	r3, [sp, #32]
 800d6a4:	2330      	movs	r3, #48	; 0x30
 800d6a6:	f88b 3000 	strb.w	r3, [fp]
 800d6aa:	465b      	mov	r3, fp
 800d6ac:	781a      	ldrb	r2, [r3, #0]
 800d6ae:	3201      	adds	r2, #1
 800d6b0:	701a      	strb	r2, [r3, #0]
 800d6b2:	e78c      	b.n	800d5ce <_dtoa_r+0x5de>
 800d6b4:	461d      	mov	r5, r3
 800d6b6:	e7ea      	b.n	800d68e <_dtoa_r+0x69e>
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	4b9b      	ldr	r3, [pc, #620]	; (800d928 <_dtoa_r+0x938>)
 800d6bc:	f7f2 ff9c 	bl	80005f8 <__aeabi_dmul>
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	4606      	mov	r6, r0
 800d6c6:	460f      	mov	r7, r1
 800d6c8:	f7f3 f9fe 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	d09a      	beq.n	800d606 <_dtoa_r+0x616>
 800d6d0:	e7cb      	b.n	800d66a <_dtoa_r+0x67a>
 800d6d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6d4:	2a00      	cmp	r2, #0
 800d6d6:	f000 808b 	beq.w	800d7f0 <_dtoa_r+0x800>
 800d6da:	9a06      	ldr	r2, [sp, #24]
 800d6dc:	2a01      	cmp	r2, #1
 800d6de:	dc6e      	bgt.n	800d7be <_dtoa_r+0x7ce>
 800d6e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d6e2:	2a00      	cmp	r2, #0
 800d6e4:	d067      	beq.n	800d7b6 <_dtoa_r+0x7c6>
 800d6e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d6ea:	9f07      	ldr	r7, [sp, #28]
 800d6ec:	9d05      	ldr	r5, [sp, #20]
 800d6ee:	9a05      	ldr	r2, [sp, #20]
 800d6f0:	2101      	movs	r1, #1
 800d6f2:	441a      	add	r2, r3
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	9205      	str	r2, [sp, #20]
 800d6f8:	4498      	add	r8, r3
 800d6fa:	f000 fd04 	bl	800e106 <__i2b>
 800d6fe:	4606      	mov	r6, r0
 800d700:	2d00      	cmp	r5, #0
 800d702:	dd0c      	ble.n	800d71e <_dtoa_r+0x72e>
 800d704:	f1b8 0f00 	cmp.w	r8, #0
 800d708:	dd09      	ble.n	800d71e <_dtoa_r+0x72e>
 800d70a:	4545      	cmp	r5, r8
 800d70c:	9a05      	ldr	r2, [sp, #20]
 800d70e:	462b      	mov	r3, r5
 800d710:	bfa8      	it	ge
 800d712:	4643      	movge	r3, r8
 800d714:	1ad2      	subs	r2, r2, r3
 800d716:	9205      	str	r2, [sp, #20]
 800d718:	1aed      	subs	r5, r5, r3
 800d71a:	eba8 0803 	sub.w	r8, r8, r3
 800d71e:	9b07      	ldr	r3, [sp, #28]
 800d720:	b1eb      	cbz	r3, 800d75e <_dtoa_r+0x76e>
 800d722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d724:	2b00      	cmp	r3, #0
 800d726:	d067      	beq.n	800d7f8 <_dtoa_r+0x808>
 800d728:	b18f      	cbz	r7, 800d74e <_dtoa_r+0x75e>
 800d72a:	4631      	mov	r1, r6
 800d72c:	463a      	mov	r2, r7
 800d72e:	4620      	mov	r0, r4
 800d730:	f000 fd88 	bl	800e244 <__pow5mult>
 800d734:	9a04      	ldr	r2, [sp, #16]
 800d736:	4601      	mov	r1, r0
 800d738:	4606      	mov	r6, r0
 800d73a:	4620      	mov	r0, r4
 800d73c:	f000 fcec 	bl	800e118 <__multiply>
 800d740:	9904      	ldr	r1, [sp, #16]
 800d742:	9008      	str	r0, [sp, #32]
 800d744:	4620      	mov	r0, r4
 800d746:	f000 fc3e 	bl	800dfc6 <_Bfree>
 800d74a:	9b08      	ldr	r3, [sp, #32]
 800d74c:	9304      	str	r3, [sp, #16]
 800d74e:	9b07      	ldr	r3, [sp, #28]
 800d750:	1bda      	subs	r2, r3, r7
 800d752:	d004      	beq.n	800d75e <_dtoa_r+0x76e>
 800d754:	9904      	ldr	r1, [sp, #16]
 800d756:	4620      	mov	r0, r4
 800d758:	f000 fd74 	bl	800e244 <__pow5mult>
 800d75c:	9004      	str	r0, [sp, #16]
 800d75e:	2101      	movs	r1, #1
 800d760:	4620      	mov	r0, r4
 800d762:	f000 fcd0 	bl	800e106 <__i2b>
 800d766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d768:	4607      	mov	r7, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	f000 81d0 	beq.w	800db10 <_dtoa_r+0xb20>
 800d770:	461a      	mov	r2, r3
 800d772:	4601      	mov	r1, r0
 800d774:	4620      	mov	r0, r4
 800d776:	f000 fd65 	bl	800e244 <__pow5mult>
 800d77a:	9b06      	ldr	r3, [sp, #24]
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	4607      	mov	r7, r0
 800d780:	dc40      	bgt.n	800d804 <_dtoa_r+0x814>
 800d782:	9b00      	ldr	r3, [sp, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d139      	bne.n	800d7fc <_dtoa_r+0x80c>
 800d788:	9b01      	ldr	r3, [sp, #4]
 800d78a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d136      	bne.n	800d800 <_dtoa_r+0x810>
 800d792:	9b01      	ldr	r3, [sp, #4]
 800d794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d798:	0d1b      	lsrs	r3, r3, #20
 800d79a:	051b      	lsls	r3, r3, #20
 800d79c:	b12b      	cbz	r3, 800d7aa <_dtoa_r+0x7ba>
 800d79e:	9b05      	ldr	r3, [sp, #20]
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	9305      	str	r3, [sp, #20]
 800d7a4:	f108 0801 	add.w	r8, r8, #1
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	9307      	str	r3, [sp, #28]
 800d7ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d12a      	bne.n	800d808 <_dtoa_r+0x818>
 800d7b2:	2001      	movs	r0, #1
 800d7b4:	e030      	b.n	800d818 <_dtoa_r+0x828>
 800d7b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d7b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d7bc:	e795      	b.n	800d6ea <_dtoa_r+0x6fa>
 800d7be:	9b07      	ldr	r3, [sp, #28]
 800d7c0:	f109 37ff 	add.w	r7, r9, #4294967295
 800d7c4:	42bb      	cmp	r3, r7
 800d7c6:	bfbf      	itttt	lt
 800d7c8:	9b07      	ldrlt	r3, [sp, #28]
 800d7ca:	9707      	strlt	r7, [sp, #28]
 800d7cc:	1afa      	sublt	r2, r7, r3
 800d7ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d7d0:	bfbb      	ittet	lt
 800d7d2:	189b      	addlt	r3, r3, r2
 800d7d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d7d6:	1bdf      	subge	r7, r3, r7
 800d7d8:	2700      	movlt	r7, #0
 800d7da:	f1b9 0f00 	cmp.w	r9, #0
 800d7de:	bfb5      	itete	lt
 800d7e0:	9b05      	ldrlt	r3, [sp, #20]
 800d7e2:	9d05      	ldrge	r5, [sp, #20]
 800d7e4:	eba3 0509 	sublt.w	r5, r3, r9
 800d7e8:	464b      	movge	r3, r9
 800d7ea:	bfb8      	it	lt
 800d7ec:	2300      	movlt	r3, #0
 800d7ee:	e77e      	b.n	800d6ee <_dtoa_r+0x6fe>
 800d7f0:	9f07      	ldr	r7, [sp, #28]
 800d7f2:	9d05      	ldr	r5, [sp, #20]
 800d7f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d7f6:	e783      	b.n	800d700 <_dtoa_r+0x710>
 800d7f8:	9a07      	ldr	r2, [sp, #28]
 800d7fa:	e7ab      	b.n	800d754 <_dtoa_r+0x764>
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	e7d4      	b.n	800d7aa <_dtoa_r+0x7ba>
 800d800:	9b00      	ldr	r3, [sp, #0]
 800d802:	e7d2      	b.n	800d7aa <_dtoa_r+0x7ba>
 800d804:	2300      	movs	r3, #0
 800d806:	9307      	str	r3, [sp, #28]
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d80e:	6918      	ldr	r0, [r3, #16]
 800d810:	f000 fc2b 	bl	800e06a <__hi0bits>
 800d814:	f1c0 0020 	rsb	r0, r0, #32
 800d818:	4440      	add	r0, r8
 800d81a:	f010 001f 	ands.w	r0, r0, #31
 800d81e:	d047      	beq.n	800d8b0 <_dtoa_r+0x8c0>
 800d820:	f1c0 0320 	rsb	r3, r0, #32
 800d824:	2b04      	cmp	r3, #4
 800d826:	dd3b      	ble.n	800d8a0 <_dtoa_r+0x8b0>
 800d828:	9b05      	ldr	r3, [sp, #20]
 800d82a:	f1c0 001c 	rsb	r0, r0, #28
 800d82e:	4403      	add	r3, r0
 800d830:	9305      	str	r3, [sp, #20]
 800d832:	4405      	add	r5, r0
 800d834:	4480      	add	r8, r0
 800d836:	9b05      	ldr	r3, [sp, #20]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	dd05      	ble.n	800d848 <_dtoa_r+0x858>
 800d83c:	461a      	mov	r2, r3
 800d83e:	9904      	ldr	r1, [sp, #16]
 800d840:	4620      	mov	r0, r4
 800d842:	f000 fd4d 	bl	800e2e0 <__lshift>
 800d846:	9004      	str	r0, [sp, #16]
 800d848:	f1b8 0f00 	cmp.w	r8, #0
 800d84c:	dd05      	ble.n	800d85a <_dtoa_r+0x86a>
 800d84e:	4639      	mov	r1, r7
 800d850:	4642      	mov	r2, r8
 800d852:	4620      	mov	r0, r4
 800d854:	f000 fd44 	bl	800e2e0 <__lshift>
 800d858:	4607      	mov	r7, r0
 800d85a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d85c:	b353      	cbz	r3, 800d8b4 <_dtoa_r+0x8c4>
 800d85e:	4639      	mov	r1, r7
 800d860:	9804      	ldr	r0, [sp, #16]
 800d862:	f000 fd91 	bl	800e388 <__mcmp>
 800d866:	2800      	cmp	r0, #0
 800d868:	da24      	bge.n	800d8b4 <_dtoa_r+0x8c4>
 800d86a:	2300      	movs	r3, #0
 800d86c:	220a      	movs	r2, #10
 800d86e:	9904      	ldr	r1, [sp, #16]
 800d870:	4620      	mov	r0, r4
 800d872:	f000 fbbf 	bl	800dff4 <__multadd>
 800d876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d878:	9004      	str	r0, [sp, #16]
 800d87a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d87e:	2b00      	cmp	r3, #0
 800d880:	f000 814d 	beq.w	800db1e <_dtoa_r+0xb2e>
 800d884:	2300      	movs	r3, #0
 800d886:	4631      	mov	r1, r6
 800d888:	220a      	movs	r2, #10
 800d88a:	4620      	mov	r0, r4
 800d88c:	f000 fbb2 	bl	800dff4 <__multadd>
 800d890:	9b02      	ldr	r3, [sp, #8]
 800d892:	2b00      	cmp	r3, #0
 800d894:	4606      	mov	r6, r0
 800d896:	dc4f      	bgt.n	800d938 <_dtoa_r+0x948>
 800d898:	9b06      	ldr	r3, [sp, #24]
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	dd4c      	ble.n	800d938 <_dtoa_r+0x948>
 800d89e:	e011      	b.n	800d8c4 <_dtoa_r+0x8d4>
 800d8a0:	d0c9      	beq.n	800d836 <_dtoa_r+0x846>
 800d8a2:	9a05      	ldr	r2, [sp, #20]
 800d8a4:	331c      	adds	r3, #28
 800d8a6:	441a      	add	r2, r3
 800d8a8:	9205      	str	r2, [sp, #20]
 800d8aa:	441d      	add	r5, r3
 800d8ac:	4498      	add	r8, r3
 800d8ae:	e7c2      	b.n	800d836 <_dtoa_r+0x846>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	e7f6      	b.n	800d8a2 <_dtoa_r+0x8b2>
 800d8b4:	f1b9 0f00 	cmp.w	r9, #0
 800d8b8:	dc38      	bgt.n	800d92c <_dtoa_r+0x93c>
 800d8ba:	9b06      	ldr	r3, [sp, #24]
 800d8bc:	2b02      	cmp	r3, #2
 800d8be:	dd35      	ble.n	800d92c <_dtoa_r+0x93c>
 800d8c0:	f8cd 9008 	str.w	r9, [sp, #8]
 800d8c4:	9b02      	ldr	r3, [sp, #8]
 800d8c6:	b963      	cbnz	r3, 800d8e2 <_dtoa_r+0x8f2>
 800d8c8:	4639      	mov	r1, r7
 800d8ca:	2205      	movs	r2, #5
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	f000 fb91 	bl	800dff4 <__multadd>
 800d8d2:	4601      	mov	r1, r0
 800d8d4:	4607      	mov	r7, r0
 800d8d6:	9804      	ldr	r0, [sp, #16]
 800d8d8:	f000 fd56 	bl	800e388 <__mcmp>
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	f73f adcc 	bgt.w	800d47a <_dtoa_r+0x48a>
 800d8e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8e4:	465d      	mov	r5, fp
 800d8e6:	ea6f 0a03 	mvn.w	sl, r3
 800d8ea:	f04f 0900 	mov.w	r9, #0
 800d8ee:	4639      	mov	r1, r7
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	f000 fb68 	bl	800dfc6 <_Bfree>
 800d8f6:	2e00      	cmp	r6, #0
 800d8f8:	f43f aeb7 	beq.w	800d66a <_dtoa_r+0x67a>
 800d8fc:	f1b9 0f00 	cmp.w	r9, #0
 800d900:	d005      	beq.n	800d90e <_dtoa_r+0x91e>
 800d902:	45b1      	cmp	r9, r6
 800d904:	d003      	beq.n	800d90e <_dtoa_r+0x91e>
 800d906:	4649      	mov	r1, r9
 800d908:	4620      	mov	r0, r4
 800d90a:	f000 fb5c 	bl	800dfc6 <_Bfree>
 800d90e:	4631      	mov	r1, r6
 800d910:	4620      	mov	r0, r4
 800d912:	f000 fb58 	bl	800dfc6 <_Bfree>
 800d916:	e6a8      	b.n	800d66a <_dtoa_r+0x67a>
 800d918:	2700      	movs	r7, #0
 800d91a:	463e      	mov	r6, r7
 800d91c:	e7e1      	b.n	800d8e2 <_dtoa_r+0x8f2>
 800d91e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d922:	463e      	mov	r6, r7
 800d924:	e5a9      	b.n	800d47a <_dtoa_r+0x48a>
 800d926:	bf00      	nop
 800d928:	40240000 	.word	0x40240000
 800d92c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d92e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d932:	2b00      	cmp	r3, #0
 800d934:	f000 80fa 	beq.w	800db2c <_dtoa_r+0xb3c>
 800d938:	2d00      	cmp	r5, #0
 800d93a:	dd05      	ble.n	800d948 <_dtoa_r+0x958>
 800d93c:	4631      	mov	r1, r6
 800d93e:	462a      	mov	r2, r5
 800d940:	4620      	mov	r0, r4
 800d942:	f000 fccd 	bl	800e2e0 <__lshift>
 800d946:	4606      	mov	r6, r0
 800d948:	9b07      	ldr	r3, [sp, #28]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d04c      	beq.n	800d9e8 <_dtoa_r+0x9f8>
 800d94e:	6871      	ldr	r1, [r6, #4]
 800d950:	4620      	mov	r0, r4
 800d952:	f000 fb04 	bl	800df5e <_Balloc>
 800d956:	6932      	ldr	r2, [r6, #16]
 800d958:	3202      	adds	r2, #2
 800d95a:	4605      	mov	r5, r0
 800d95c:	0092      	lsls	r2, r2, #2
 800d95e:	f106 010c 	add.w	r1, r6, #12
 800d962:	300c      	adds	r0, #12
 800d964:	f000 faf0 	bl	800df48 <memcpy>
 800d968:	2201      	movs	r2, #1
 800d96a:	4629      	mov	r1, r5
 800d96c:	4620      	mov	r0, r4
 800d96e:	f000 fcb7 	bl	800e2e0 <__lshift>
 800d972:	9b00      	ldr	r3, [sp, #0]
 800d974:	f8cd b014 	str.w	fp, [sp, #20]
 800d978:	f003 0301 	and.w	r3, r3, #1
 800d97c:	46b1      	mov	r9, r6
 800d97e:	9307      	str	r3, [sp, #28]
 800d980:	4606      	mov	r6, r0
 800d982:	4639      	mov	r1, r7
 800d984:	9804      	ldr	r0, [sp, #16]
 800d986:	f7ff faa5 	bl	800ced4 <quorem>
 800d98a:	4649      	mov	r1, r9
 800d98c:	4605      	mov	r5, r0
 800d98e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d992:	9804      	ldr	r0, [sp, #16]
 800d994:	f000 fcf8 	bl	800e388 <__mcmp>
 800d998:	4632      	mov	r2, r6
 800d99a:	9000      	str	r0, [sp, #0]
 800d99c:	4639      	mov	r1, r7
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f000 fd0c 	bl	800e3bc <__mdiff>
 800d9a4:	68c3      	ldr	r3, [r0, #12]
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	bb03      	cbnz	r3, 800d9ec <_dtoa_r+0x9fc>
 800d9aa:	4601      	mov	r1, r0
 800d9ac:	9008      	str	r0, [sp, #32]
 800d9ae:	9804      	ldr	r0, [sp, #16]
 800d9b0:	f000 fcea 	bl	800e388 <__mcmp>
 800d9b4:	9a08      	ldr	r2, [sp, #32]
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	4611      	mov	r1, r2
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	9308      	str	r3, [sp, #32]
 800d9be:	f000 fb02 	bl	800dfc6 <_Bfree>
 800d9c2:	9b08      	ldr	r3, [sp, #32]
 800d9c4:	b9a3      	cbnz	r3, 800d9f0 <_dtoa_r+0xa00>
 800d9c6:	9a06      	ldr	r2, [sp, #24]
 800d9c8:	b992      	cbnz	r2, 800d9f0 <_dtoa_r+0xa00>
 800d9ca:	9a07      	ldr	r2, [sp, #28]
 800d9cc:	b982      	cbnz	r2, 800d9f0 <_dtoa_r+0xa00>
 800d9ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d9d2:	d029      	beq.n	800da28 <_dtoa_r+0xa38>
 800d9d4:	9b00      	ldr	r3, [sp, #0]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	dd01      	ble.n	800d9de <_dtoa_r+0x9ee>
 800d9da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d9de:	9b05      	ldr	r3, [sp, #20]
 800d9e0:	1c5d      	adds	r5, r3, #1
 800d9e2:	f883 8000 	strb.w	r8, [r3]
 800d9e6:	e782      	b.n	800d8ee <_dtoa_r+0x8fe>
 800d9e8:	4630      	mov	r0, r6
 800d9ea:	e7c2      	b.n	800d972 <_dtoa_r+0x982>
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	e7e3      	b.n	800d9b8 <_dtoa_r+0x9c8>
 800d9f0:	9a00      	ldr	r2, [sp, #0]
 800d9f2:	2a00      	cmp	r2, #0
 800d9f4:	db04      	blt.n	800da00 <_dtoa_r+0xa10>
 800d9f6:	d125      	bne.n	800da44 <_dtoa_r+0xa54>
 800d9f8:	9a06      	ldr	r2, [sp, #24]
 800d9fa:	bb1a      	cbnz	r2, 800da44 <_dtoa_r+0xa54>
 800d9fc:	9a07      	ldr	r2, [sp, #28]
 800d9fe:	bb0a      	cbnz	r2, 800da44 <_dtoa_r+0xa54>
 800da00:	2b00      	cmp	r3, #0
 800da02:	ddec      	ble.n	800d9de <_dtoa_r+0x9ee>
 800da04:	2201      	movs	r2, #1
 800da06:	9904      	ldr	r1, [sp, #16]
 800da08:	4620      	mov	r0, r4
 800da0a:	f000 fc69 	bl	800e2e0 <__lshift>
 800da0e:	4639      	mov	r1, r7
 800da10:	9004      	str	r0, [sp, #16]
 800da12:	f000 fcb9 	bl	800e388 <__mcmp>
 800da16:	2800      	cmp	r0, #0
 800da18:	dc03      	bgt.n	800da22 <_dtoa_r+0xa32>
 800da1a:	d1e0      	bne.n	800d9de <_dtoa_r+0x9ee>
 800da1c:	f018 0f01 	tst.w	r8, #1
 800da20:	d0dd      	beq.n	800d9de <_dtoa_r+0x9ee>
 800da22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800da26:	d1d8      	bne.n	800d9da <_dtoa_r+0x9ea>
 800da28:	9b05      	ldr	r3, [sp, #20]
 800da2a:	9a05      	ldr	r2, [sp, #20]
 800da2c:	1c5d      	adds	r5, r3, #1
 800da2e:	2339      	movs	r3, #57	; 0x39
 800da30:	7013      	strb	r3, [r2, #0]
 800da32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800da36:	2b39      	cmp	r3, #57	; 0x39
 800da38:	f105 32ff 	add.w	r2, r5, #4294967295
 800da3c:	d04f      	beq.n	800dade <_dtoa_r+0xaee>
 800da3e:	3301      	adds	r3, #1
 800da40:	7013      	strb	r3, [r2, #0]
 800da42:	e754      	b.n	800d8ee <_dtoa_r+0x8fe>
 800da44:	9a05      	ldr	r2, [sp, #20]
 800da46:	2b00      	cmp	r3, #0
 800da48:	f102 0501 	add.w	r5, r2, #1
 800da4c:	dd06      	ble.n	800da5c <_dtoa_r+0xa6c>
 800da4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800da52:	d0e9      	beq.n	800da28 <_dtoa_r+0xa38>
 800da54:	f108 0801 	add.w	r8, r8, #1
 800da58:	9b05      	ldr	r3, [sp, #20]
 800da5a:	e7c2      	b.n	800d9e2 <_dtoa_r+0x9f2>
 800da5c:	9a02      	ldr	r2, [sp, #8]
 800da5e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800da62:	eba5 030b 	sub.w	r3, r5, fp
 800da66:	4293      	cmp	r3, r2
 800da68:	d021      	beq.n	800daae <_dtoa_r+0xabe>
 800da6a:	2300      	movs	r3, #0
 800da6c:	220a      	movs	r2, #10
 800da6e:	9904      	ldr	r1, [sp, #16]
 800da70:	4620      	mov	r0, r4
 800da72:	f000 fabf 	bl	800dff4 <__multadd>
 800da76:	45b1      	cmp	r9, r6
 800da78:	9004      	str	r0, [sp, #16]
 800da7a:	f04f 0300 	mov.w	r3, #0
 800da7e:	f04f 020a 	mov.w	r2, #10
 800da82:	4649      	mov	r1, r9
 800da84:	4620      	mov	r0, r4
 800da86:	d105      	bne.n	800da94 <_dtoa_r+0xaa4>
 800da88:	f000 fab4 	bl	800dff4 <__multadd>
 800da8c:	4681      	mov	r9, r0
 800da8e:	4606      	mov	r6, r0
 800da90:	9505      	str	r5, [sp, #20]
 800da92:	e776      	b.n	800d982 <_dtoa_r+0x992>
 800da94:	f000 faae 	bl	800dff4 <__multadd>
 800da98:	4631      	mov	r1, r6
 800da9a:	4681      	mov	r9, r0
 800da9c:	2300      	movs	r3, #0
 800da9e:	220a      	movs	r2, #10
 800daa0:	4620      	mov	r0, r4
 800daa2:	f000 faa7 	bl	800dff4 <__multadd>
 800daa6:	4606      	mov	r6, r0
 800daa8:	e7f2      	b.n	800da90 <_dtoa_r+0xaa0>
 800daaa:	f04f 0900 	mov.w	r9, #0
 800daae:	2201      	movs	r2, #1
 800dab0:	9904      	ldr	r1, [sp, #16]
 800dab2:	4620      	mov	r0, r4
 800dab4:	f000 fc14 	bl	800e2e0 <__lshift>
 800dab8:	4639      	mov	r1, r7
 800daba:	9004      	str	r0, [sp, #16]
 800dabc:	f000 fc64 	bl	800e388 <__mcmp>
 800dac0:	2800      	cmp	r0, #0
 800dac2:	dcb6      	bgt.n	800da32 <_dtoa_r+0xa42>
 800dac4:	d102      	bne.n	800dacc <_dtoa_r+0xadc>
 800dac6:	f018 0f01 	tst.w	r8, #1
 800daca:	d1b2      	bne.n	800da32 <_dtoa_r+0xa42>
 800dacc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dad0:	2b30      	cmp	r3, #48	; 0x30
 800dad2:	f105 32ff 	add.w	r2, r5, #4294967295
 800dad6:	f47f af0a 	bne.w	800d8ee <_dtoa_r+0x8fe>
 800dada:	4615      	mov	r5, r2
 800dadc:	e7f6      	b.n	800dacc <_dtoa_r+0xadc>
 800dade:	4593      	cmp	fp, r2
 800dae0:	d105      	bne.n	800daee <_dtoa_r+0xafe>
 800dae2:	2331      	movs	r3, #49	; 0x31
 800dae4:	f10a 0a01 	add.w	sl, sl, #1
 800dae8:	f88b 3000 	strb.w	r3, [fp]
 800daec:	e6ff      	b.n	800d8ee <_dtoa_r+0x8fe>
 800daee:	4615      	mov	r5, r2
 800daf0:	e79f      	b.n	800da32 <_dtoa_r+0xa42>
 800daf2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800db58 <_dtoa_r+0xb68>
 800daf6:	e007      	b.n	800db08 <_dtoa_r+0xb18>
 800daf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dafa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800db5c <_dtoa_r+0xb6c>
 800dafe:	b11b      	cbz	r3, 800db08 <_dtoa_r+0xb18>
 800db00:	f10b 0308 	add.w	r3, fp, #8
 800db04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800db06:	6013      	str	r3, [r2, #0]
 800db08:	4658      	mov	r0, fp
 800db0a:	b017      	add	sp, #92	; 0x5c
 800db0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db10:	9b06      	ldr	r3, [sp, #24]
 800db12:	2b01      	cmp	r3, #1
 800db14:	f77f ae35 	ble.w	800d782 <_dtoa_r+0x792>
 800db18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db1a:	9307      	str	r3, [sp, #28]
 800db1c:	e649      	b.n	800d7b2 <_dtoa_r+0x7c2>
 800db1e:	9b02      	ldr	r3, [sp, #8]
 800db20:	2b00      	cmp	r3, #0
 800db22:	dc03      	bgt.n	800db2c <_dtoa_r+0xb3c>
 800db24:	9b06      	ldr	r3, [sp, #24]
 800db26:	2b02      	cmp	r3, #2
 800db28:	f73f aecc 	bgt.w	800d8c4 <_dtoa_r+0x8d4>
 800db2c:	465d      	mov	r5, fp
 800db2e:	4639      	mov	r1, r7
 800db30:	9804      	ldr	r0, [sp, #16]
 800db32:	f7ff f9cf 	bl	800ced4 <quorem>
 800db36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800db3a:	f805 8b01 	strb.w	r8, [r5], #1
 800db3e:	9a02      	ldr	r2, [sp, #8]
 800db40:	eba5 030b 	sub.w	r3, r5, fp
 800db44:	429a      	cmp	r2, r3
 800db46:	ddb0      	ble.n	800daaa <_dtoa_r+0xaba>
 800db48:	2300      	movs	r3, #0
 800db4a:	220a      	movs	r2, #10
 800db4c:	9904      	ldr	r1, [sp, #16]
 800db4e:	4620      	mov	r0, r4
 800db50:	f000 fa50 	bl	800dff4 <__multadd>
 800db54:	9004      	str	r0, [sp, #16]
 800db56:	e7ea      	b.n	800db2e <_dtoa_r+0xb3e>
 800db58:	0800febc 	.word	0x0800febc
 800db5c:	0800fee0 	.word	0x0800fee0

0800db60 <__sflush_r>:
 800db60:	898a      	ldrh	r2, [r1, #12]
 800db62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db66:	4605      	mov	r5, r0
 800db68:	0710      	lsls	r0, r2, #28
 800db6a:	460c      	mov	r4, r1
 800db6c:	d458      	bmi.n	800dc20 <__sflush_r+0xc0>
 800db6e:	684b      	ldr	r3, [r1, #4]
 800db70:	2b00      	cmp	r3, #0
 800db72:	dc05      	bgt.n	800db80 <__sflush_r+0x20>
 800db74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800db76:	2b00      	cmp	r3, #0
 800db78:	dc02      	bgt.n	800db80 <__sflush_r+0x20>
 800db7a:	2000      	movs	r0, #0
 800db7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db82:	2e00      	cmp	r6, #0
 800db84:	d0f9      	beq.n	800db7a <__sflush_r+0x1a>
 800db86:	2300      	movs	r3, #0
 800db88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db8c:	682f      	ldr	r7, [r5, #0]
 800db8e:	6a21      	ldr	r1, [r4, #32]
 800db90:	602b      	str	r3, [r5, #0]
 800db92:	d032      	beq.n	800dbfa <__sflush_r+0x9a>
 800db94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db96:	89a3      	ldrh	r3, [r4, #12]
 800db98:	075a      	lsls	r2, r3, #29
 800db9a:	d505      	bpl.n	800dba8 <__sflush_r+0x48>
 800db9c:	6863      	ldr	r3, [r4, #4]
 800db9e:	1ac0      	subs	r0, r0, r3
 800dba0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dba2:	b10b      	cbz	r3, 800dba8 <__sflush_r+0x48>
 800dba4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dba6:	1ac0      	subs	r0, r0, r3
 800dba8:	2300      	movs	r3, #0
 800dbaa:	4602      	mov	r2, r0
 800dbac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbae:	6a21      	ldr	r1, [r4, #32]
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	47b0      	blx	r6
 800dbb4:	1c43      	adds	r3, r0, #1
 800dbb6:	89a3      	ldrh	r3, [r4, #12]
 800dbb8:	d106      	bne.n	800dbc8 <__sflush_r+0x68>
 800dbba:	6829      	ldr	r1, [r5, #0]
 800dbbc:	291d      	cmp	r1, #29
 800dbbe:	d848      	bhi.n	800dc52 <__sflush_r+0xf2>
 800dbc0:	4a29      	ldr	r2, [pc, #164]	; (800dc68 <__sflush_r+0x108>)
 800dbc2:	40ca      	lsrs	r2, r1
 800dbc4:	07d6      	lsls	r6, r2, #31
 800dbc6:	d544      	bpl.n	800dc52 <__sflush_r+0xf2>
 800dbc8:	2200      	movs	r2, #0
 800dbca:	6062      	str	r2, [r4, #4]
 800dbcc:	04d9      	lsls	r1, r3, #19
 800dbce:	6922      	ldr	r2, [r4, #16]
 800dbd0:	6022      	str	r2, [r4, #0]
 800dbd2:	d504      	bpl.n	800dbde <__sflush_r+0x7e>
 800dbd4:	1c42      	adds	r2, r0, #1
 800dbd6:	d101      	bne.n	800dbdc <__sflush_r+0x7c>
 800dbd8:	682b      	ldr	r3, [r5, #0]
 800dbda:	b903      	cbnz	r3, 800dbde <__sflush_r+0x7e>
 800dbdc:	6560      	str	r0, [r4, #84]	; 0x54
 800dbde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbe0:	602f      	str	r7, [r5, #0]
 800dbe2:	2900      	cmp	r1, #0
 800dbe4:	d0c9      	beq.n	800db7a <__sflush_r+0x1a>
 800dbe6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbea:	4299      	cmp	r1, r3
 800dbec:	d002      	beq.n	800dbf4 <__sflush_r+0x94>
 800dbee:	4628      	mov	r0, r5
 800dbf0:	f000 fc9e 	bl	800e530 <_free_r>
 800dbf4:	2000      	movs	r0, #0
 800dbf6:	6360      	str	r0, [r4, #52]	; 0x34
 800dbf8:	e7c0      	b.n	800db7c <__sflush_r+0x1c>
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	4628      	mov	r0, r5
 800dbfe:	47b0      	blx	r6
 800dc00:	1c41      	adds	r1, r0, #1
 800dc02:	d1c8      	bne.n	800db96 <__sflush_r+0x36>
 800dc04:	682b      	ldr	r3, [r5, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d0c5      	beq.n	800db96 <__sflush_r+0x36>
 800dc0a:	2b1d      	cmp	r3, #29
 800dc0c:	d001      	beq.n	800dc12 <__sflush_r+0xb2>
 800dc0e:	2b16      	cmp	r3, #22
 800dc10:	d101      	bne.n	800dc16 <__sflush_r+0xb6>
 800dc12:	602f      	str	r7, [r5, #0]
 800dc14:	e7b1      	b.n	800db7a <__sflush_r+0x1a>
 800dc16:	89a3      	ldrh	r3, [r4, #12]
 800dc18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc1c:	81a3      	strh	r3, [r4, #12]
 800dc1e:	e7ad      	b.n	800db7c <__sflush_r+0x1c>
 800dc20:	690f      	ldr	r7, [r1, #16]
 800dc22:	2f00      	cmp	r7, #0
 800dc24:	d0a9      	beq.n	800db7a <__sflush_r+0x1a>
 800dc26:	0793      	lsls	r3, r2, #30
 800dc28:	680e      	ldr	r6, [r1, #0]
 800dc2a:	bf08      	it	eq
 800dc2c:	694b      	ldreq	r3, [r1, #20]
 800dc2e:	600f      	str	r7, [r1, #0]
 800dc30:	bf18      	it	ne
 800dc32:	2300      	movne	r3, #0
 800dc34:	eba6 0807 	sub.w	r8, r6, r7
 800dc38:	608b      	str	r3, [r1, #8]
 800dc3a:	f1b8 0f00 	cmp.w	r8, #0
 800dc3e:	dd9c      	ble.n	800db7a <__sflush_r+0x1a>
 800dc40:	4643      	mov	r3, r8
 800dc42:	463a      	mov	r2, r7
 800dc44:	6a21      	ldr	r1, [r4, #32]
 800dc46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc48:	4628      	mov	r0, r5
 800dc4a:	47b0      	blx	r6
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	dc06      	bgt.n	800dc5e <__sflush_r+0xfe>
 800dc50:	89a3      	ldrh	r3, [r4, #12]
 800dc52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc56:	81a3      	strh	r3, [r4, #12]
 800dc58:	f04f 30ff 	mov.w	r0, #4294967295
 800dc5c:	e78e      	b.n	800db7c <__sflush_r+0x1c>
 800dc5e:	4407      	add	r7, r0
 800dc60:	eba8 0800 	sub.w	r8, r8, r0
 800dc64:	e7e9      	b.n	800dc3a <__sflush_r+0xda>
 800dc66:	bf00      	nop
 800dc68:	20400001 	.word	0x20400001

0800dc6c <_fflush_r>:
 800dc6c:	b538      	push	{r3, r4, r5, lr}
 800dc6e:	690b      	ldr	r3, [r1, #16]
 800dc70:	4605      	mov	r5, r0
 800dc72:	460c      	mov	r4, r1
 800dc74:	b1db      	cbz	r3, 800dcae <_fflush_r+0x42>
 800dc76:	b118      	cbz	r0, 800dc80 <_fflush_r+0x14>
 800dc78:	6983      	ldr	r3, [r0, #24]
 800dc7a:	b90b      	cbnz	r3, 800dc80 <_fflush_r+0x14>
 800dc7c:	f000 f860 	bl	800dd40 <__sinit>
 800dc80:	4b0c      	ldr	r3, [pc, #48]	; (800dcb4 <_fflush_r+0x48>)
 800dc82:	429c      	cmp	r4, r3
 800dc84:	d109      	bne.n	800dc9a <_fflush_r+0x2e>
 800dc86:	686c      	ldr	r4, [r5, #4]
 800dc88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc8c:	b17b      	cbz	r3, 800dcae <_fflush_r+0x42>
 800dc8e:	4621      	mov	r1, r4
 800dc90:	4628      	mov	r0, r5
 800dc92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc96:	f7ff bf63 	b.w	800db60 <__sflush_r>
 800dc9a:	4b07      	ldr	r3, [pc, #28]	; (800dcb8 <_fflush_r+0x4c>)
 800dc9c:	429c      	cmp	r4, r3
 800dc9e:	d101      	bne.n	800dca4 <_fflush_r+0x38>
 800dca0:	68ac      	ldr	r4, [r5, #8]
 800dca2:	e7f1      	b.n	800dc88 <_fflush_r+0x1c>
 800dca4:	4b05      	ldr	r3, [pc, #20]	; (800dcbc <_fflush_r+0x50>)
 800dca6:	429c      	cmp	r4, r3
 800dca8:	bf08      	it	eq
 800dcaa:	68ec      	ldreq	r4, [r5, #12]
 800dcac:	e7ec      	b.n	800dc88 <_fflush_r+0x1c>
 800dcae:	2000      	movs	r0, #0
 800dcb0:	bd38      	pop	{r3, r4, r5, pc}
 800dcb2:	bf00      	nop
 800dcb4:	0800ff10 	.word	0x0800ff10
 800dcb8:	0800ff30 	.word	0x0800ff30
 800dcbc:	0800fef0 	.word	0x0800fef0

0800dcc0 <std>:
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	b510      	push	{r4, lr}
 800dcc4:	4604      	mov	r4, r0
 800dcc6:	e9c0 3300 	strd	r3, r3, [r0]
 800dcca:	6083      	str	r3, [r0, #8]
 800dccc:	8181      	strh	r1, [r0, #12]
 800dcce:	6643      	str	r3, [r0, #100]	; 0x64
 800dcd0:	81c2      	strh	r2, [r0, #14]
 800dcd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dcd6:	6183      	str	r3, [r0, #24]
 800dcd8:	4619      	mov	r1, r3
 800dcda:	2208      	movs	r2, #8
 800dcdc:	305c      	adds	r0, #92	; 0x5c
 800dcde:	f7fe fb59 	bl	800c394 <memset>
 800dce2:	4b05      	ldr	r3, [pc, #20]	; (800dcf8 <std+0x38>)
 800dce4:	6263      	str	r3, [r4, #36]	; 0x24
 800dce6:	4b05      	ldr	r3, [pc, #20]	; (800dcfc <std+0x3c>)
 800dce8:	62a3      	str	r3, [r4, #40]	; 0x28
 800dcea:	4b05      	ldr	r3, [pc, #20]	; (800dd00 <std+0x40>)
 800dcec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dcee:	4b05      	ldr	r3, [pc, #20]	; (800dd04 <std+0x44>)
 800dcf0:	6224      	str	r4, [r4, #32]
 800dcf2:	6323      	str	r3, [r4, #48]	; 0x30
 800dcf4:	bd10      	pop	{r4, pc}
 800dcf6:	bf00      	nop
 800dcf8:	0800e921 	.word	0x0800e921
 800dcfc:	0800e943 	.word	0x0800e943
 800dd00:	0800e97b 	.word	0x0800e97b
 800dd04:	0800e99f 	.word	0x0800e99f

0800dd08 <_cleanup_r>:
 800dd08:	4901      	ldr	r1, [pc, #4]	; (800dd10 <_cleanup_r+0x8>)
 800dd0a:	f000 b885 	b.w	800de18 <_fwalk_reent>
 800dd0e:	bf00      	nop
 800dd10:	0800dc6d 	.word	0x0800dc6d

0800dd14 <__sfmoreglue>:
 800dd14:	b570      	push	{r4, r5, r6, lr}
 800dd16:	1e4a      	subs	r2, r1, #1
 800dd18:	2568      	movs	r5, #104	; 0x68
 800dd1a:	4355      	muls	r5, r2
 800dd1c:	460e      	mov	r6, r1
 800dd1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dd22:	f000 fc53 	bl	800e5cc <_malloc_r>
 800dd26:	4604      	mov	r4, r0
 800dd28:	b140      	cbz	r0, 800dd3c <__sfmoreglue+0x28>
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	e9c0 1600 	strd	r1, r6, [r0]
 800dd30:	300c      	adds	r0, #12
 800dd32:	60a0      	str	r0, [r4, #8]
 800dd34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dd38:	f7fe fb2c 	bl	800c394 <memset>
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	bd70      	pop	{r4, r5, r6, pc}

0800dd40 <__sinit>:
 800dd40:	6983      	ldr	r3, [r0, #24]
 800dd42:	b510      	push	{r4, lr}
 800dd44:	4604      	mov	r4, r0
 800dd46:	bb33      	cbnz	r3, 800dd96 <__sinit+0x56>
 800dd48:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800dd4c:	6503      	str	r3, [r0, #80]	; 0x50
 800dd4e:	4b12      	ldr	r3, [pc, #72]	; (800dd98 <__sinit+0x58>)
 800dd50:	4a12      	ldr	r2, [pc, #72]	; (800dd9c <__sinit+0x5c>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	6282      	str	r2, [r0, #40]	; 0x28
 800dd56:	4298      	cmp	r0, r3
 800dd58:	bf04      	itt	eq
 800dd5a:	2301      	moveq	r3, #1
 800dd5c:	6183      	streq	r3, [r0, #24]
 800dd5e:	f000 f81f 	bl	800dda0 <__sfp>
 800dd62:	6060      	str	r0, [r4, #4]
 800dd64:	4620      	mov	r0, r4
 800dd66:	f000 f81b 	bl	800dda0 <__sfp>
 800dd6a:	60a0      	str	r0, [r4, #8]
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	f000 f817 	bl	800dda0 <__sfp>
 800dd72:	2200      	movs	r2, #0
 800dd74:	60e0      	str	r0, [r4, #12]
 800dd76:	2104      	movs	r1, #4
 800dd78:	6860      	ldr	r0, [r4, #4]
 800dd7a:	f7ff ffa1 	bl	800dcc0 <std>
 800dd7e:	2201      	movs	r2, #1
 800dd80:	2109      	movs	r1, #9
 800dd82:	68a0      	ldr	r0, [r4, #8]
 800dd84:	f7ff ff9c 	bl	800dcc0 <std>
 800dd88:	2202      	movs	r2, #2
 800dd8a:	2112      	movs	r1, #18
 800dd8c:	68e0      	ldr	r0, [r4, #12]
 800dd8e:	f7ff ff97 	bl	800dcc0 <std>
 800dd92:	2301      	movs	r3, #1
 800dd94:	61a3      	str	r3, [r4, #24]
 800dd96:	bd10      	pop	{r4, pc}
 800dd98:	0800feac 	.word	0x0800feac
 800dd9c:	0800dd09 	.word	0x0800dd09

0800dda0 <__sfp>:
 800dda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dda2:	4b1b      	ldr	r3, [pc, #108]	; (800de10 <__sfp+0x70>)
 800dda4:	681e      	ldr	r6, [r3, #0]
 800dda6:	69b3      	ldr	r3, [r6, #24]
 800dda8:	4607      	mov	r7, r0
 800ddaa:	b913      	cbnz	r3, 800ddb2 <__sfp+0x12>
 800ddac:	4630      	mov	r0, r6
 800ddae:	f7ff ffc7 	bl	800dd40 <__sinit>
 800ddb2:	3648      	adds	r6, #72	; 0x48
 800ddb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ddb8:	3b01      	subs	r3, #1
 800ddba:	d503      	bpl.n	800ddc4 <__sfp+0x24>
 800ddbc:	6833      	ldr	r3, [r6, #0]
 800ddbe:	b133      	cbz	r3, 800ddce <__sfp+0x2e>
 800ddc0:	6836      	ldr	r6, [r6, #0]
 800ddc2:	e7f7      	b.n	800ddb4 <__sfp+0x14>
 800ddc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ddc8:	b16d      	cbz	r5, 800dde6 <__sfp+0x46>
 800ddca:	3468      	adds	r4, #104	; 0x68
 800ddcc:	e7f4      	b.n	800ddb8 <__sfp+0x18>
 800ddce:	2104      	movs	r1, #4
 800ddd0:	4638      	mov	r0, r7
 800ddd2:	f7ff ff9f 	bl	800dd14 <__sfmoreglue>
 800ddd6:	6030      	str	r0, [r6, #0]
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	d1f1      	bne.n	800ddc0 <__sfp+0x20>
 800dddc:	230c      	movs	r3, #12
 800ddde:	603b      	str	r3, [r7, #0]
 800dde0:	4604      	mov	r4, r0
 800dde2:	4620      	mov	r0, r4
 800dde4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dde6:	4b0b      	ldr	r3, [pc, #44]	; (800de14 <__sfp+0x74>)
 800dde8:	6665      	str	r5, [r4, #100]	; 0x64
 800ddea:	e9c4 5500 	strd	r5, r5, [r4]
 800ddee:	60a5      	str	r5, [r4, #8]
 800ddf0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ddf4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ddf8:	2208      	movs	r2, #8
 800ddfa:	4629      	mov	r1, r5
 800ddfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800de00:	f7fe fac8 	bl	800c394 <memset>
 800de04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800de08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800de0c:	e7e9      	b.n	800dde2 <__sfp+0x42>
 800de0e:	bf00      	nop
 800de10:	0800feac 	.word	0x0800feac
 800de14:	ffff0001 	.word	0xffff0001

0800de18 <_fwalk_reent>:
 800de18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de1c:	4680      	mov	r8, r0
 800de1e:	4689      	mov	r9, r1
 800de20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800de24:	2600      	movs	r6, #0
 800de26:	b914      	cbnz	r4, 800de2e <_fwalk_reent+0x16>
 800de28:	4630      	mov	r0, r6
 800de2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de2e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800de32:	3f01      	subs	r7, #1
 800de34:	d501      	bpl.n	800de3a <_fwalk_reent+0x22>
 800de36:	6824      	ldr	r4, [r4, #0]
 800de38:	e7f5      	b.n	800de26 <_fwalk_reent+0xe>
 800de3a:	89ab      	ldrh	r3, [r5, #12]
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	d907      	bls.n	800de50 <_fwalk_reent+0x38>
 800de40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de44:	3301      	adds	r3, #1
 800de46:	d003      	beq.n	800de50 <_fwalk_reent+0x38>
 800de48:	4629      	mov	r1, r5
 800de4a:	4640      	mov	r0, r8
 800de4c:	47c8      	blx	r9
 800de4e:	4306      	orrs	r6, r0
 800de50:	3568      	adds	r5, #104	; 0x68
 800de52:	e7ee      	b.n	800de32 <_fwalk_reent+0x1a>

0800de54 <_localeconv_r>:
 800de54:	4b04      	ldr	r3, [pc, #16]	; (800de68 <_localeconv_r+0x14>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	6a18      	ldr	r0, [r3, #32]
 800de5a:	4b04      	ldr	r3, [pc, #16]	; (800de6c <_localeconv_r+0x18>)
 800de5c:	2800      	cmp	r0, #0
 800de5e:	bf08      	it	eq
 800de60:	4618      	moveq	r0, r3
 800de62:	30f0      	adds	r0, #240	; 0xf0
 800de64:	4770      	bx	lr
 800de66:	bf00      	nop
 800de68:	20000010 	.word	0x20000010
 800de6c:	20000074 	.word	0x20000074

0800de70 <__swhatbuf_r>:
 800de70:	b570      	push	{r4, r5, r6, lr}
 800de72:	460e      	mov	r6, r1
 800de74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de78:	2900      	cmp	r1, #0
 800de7a:	b096      	sub	sp, #88	; 0x58
 800de7c:	4614      	mov	r4, r2
 800de7e:	461d      	mov	r5, r3
 800de80:	da07      	bge.n	800de92 <__swhatbuf_r+0x22>
 800de82:	2300      	movs	r3, #0
 800de84:	602b      	str	r3, [r5, #0]
 800de86:	89b3      	ldrh	r3, [r6, #12]
 800de88:	061a      	lsls	r2, r3, #24
 800de8a:	d410      	bmi.n	800deae <__swhatbuf_r+0x3e>
 800de8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de90:	e00e      	b.n	800deb0 <__swhatbuf_r+0x40>
 800de92:	466a      	mov	r2, sp
 800de94:	f000 fdaa 	bl	800e9ec <_fstat_r>
 800de98:	2800      	cmp	r0, #0
 800de9a:	dbf2      	blt.n	800de82 <__swhatbuf_r+0x12>
 800de9c:	9a01      	ldr	r2, [sp, #4]
 800de9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dea2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dea6:	425a      	negs	r2, r3
 800dea8:	415a      	adcs	r2, r3
 800deaa:	602a      	str	r2, [r5, #0]
 800deac:	e7ee      	b.n	800de8c <__swhatbuf_r+0x1c>
 800deae:	2340      	movs	r3, #64	; 0x40
 800deb0:	2000      	movs	r0, #0
 800deb2:	6023      	str	r3, [r4, #0]
 800deb4:	b016      	add	sp, #88	; 0x58
 800deb6:	bd70      	pop	{r4, r5, r6, pc}

0800deb8 <__smakebuf_r>:
 800deb8:	898b      	ldrh	r3, [r1, #12]
 800deba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800debc:	079d      	lsls	r5, r3, #30
 800debe:	4606      	mov	r6, r0
 800dec0:	460c      	mov	r4, r1
 800dec2:	d507      	bpl.n	800ded4 <__smakebuf_r+0x1c>
 800dec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dec8:	6023      	str	r3, [r4, #0]
 800deca:	6123      	str	r3, [r4, #16]
 800decc:	2301      	movs	r3, #1
 800dece:	6163      	str	r3, [r4, #20]
 800ded0:	b002      	add	sp, #8
 800ded2:	bd70      	pop	{r4, r5, r6, pc}
 800ded4:	ab01      	add	r3, sp, #4
 800ded6:	466a      	mov	r2, sp
 800ded8:	f7ff ffca 	bl	800de70 <__swhatbuf_r>
 800dedc:	9900      	ldr	r1, [sp, #0]
 800dede:	4605      	mov	r5, r0
 800dee0:	4630      	mov	r0, r6
 800dee2:	f000 fb73 	bl	800e5cc <_malloc_r>
 800dee6:	b948      	cbnz	r0, 800defc <__smakebuf_r+0x44>
 800dee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deec:	059a      	lsls	r2, r3, #22
 800deee:	d4ef      	bmi.n	800ded0 <__smakebuf_r+0x18>
 800def0:	f023 0303 	bic.w	r3, r3, #3
 800def4:	f043 0302 	orr.w	r3, r3, #2
 800def8:	81a3      	strh	r3, [r4, #12]
 800defa:	e7e3      	b.n	800dec4 <__smakebuf_r+0xc>
 800defc:	4b0d      	ldr	r3, [pc, #52]	; (800df34 <__smakebuf_r+0x7c>)
 800defe:	62b3      	str	r3, [r6, #40]	; 0x28
 800df00:	89a3      	ldrh	r3, [r4, #12]
 800df02:	6020      	str	r0, [r4, #0]
 800df04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df08:	81a3      	strh	r3, [r4, #12]
 800df0a:	9b00      	ldr	r3, [sp, #0]
 800df0c:	6163      	str	r3, [r4, #20]
 800df0e:	9b01      	ldr	r3, [sp, #4]
 800df10:	6120      	str	r0, [r4, #16]
 800df12:	b15b      	cbz	r3, 800df2c <__smakebuf_r+0x74>
 800df14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df18:	4630      	mov	r0, r6
 800df1a:	f000 fd79 	bl	800ea10 <_isatty_r>
 800df1e:	b128      	cbz	r0, 800df2c <__smakebuf_r+0x74>
 800df20:	89a3      	ldrh	r3, [r4, #12]
 800df22:	f023 0303 	bic.w	r3, r3, #3
 800df26:	f043 0301 	orr.w	r3, r3, #1
 800df2a:	81a3      	strh	r3, [r4, #12]
 800df2c:	89a3      	ldrh	r3, [r4, #12]
 800df2e:	431d      	orrs	r5, r3
 800df30:	81a5      	strh	r5, [r4, #12]
 800df32:	e7cd      	b.n	800ded0 <__smakebuf_r+0x18>
 800df34:	0800dd09 	.word	0x0800dd09

0800df38 <malloc>:
 800df38:	4b02      	ldr	r3, [pc, #8]	; (800df44 <malloc+0xc>)
 800df3a:	4601      	mov	r1, r0
 800df3c:	6818      	ldr	r0, [r3, #0]
 800df3e:	f000 bb45 	b.w	800e5cc <_malloc_r>
 800df42:	bf00      	nop
 800df44:	20000010 	.word	0x20000010

0800df48 <memcpy>:
 800df48:	b510      	push	{r4, lr}
 800df4a:	1e43      	subs	r3, r0, #1
 800df4c:	440a      	add	r2, r1
 800df4e:	4291      	cmp	r1, r2
 800df50:	d100      	bne.n	800df54 <memcpy+0xc>
 800df52:	bd10      	pop	{r4, pc}
 800df54:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df58:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df5c:	e7f7      	b.n	800df4e <memcpy+0x6>

0800df5e <_Balloc>:
 800df5e:	b570      	push	{r4, r5, r6, lr}
 800df60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800df62:	4604      	mov	r4, r0
 800df64:	460e      	mov	r6, r1
 800df66:	b93d      	cbnz	r5, 800df78 <_Balloc+0x1a>
 800df68:	2010      	movs	r0, #16
 800df6a:	f7ff ffe5 	bl	800df38 <malloc>
 800df6e:	6260      	str	r0, [r4, #36]	; 0x24
 800df70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800df74:	6005      	str	r5, [r0, #0]
 800df76:	60c5      	str	r5, [r0, #12]
 800df78:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800df7a:	68eb      	ldr	r3, [r5, #12]
 800df7c:	b183      	cbz	r3, 800dfa0 <_Balloc+0x42>
 800df7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800df86:	b9b8      	cbnz	r0, 800dfb8 <_Balloc+0x5a>
 800df88:	2101      	movs	r1, #1
 800df8a:	fa01 f506 	lsl.w	r5, r1, r6
 800df8e:	1d6a      	adds	r2, r5, #5
 800df90:	0092      	lsls	r2, r2, #2
 800df92:	4620      	mov	r0, r4
 800df94:	f000 fabe 	bl	800e514 <_calloc_r>
 800df98:	b160      	cbz	r0, 800dfb4 <_Balloc+0x56>
 800df9a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800df9e:	e00e      	b.n	800dfbe <_Balloc+0x60>
 800dfa0:	2221      	movs	r2, #33	; 0x21
 800dfa2:	2104      	movs	r1, #4
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	f000 fab5 	bl	800e514 <_calloc_r>
 800dfaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfac:	60e8      	str	r0, [r5, #12]
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d1e4      	bne.n	800df7e <_Balloc+0x20>
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	bd70      	pop	{r4, r5, r6, pc}
 800dfb8:	6802      	ldr	r2, [r0, #0]
 800dfba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dfc4:	e7f7      	b.n	800dfb6 <_Balloc+0x58>

0800dfc6 <_Bfree>:
 800dfc6:	b570      	push	{r4, r5, r6, lr}
 800dfc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800dfca:	4606      	mov	r6, r0
 800dfcc:	460d      	mov	r5, r1
 800dfce:	b93c      	cbnz	r4, 800dfe0 <_Bfree+0x1a>
 800dfd0:	2010      	movs	r0, #16
 800dfd2:	f7ff ffb1 	bl	800df38 <malloc>
 800dfd6:	6270      	str	r0, [r6, #36]	; 0x24
 800dfd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dfdc:	6004      	str	r4, [r0, #0]
 800dfde:	60c4      	str	r4, [r0, #12]
 800dfe0:	b13d      	cbz	r5, 800dff2 <_Bfree+0x2c>
 800dfe2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dfe4:	686a      	ldr	r2, [r5, #4]
 800dfe6:	68db      	ldr	r3, [r3, #12]
 800dfe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dfec:	6029      	str	r1, [r5, #0]
 800dfee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800dff2:	bd70      	pop	{r4, r5, r6, pc}

0800dff4 <__multadd>:
 800dff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff8:	690d      	ldr	r5, [r1, #16]
 800dffa:	461f      	mov	r7, r3
 800dffc:	4606      	mov	r6, r0
 800dffe:	460c      	mov	r4, r1
 800e000:	f101 0c14 	add.w	ip, r1, #20
 800e004:	2300      	movs	r3, #0
 800e006:	f8dc 0000 	ldr.w	r0, [ip]
 800e00a:	b281      	uxth	r1, r0
 800e00c:	fb02 7101 	mla	r1, r2, r1, r7
 800e010:	0c0f      	lsrs	r7, r1, #16
 800e012:	0c00      	lsrs	r0, r0, #16
 800e014:	fb02 7000 	mla	r0, r2, r0, r7
 800e018:	b289      	uxth	r1, r1
 800e01a:	3301      	adds	r3, #1
 800e01c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e020:	429d      	cmp	r5, r3
 800e022:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e026:	f84c 1b04 	str.w	r1, [ip], #4
 800e02a:	dcec      	bgt.n	800e006 <__multadd+0x12>
 800e02c:	b1d7      	cbz	r7, 800e064 <__multadd+0x70>
 800e02e:	68a3      	ldr	r3, [r4, #8]
 800e030:	42ab      	cmp	r3, r5
 800e032:	dc12      	bgt.n	800e05a <__multadd+0x66>
 800e034:	6861      	ldr	r1, [r4, #4]
 800e036:	4630      	mov	r0, r6
 800e038:	3101      	adds	r1, #1
 800e03a:	f7ff ff90 	bl	800df5e <_Balloc>
 800e03e:	6922      	ldr	r2, [r4, #16]
 800e040:	3202      	adds	r2, #2
 800e042:	f104 010c 	add.w	r1, r4, #12
 800e046:	4680      	mov	r8, r0
 800e048:	0092      	lsls	r2, r2, #2
 800e04a:	300c      	adds	r0, #12
 800e04c:	f7ff ff7c 	bl	800df48 <memcpy>
 800e050:	4621      	mov	r1, r4
 800e052:	4630      	mov	r0, r6
 800e054:	f7ff ffb7 	bl	800dfc6 <_Bfree>
 800e058:	4644      	mov	r4, r8
 800e05a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e05e:	3501      	adds	r5, #1
 800e060:	615f      	str	r7, [r3, #20]
 800e062:	6125      	str	r5, [r4, #16]
 800e064:	4620      	mov	r0, r4
 800e066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e06a <__hi0bits>:
 800e06a:	0c02      	lsrs	r2, r0, #16
 800e06c:	0412      	lsls	r2, r2, #16
 800e06e:	4603      	mov	r3, r0
 800e070:	b9b2      	cbnz	r2, 800e0a0 <__hi0bits+0x36>
 800e072:	0403      	lsls	r3, r0, #16
 800e074:	2010      	movs	r0, #16
 800e076:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e07a:	bf04      	itt	eq
 800e07c:	021b      	lsleq	r3, r3, #8
 800e07e:	3008      	addeq	r0, #8
 800e080:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e084:	bf04      	itt	eq
 800e086:	011b      	lsleq	r3, r3, #4
 800e088:	3004      	addeq	r0, #4
 800e08a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e08e:	bf04      	itt	eq
 800e090:	009b      	lsleq	r3, r3, #2
 800e092:	3002      	addeq	r0, #2
 800e094:	2b00      	cmp	r3, #0
 800e096:	db06      	blt.n	800e0a6 <__hi0bits+0x3c>
 800e098:	005b      	lsls	r3, r3, #1
 800e09a:	d503      	bpl.n	800e0a4 <__hi0bits+0x3a>
 800e09c:	3001      	adds	r0, #1
 800e09e:	4770      	bx	lr
 800e0a0:	2000      	movs	r0, #0
 800e0a2:	e7e8      	b.n	800e076 <__hi0bits+0xc>
 800e0a4:	2020      	movs	r0, #32
 800e0a6:	4770      	bx	lr

0800e0a8 <__lo0bits>:
 800e0a8:	6803      	ldr	r3, [r0, #0]
 800e0aa:	f013 0207 	ands.w	r2, r3, #7
 800e0ae:	4601      	mov	r1, r0
 800e0b0:	d00b      	beq.n	800e0ca <__lo0bits+0x22>
 800e0b2:	07da      	lsls	r2, r3, #31
 800e0b4:	d423      	bmi.n	800e0fe <__lo0bits+0x56>
 800e0b6:	0798      	lsls	r0, r3, #30
 800e0b8:	bf49      	itett	mi
 800e0ba:	085b      	lsrmi	r3, r3, #1
 800e0bc:	089b      	lsrpl	r3, r3, #2
 800e0be:	2001      	movmi	r0, #1
 800e0c0:	600b      	strmi	r3, [r1, #0]
 800e0c2:	bf5c      	itt	pl
 800e0c4:	600b      	strpl	r3, [r1, #0]
 800e0c6:	2002      	movpl	r0, #2
 800e0c8:	4770      	bx	lr
 800e0ca:	b298      	uxth	r0, r3
 800e0cc:	b9a8      	cbnz	r0, 800e0fa <__lo0bits+0x52>
 800e0ce:	0c1b      	lsrs	r3, r3, #16
 800e0d0:	2010      	movs	r0, #16
 800e0d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e0d6:	bf04      	itt	eq
 800e0d8:	0a1b      	lsreq	r3, r3, #8
 800e0da:	3008      	addeq	r0, #8
 800e0dc:	071a      	lsls	r2, r3, #28
 800e0de:	bf04      	itt	eq
 800e0e0:	091b      	lsreq	r3, r3, #4
 800e0e2:	3004      	addeq	r0, #4
 800e0e4:	079a      	lsls	r2, r3, #30
 800e0e6:	bf04      	itt	eq
 800e0e8:	089b      	lsreq	r3, r3, #2
 800e0ea:	3002      	addeq	r0, #2
 800e0ec:	07da      	lsls	r2, r3, #31
 800e0ee:	d402      	bmi.n	800e0f6 <__lo0bits+0x4e>
 800e0f0:	085b      	lsrs	r3, r3, #1
 800e0f2:	d006      	beq.n	800e102 <__lo0bits+0x5a>
 800e0f4:	3001      	adds	r0, #1
 800e0f6:	600b      	str	r3, [r1, #0]
 800e0f8:	4770      	bx	lr
 800e0fa:	4610      	mov	r0, r2
 800e0fc:	e7e9      	b.n	800e0d2 <__lo0bits+0x2a>
 800e0fe:	2000      	movs	r0, #0
 800e100:	4770      	bx	lr
 800e102:	2020      	movs	r0, #32
 800e104:	4770      	bx	lr

0800e106 <__i2b>:
 800e106:	b510      	push	{r4, lr}
 800e108:	460c      	mov	r4, r1
 800e10a:	2101      	movs	r1, #1
 800e10c:	f7ff ff27 	bl	800df5e <_Balloc>
 800e110:	2201      	movs	r2, #1
 800e112:	6144      	str	r4, [r0, #20]
 800e114:	6102      	str	r2, [r0, #16]
 800e116:	bd10      	pop	{r4, pc}

0800e118 <__multiply>:
 800e118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e11c:	4614      	mov	r4, r2
 800e11e:	690a      	ldr	r2, [r1, #16]
 800e120:	6923      	ldr	r3, [r4, #16]
 800e122:	429a      	cmp	r2, r3
 800e124:	bfb8      	it	lt
 800e126:	460b      	movlt	r3, r1
 800e128:	4688      	mov	r8, r1
 800e12a:	bfbc      	itt	lt
 800e12c:	46a0      	movlt	r8, r4
 800e12e:	461c      	movlt	r4, r3
 800e130:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e134:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e138:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e13c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e140:	eb07 0609 	add.w	r6, r7, r9
 800e144:	42b3      	cmp	r3, r6
 800e146:	bfb8      	it	lt
 800e148:	3101      	addlt	r1, #1
 800e14a:	f7ff ff08 	bl	800df5e <_Balloc>
 800e14e:	f100 0514 	add.w	r5, r0, #20
 800e152:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e156:	462b      	mov	r3, r5
 800e158:	2200      	movs	r2, #0
 800e15a:	4573      	cmp	r3, lr
 800e15c:	d316      	bcc.n	800e18c <__multiply+0x74>
 800e15e:	f104 0214 	add.w	r2, r4, #20
 800e162:	f108 0114 	add.w	r1, r8, #20
 800e166:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e16a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e16e:	9300      	str	r3, [sp, #0]
 800e170:	9b00      	ldr	r3, [sp, #0]
 800e172:	9201      	str	r2, [sp, #4]
 800e174:	4293      	cmp	r3, r2
 800e176:	d80c      	bhi.n	800e192 <__multiply+0x7a>
 800e178:	2e00      	cmp	r6, #0
 800e17a:	dd03      	ble.n	800e184 <__multiply+0x6c>
 800e17c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e180:	2b00      	cmp	r3, #0
 800e182:	d05d      	beq.n	800e240 <__multiply+0x128>
 800e184:	6106      	str	r6, [r0, #16]
 800e186:	b003      	add	sp, #12
 800e188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e18c:	f843 2b04 	str.w	r2, [r3], #4
 800e190:	e7e3      	b.n	800e15a <__multiply+0x42>
 800e192:	f8b2 b000 	ldrh.w	fp, [r2]
 800e196:	f1bb 0f00 	cmp.w	fp, #0
 800e19a:	d023      	beq.n	800e1e4 <__multiply+0xcc>
 800e19c:	4689      	mov	r9, r1
 800e19e:	46ac      	mov	ip, r5
 800e1a0:	f04f 0800 	mov.w	r8, #0
 800e1a4:	f859 4b04 	ldr.w	r4, [r9], #4
 800e1a8:	f8dc a000 	ldr.w	sl, [ip]
 800e1ac:	b2a3      	uxth	r3, r4
 800e1ae:	fa1f fa8a 	uxth.w	sl, sl
 800e1b2:	fb0b a303 	mla	r3, fp, r3, sl
 800e1b6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e1ba:	f8dc 4000 	ldr.w	r4, [ip]
 800e1be:	4443      	add	r3, r8
 800e1c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e1c4:	fb0b 840a 	mla	r4, fp, sl, r8
 800e1c8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e1cc:	46e2      	mov	sl, ip
 800e1ce:	b29b      	uxth	r3, r3
 800e1d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e1d4:	454f      	cmp	r7, r9
 800e1d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e1da:	f84a 3b04 	str.w	r3, [sl], #4
 800e1de:	d82b      	bhi.n	800e238 <__multiply+0x120>
 800e1e0:	f8cc 8004 	str.w	r8, [ip, #4]
 800e1e4:	9b01      	ldr	r3, [sp, #4]
 800e1e6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e1ea:	3204      	adds	r2, #4
 800e1ec:	f1ba 0f00 	cmp.w	sl, #0
 800e1f0:	d020      	beq.n	800e234 <__multiply+0x11c>
 800e1f2:	682b      	ldr	r3, [r5, #0]
 800e1f4:	4689      	mov	r9, r1
 800e1f6:	46a8      	mov	r8, r5
 800e1f8:	f04f 0b00 	mov.w	fp, #0
 800e1fc:	f8b9 c000 	ldrh.w	ip, [r9]
 800e200:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e204:	fb0a 440c 	mla	r4, sl, ip, r4
 800e208:	445c      	add	r4, fp
 800e20a:	46c4      	mov	ip, r8
 800e20c:	b29b      	uxth	r3, r3
 800e20e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e212:	f84c 3b04 	str.w	r3, [ip], #4
 800e216:	f859 3b04 	ldr.w	r3, [r9], #4
 800e21a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e21e:	0c1b      	lsrs	r3, r3, #16
 800e220:	fb0a b303 	mla	r3, sl, r3, fp
 800e224:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e228:	454f      	cmp	r7, r9
 800e22a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e22e:	d805      	bhi.n	800e23c <__multiply+0x124>
 800e230:	f8c8 3004 	str.w	r3, [r8, #4]
 800e234:	3504      	adds	r5, #4
 800e236:	e79b      	b.n	800e170 <__multiply+0x58>
 800e238:	46d4      	mov	ip, sl
 800e23a:	e7b3      	b.n	800e1a4 <__multiply+0x8c>
 800e23c:	46e0      	mov	r8, ip
 800e23e:	e7dd      	b.n	800e1fc <__multiply+0xe4>
 800e240:	3e01      	subs	r6, #1
 800e242:	e799      	b.n	800e178 <__multiply+0x60>

0800e244 <__pow5mult>:
 800e244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e248:	4615      	mov	r5, r2
 800e24a:	f012 0203 	ands.w	r2, r2, #3
 800e24e:	4606      	mov	r6, r0
 800e250:	460f      	mov	r7, r1
 800e252:	d007      	beq.n	800e264 <__pow5mult+0x20>
 800e254:	3a01      	subs	r2, #1
 800e256:	4c21      	ldr	r4, [pc, #132]	; (800e2dc <__pow5mult+0x98>)
 800e258:	2300      	movs	r3, #0
 800e25a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e25e:	f7ff fec9 	bl	800dff4 <__multadd>
 800e262:	4607      	mov	r7, r0
 800e264:	10ad      	asrs	r5, r5, #2
 800e266:	d035      	beq.n	800e2d4 <__pow5mult+0x90>
 800e268:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e26a:	b93c      	cbnz	r4, 800e27c <__pow5mult+0x38>
 800e26c:	2010      	movs	r0, #16
 800e26e:	f7ff fe63 	bl	800df38 <malloc>
 800e272:	6270      	str	r0, [r6, #36]	; 0x24
 800e274:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e278:	6004      	str	r4, [r0, #0]
 800e27a:	60c4      	str	r4, [r0, #12]
 800e27c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e280:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e284:	b94c      	cbnz	r4, 800e29a <__pow5mult+0x56>
 800e286:	f240 2171 	movw	r1, #625	; 0x271
 800e28a:	4630      	mov	r0, r6
 800e28c:	f7ff ff3b 	bl	800e106 <__i2b>
 800e290:	2300      	movs	r3, #0
 800e292:	f8c8 0008 	str.w	r0, [r8, #8]
 800e296:	4604      	mov	r4, r0
 800e298:	6003      	str	r3, [r0, #0]
 800e29a:	f04f 0800 	mov.w	r8, #0
 800e29e:	07eb      	lsls	r3, r5, #31
 800e2a0:	d50a      	bpl.n	800e2b8 <__pow5mult+0x74>
 800e2a2:	4639      	mov	r1, r7
 800e2a4:	4622      	mov	r2, r4
 800e2a6:	4630      	mov	r0, r6
 800e2a8:	f7ff ff36 	bl	800e118 <__multiply>
 800e2ac:	4639      	mov	r1, r7
 800e2ae:	4681      	mov	r9, r0
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	f7ff fe88 	bl	800dfc6 <_Bfree>
 800e2b6:	464f      	mov	r7, r9
 800e2b8:	106d      	asrs	r5, r5, #1
 800e2ba:	d00b      	beq.n	800e2d4 <__pow5mult+0x90>
 800e2bc:	6820      	ldr	r0, [r4, #0]
 800e2be:	b938      	cbnz	r0, 800e2d0 <__pow5mult+0x8c>
 800e2c0:	4622      	mov	r2, r4
 800e2c2:	4621      	mov	r1, r4
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	f7ff ff27 	bl	800e118 <__multiply>
 800e2ca:	6020      	str	r0, [r4, #0]
 800e2cc:	f8c0 8000 	str.w	r8, [r0]
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	e7e4      	b.n	800e29e <__pow5mult+0x5a>
 800e2d4:	4638      	mov	r0, r7
 800e2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2da:	bf00      	nop
 800e2dc:	08010040 	.word	0x08010040

0800e2e0 <__lshift>:
 800e2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2e4:	460c      	mov	r4, r1
 800e2e6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e2ea:	6923      	ldr	r3, [r4, #16]
 800e2ec:	6849      	ldr	r1, [r1, #4]
 800e2ee:	eb0a 0903 	add.w	r9, sl, r3
 800e2f2:	68a3      	ldr	r3, [r4, #8]
 800e2f4:	4607      	mov	r7, r0
 800e2f6:	4616      	mov	r6, r2
 800e2f8:	f109 0501 	add.w	r5, r9, #1
 800e2fc:	42ab      	cmp	r3, r5
 800e2fe:	db32      	blt.n	800e366 <__lshift+0x86>
 800e300:	4638      	mov	r0, r7
 800e302:	f7ff fe2c 	bl	800df5e <_Balloc>
 800e306:	2300      	movs	r3, #0
 800e308:	4680      	mov	r8, r0
 800e30a:	f100 0114 	add.w	r1, r0, #20
 800e30e:	461a      	mov	r2, r3
 800e310:	4553      	cmp	r3, sl
 800e312:	db2b      	blt.n	800e36c <__lshift+0x8c>
 800e314:	6920      	ldr	r0, [r4, #16]
 800e316:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e31a:	f104 0314 	add.w	r3, r4, #20
 800e31e:	f016 021f 	ands.w	r2, r6, #31
 800e322:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e326:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e32a:	d025      	beq.n	800e378 <__lshift+0x98>
 800e32c:	f1c2 0e20 	rsb	lr, r2, #32
 800e330:	2000      	movs	r0, #0
 800e332:	681e      	ldr	r6, [r3, #0]
 800e334:	468a      	mov	sl, r1
 800e336:	4096      	lsls	r6, r2
 800e338:	4330      	orrs	r0, r6
 800e33a:	f84a 0b04 	str.w	r0, [sl], #4
 800e33e:	f853 0b04 	ldr.w	r0, [r3], #4
 800e342:	459c      	cmp	ip, r3
 800e344:	fa20 f00e 	lsr.w	r0, r0, lr
 800e348:	d814      	bhi.n	800e374 <__lshift+0x94>
 800e34a:	6048      	str	r0, [r1, #4]
 800e34c:	b108      	cbz	r0, 800e352 <__lshift+0x72>
 800e34e:	f109 0502 	add.w	r5, r9, #2
 800e352:	3d01      	subs	r5, #1
 800e354:	4638      	mov	r0, r7
 800e356:	f8c8 5010 	str.w	r5, [r8, #16]
 800e35a:	4621      	mov	r1, r4
 800e35c:	f7ff fe33 	bl	800dfc6 <_Bfree>
 800e360:	4640      	mov	r0, r8
 800e362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e366:	3101      	adds	r1, #1
 800e368:	005b      	lsls	r3, r3, #1
 800e36a:	e7c7      	b.n	800e2fc <__lshift+0x1c>
 800e36c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e370:	3301      	adds	r3, #1
 800e372:	e7cd      	b.n	800e310 <__lshift+0x30>
 800e374:	4651      	mov	r1, sl
 800e376:	e7dc      	b.n	800e332 <__lshift+0x52>
 800e378:	3904      	subs	r1, #4
 800e37a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e37e:	f841 2f04 	str.w	r2, [r1, #4]!
 800e382:	459c      	cmp	ip, r3
 800e384:	d8f9      	bhi.n	800e37a <__lshift+0x9a>
 800e386:	e7e4      	b.n	800e352 <__lshift+0x72>

0800e388 <__mcmp>:
 800e388:	6903      	ldr	r3, [r0, #16]
 800e38a:	690a      	ldr	r2, [r1, #16]
 800e38c:	1a9b      	subs	r3, r3, r2
 800e38e:	b530      	push	{r4, r5, lr}
 800e390:	d10c      	bne.n	800e3ac <__mcmp+0x24>
 800e392:	0092      	lsls	r2, r2, #2
 800e394:	3014      	adds	r0, #20
 800e396:	3114      	adds	r1, #20
 800e398:	1884      	adds	r4, r0, r2
 800e39a:	4411      	add	r1, r2
 800e39c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e3a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e3a4:	4295      	cmp	r5, r2
 800e3a6:	d003      	beq.n	800e3b0 <__mcmp+0x28>
 800e3a8:	d305      	bcc.n	800e3b6 <__mcmp+0x2e>
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	bd30      	pop	{r4, r5, pc}
 800e3b0:	42a0      	cmp	r0, r4
 800e3b2:	d3f3      	bcc.n	800e39c <__mcmp+0x14>
 800e3b4:	e7fa      	b.n	800e3ac <__mcmp+0x24>
 800e3b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ba:	e7f7      	b.n	800e3ac <__mcmp+0x24>

0800e3bc <__mdiff>:
 800e3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3c0:	460d      	mov	r5, r1
 800e3c2:	4607      	mov	r7, r0
 800e3c4:	4611      	mov	r1, r2
 800e3c6:	4628      	mov	r0, r5
 800e3c8:	4614      	mov	r4, r2
 800e3ca:	f7ff ffdd 	bl	800e388 <__mcmp>
 800e3ce:	1e06      	subs	r6, r0, #0
 800e3d0:	d108      	bne.n	800e3e4 <__mdiff+0x28>
 800e3d2:	4631      	mov	r1, r6
 800e3d4:	4638      	mov	r0, r7
 800e3d6:	f7ff fdc2 	bl	800df5e <_Balloc>
 800e3da:	2301      	movs	r3, #1
 800e3dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3e4:	bfa4      	itt	ge
 800e3e6:	4623      	movge	r3, r4
 800e3e8:	462c      	movge	r4, r5
 800e3ea:	4638      	mov	r0, r7
 800e3ec:	6861      	ldr	r1, [r4, #4]
 800e3ee:	bfa6      	itte	ge
 800e3f0:	461d      	movge	r5, r3
 800e3f2:	2600      	movge	r6, #0
 800e3f4:	2601      	movlt	r6, #1
 800e3f6:	f7ff fdb2 	bl	800df5e <_Balloc>
 800e3fa:	692b      	ldr	r3, [r5, #16]
 800e3fc:	60c6      	str	r6, [r0, #12]
 800e3fe:	6926      	ldr	r6, [r4, #16]
 800e400:	f105 0914 	add.w	r9, r5, #20
 800e404:	f104 0214 	add.w	r2, r4, #20
 800e408:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e40c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e410:	f100 0514 	add.w	r5, r0, #20
 800e414:	f04f 0e00 	mov.w	lr, #0
 800e418:	f852 ab04 	ldr.w	sl, [r2], #4
 800e41c:	f859 4b04 	ldr.w	r4, [r9], #4
 800e420:	fa1e f18a 	uxtah	r1, lr, sl
 800e424:	b2a3      	uxth	r3, r4
 800e426:	1ac9      	subs	r1, r1, r3
 800e428:	0c23      	lsrs	r3, r4, #16
 800e42a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e42e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e432:	b289      	uxth	r1, r1
 800e434:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e438:	45c8      	cmp	r8, r9
 800e43a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e43e:	4694      	mov	ip, r2
 800e440:	f845 3b04 	str.w	r3, [r5], #4
 800e444:	d8e8      	bhi.n	800e418 <__mdiff+0x5c>
 800e446:	45bc      	cmp	ip, r7
 800e448:	d304      	bcc.n	800e454 <__mdiff+0x98>
 800e44a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e44e:	b183      	cbz	r3, 800e472 <__mdiff+0xb6>
 800e450:	6106      	str	r6, [r0, #16]
 800e452:	e7c5      	b.n	800e3e0 <__mdiff+0x24>
 800e454:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e458:	fa1e f381 	uxtah	r3, lr, r1
 800e45c:	141a      	asrs	r2, r3, #16
 800e45e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e462:	b29b      	uxth	r3, r3
 800e464:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e468:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e46c:	f845 3b04 	str.w	r3, [r5], #4
 800e470:	e7e9      	b.n	800e446 <__mdiff+0x8a>
 800e472:	3e01      	subs	r6, #1
 800e474:	e7e9      	b.n	800e44a <__mdiff+0x8e>

0800e476 <__d2b>:
 800e476:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e47a:	460e      	mov	r6, r1
 800e47c:	2101      	movs	r1, #1
 800e47e:	ec59 8b10 	vmov	r8, r9, d0
 800e482:	4615      	mov	r5, r2
 800e484:	f7ff fd6b 	bl	800df5e <_Balloc>
 800e488:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e48c:	4607      	mov	r7, r0
 800e48e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e492:	bb34      	cbnz	r4, 800e4e2 <__d2b+0x6c>
 800e494:	9301      	str	r3, [sp, #4]
 800e496:	f1b8 0300 	subs.w	r3, r8, #0
 800e49a:	d027      	beq.n	800e4ec <__d2b+0x76>
 800e49c:	a802      	add	r0, sp, #8
 800e49e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e4a2:	f7ff fe01 	bl	800e0a8 <__lo0bits>
 800e4a6:	9900      	ldr	r1, [sp, #0]
 800e4a8:	b1f0      	cbz	r0, 800e4e8 <__d2b+0x72>
 800e4aa:	9a01      	ldr	r2, [sp, #4]
 800e4ac:	f1c0 0320 	rsb	r3, r0, #32
 800e4b0:	fa02 f303 	lsl.w	r3, r2, r3
 800e4b4:	430b      	orrs	r3, r1
 800e4b6:	40c2      	lsrs	r2, r0
 800e4b8:	617b      	str	r3, [r7, #20]
 800e4ba:	9201      	str	r2, [sp, #4]
 800e4bc:	9b01      	ldr	r3, [sp, #4]
 800e4be:	61bb      	str	r3, [r7, #24]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	bf14      	ite	ne
 800e4c4:	2102      	movne	r1, #2
 800e4c6:	2101      	moveq	r1, #1
 800e4c8:	6139      	str	r1, [r7, #16]
 800e4ca:	b1c4      	cbz	r4, 800e4fe <__d2b+0x88>
 800e4cc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e4d0:	4404      	add	r4, r0
 800e4d2:	6034      	str	r4, [r6, #0]
 800e4d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e4d8:	6028      	str	r0, [r5, #0]
 800e4da:	4638      	mov	r0, r7
 800e4dc:	b003      	add	sp, #12
 800e4de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e4e6:	e7d5      	b.n	800e494 <__d2b+0x1e>
 800e4e8:	6179      	str	r1, [r7, #20]
 800e4ea:	e7e7      	b.n	800e4bc <__d2b+0x46>
 800e4ec:	a801      	add	r0, sp, #4
 800e4ee:	f7ff fddb 	bl	800e0a8 <__lo0bits>
 800e4f2:	9b01      	ldr	r3, [sp, #4]
 800e4f4:	617b      	str	r3, [r7, #20]
 800e4f6:	2101      	movs	r1, #1
 800e4f8:	6139      	str	r1, [r7, #16]
 800e4fa:	3020      	adds	r0, #32
 800e4fc:	e7e5      	b.n	800e4ca <__d2b+0x54>
 800e4fe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e502:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e506:	6030      	str	r0, [r6, #0]
 800e508:	6918      	ldr	r0, [r3, #16]
 800e50a:	f7ff fdae 	bl	800e06a <__hi0bits>
 800e50e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e512:	e7e1      	b.n	800e4d8 <__d2b+0x62>

0800e514 <_calloc_r>:
 800e514:	b538      	push	{r3, r4, r5, lr}
 800e516:	fb02 f401 	mul.w	r4, r2, r1
 800e51a:	4621      	mov	r1, r4
 800e51c:	f000 f856 	bl	800e5cc <_malloc_r>
 800e520:	4605      	mov	r5, r0
 800e522:	b118      	cbz	r0, 800e52c <_calloc_r+0x18>
 800e524:	4622      	mov	r2, r4
 800e526:	2100      	movs	r1, #0
 800e528:	f7fd ff34 	bl	800c394 <memset>
 800e52c:	4628      	mov	r0, r5
 800e52e:	bd38      	pop	{r3, r4, r5, pc}

0800e530 <_free_r>:
 800e530:	b538      	push	{r3, r4, r5, lr}
 800e532:	4605      	mov	r5, r0
 800e534:	2900      	cmp	r1, #0
 800e536:	d045      	beq.n	800e5c4 <_free_r+0x94>
 800e538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e53c:	1f0c      	subs	r4, r1, #4
 800e53e:	2b00      	cmp	r3, #0
 800e540:	bfb8      	it	lt
 800e542:	18e4      	addlt	r4, r4, r3
 800e544:	f000 fa98 	bl	800ea78 <__malloc_lock>
 800e548:	4a1f      	ldr	r2, [pc, #124]	; (800e5c8 <_free_r+0x98>)
 800e54a:	6813      	ldr	r3, [r2, #0]
 800e54c:	4610      	mov	r0, r2
 800e54e:	b933      	cbnz	r3, 800e55e <_free_r+0x2e>
 800e550:	6063      	str	r3, [r4, #4]
 800e552:	6014      	str	r4, [r2, #0]
 800e554:	4628      	mov	r0, r5
 800e556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e55a:	f000 ba8e 	b.w	800ea7a <__malloc_unlock>
 800e55e:	42a3      	cmp	r3, r4
 800e560:	d90c      	bls.n	800e57c <_free_r+0x4c>
 800e562:	6821      	ldr	r1, [r4, #0]
 800e564:	1862      	adds	r2, r4, r1
 800e566:	4293      	cmp	r3, r2
 800e568:	bf04      	itt	eq
 800e56a:	681a      	ldreq	r2, [r3, #0]
 800e56c:	685b      	ldreq	r3, [r3, #4]
 800e56e:	6063      	str	r3, [r4, #4]
 800e570:	bf04      	itt	eq
 800e572:	1852      	addeq	r2, r2, r1
 800e574:	6022      	streq	r2, [r4, #0]
 800e576:	6004      	str	r4, [r0, #0]
 800e578:	e7ec      	b.n	800e554 <_free_r+0x24>
 800e57a:	4613      	mov	r3, r2
 800e57c:	685a      	ldr	r2, [r3, #4]
 800e57e:	b10a      	cbz	r2, 800e584 <_free_r+0x54>
 800e580:	42a2      	cmp	r2, r4
 800e582:	d9fa      	bls.n	800e57a <_free_r+0x4a>
 800e584:	6819      	ldr	r1, [r3, #0]
 800e586:	1858      	adds	r0, r3, r1
 800e588:	42a0      	cmp	r0, r4
 800e58a:	d10b      	bne.n	800e5a4 <_free_r+0x74>
 800e58c:	6820      	ldr	r0, [r4, #0]
 800e58e:	4401      	add	r1, r0
 800e590:	1858      	adds	r0, r3, r1
 800e592:	4282      	cmp	r2, r0
 800e594:	6019      	str	r1, [r3, #0]
 800e596:	d1dd      	bne.n	800e554 <_free_r+0x24>
 800e598:	6810      	ldr	r0, [r2, #0]
 800e59a:	6852      	ldr	r2, [r2, #4]
 800e59c:	605a      	str	r2, [r3, #4]
 800e59e:	4401      	add	r1, r0
 800e5a0:	6019      	str	r1, [r3, #0]
 800e5a2:	e7d7      	b.n	800e554 <_free_r+0x24>
 800e5a4:	d902      	bls.n	800e5ac <_free_r+0x7c>
 800e5a6:	230c      	movs	r3, #12
 800e5a8:	602b      	str	r3, [r5, #0]
 800e5aa:	e7d3      	b.n	800e554 <_free_r+0x24>
 800e5ac:	6820      	ldr	r0, [r4, #0]
 800e5ae:	1821      	adds	r1, r4, r0
 800e5b0:	428a      	cmp	r2, r1
 800e5b2:	bf04      	itt	eq
 800e5b4:	6811      	ldreq	r1, [r2, #0]
 800e5b6:	6852      	ldreq	r2, [r2, #4]
 800e5b8:	6062      	str	r2, [r4, #4]
 800e5ba:	bf04      	itt	eq
 800e5bc:	1809      	addeq	r1, r1, r0
 800e5be:	6021      	streq	r1, [r4, #0]
 800e5c0:	605c      	str	r4, [r3, #4]
 800e5c2:	e7c7      	b.n	800e554 <_free_r+0x24>
 800e5c4:	bd38      	pop	{r3, r4, r5, pc}
 800e5c6:	bf00      	nop
 800e5c8:	20000228 	.word	0x20000228

0800e5cc <_malloc_r>:
 800e5cc:	b570      	push	{r4, r5, r6, lr}
 800e5ce:	1ccd      	adds	r5, r1, #3
 800e5d0:	f025 0503 	bic.w	r5, r5, #3
 800e5d4:	3508      	adds	r5, #8
 800e5d6:	2d0c      	cmp	r5, #12
 800e5d8:	bf38      	it	cc
 800e5da:	250c      	movcc	r5, #12
 800e5dc:	2d00      	cmp	r5, #0
 800e5de:	4606      	mov	r6, r0
 800e5e0:	db01      	blt.n	800e5e6 <_malloc_r+0x1a>
 800e5e2:	42a9      	cmp	r1, r5
 800e5e4:	d903      	bls.n	800e5ee <_malloc_r+0x22>
 800e5e6:	230c      	movs	r3, #12
 800e5e8:	6033      	str	r3, [r6, #0]
 800e5ea:	2000      	movs	r0, #0
 800e5ec:	bd70      	pop	{r4, r5, r6, pc}
 800e5ee:	f000 fa43 	bl	800ea78 <__malloc_lock>
 800e5f2:	4a21      	ldr	r2, [pc, #132]	; (800e678 <_malloc_r+0xac>)
 800e5f4:	6814      	ldr	r4, [r2, #0]
 800e5f6:	4621      	mov	r1, r4
 800e5f8:	b991      	cbnz	r1, 800e620 <_malloc_r+0x54>
 800e5fa:	4c20      	ldr	r4, [pc, #128]	; (800e67c <_malloc_r+0xb0>)
 800e5fc:	6823      	ldr	r3, [r4, #0]
 800e5fe:	b91b      	cbnz	r3, 800e608 <_malloc_r+0x3c>
 800e600:	4630      	mov	r0, r6
 800e602:	f000 f97d 	bl	800e900 <_sbrk_r>
 800e606:	6020      	str	r0, [r4, #0]
 800e608:	4629      	mov	r1, r5
 800e60a:	4630      	mov	r0, r6
 800e60c:	f000 f978 	bl	800e900 <_sbrk_r>
 800e610:	1c43      	adds	r3, r0, #1
 800e612:	d124      	bne.n	800e65e <_malloc_r+0x92>
 800e614:	230c      	movs	r3, #12
 800e616:	6033      	str	r3, [r6, #0]
 800e618:	4630      	mov	r0, r6
 800e61a:	f000 fa2e 	bl	800ea7a <__malloc_unlock>
 800e61e:	e7e4      	b.n	800e5ea <_malloc_r+0x1e>
 800e620:	680b      	ldr	r3, [r1, #0]
 800e622:	1b5b      	subs	r3, r3, r5
 800e624:	d418      	bmi.n	800e658 <_malloc_r+0x8c>
 800e626:	2b0b      	cmp	r3, #11
 800e628:	d90f      	bls.n	800e64a <_malloc_r+0x7e>
 800e62a:	600b      	str	r3, [r1, #0]
 800e62c:	50cd      	str	r5, [r1, r3]
 800e62e:	18cc      	adds	r4, r1, r3
 800e630:	4630      	mov	r0, r6
 800e632:	f000 fa22 	bl	800ea7a <__malloc_unlock>
 800e636:	f104 000b 	add.w	r0, r4, #11
 800e63a:	1d23      	adds	r3, r4, #4
 800e63c:	f020 0007 	bic.w	r0, r0, #7
 800e640:	1ac3      	subs	r3, r0, r3
 800e642:	d0d3      	beq.n	800e5ec <_malloc_r+0x20>
 800e644:	425a      	negs	r2, r3
 800e646:	50e2      	str	r2, [r4, r3]
 800e648:	e7d0      	b.n	800e5ec <_malloc_r+0x20>
 800e64a:	428c      	cmp	r4, r1
 800e64c:	684b      	ldr	r3, [r1, #4]
 800e64e:	bf16      	itet	ne
 800e650:	6063      	strne	r3, [r4, #4]
 800e652:	6013      	streq	r3, [r2, #0]
 800e654:	460c      	movne	r4, r1
 800e656:	e7eb      	b.n	800e630 <_malloc_r+0x64>
 800e658:	460c      	mov	r4, r1
 800e65a:	6849      	ldr	r1, [r1, #4]
 800e65c:	e7cc      	b.n	800e5f8 <_malloc_r+0x2c>
 800e65e:	1cc4      	adds	r4, r0, #3
 800e660:	f024 0403 	bic.w	r4, r4, #3
 800e664:	42a0      	cmp	r0, r4
 800e666:	d005      	beq.n	800e674 <_malloc_r+0xa8>
 800e668:	1a21      	subs	r1, r4, r0
 800e66a:	4630      	mov	r0, r6
 800e66c:	f000 f948 	bl	800e900 <_sbrk_r>
 800e670:	3001      	adds	r0, #1
 800e672:	d0cf      	beq.n	800e614 <_malloc_r+0x48>
 800e674:	6025      	str	r5, [r4, #0]
 800e676:	e7db      	b.n	800e630 <_malloc_r+0x64>
 800e678:	20000228 	.word	0x20000228
 800e67c:	2000022c 	.word	0x2000022c

0800e680 <__sfputc_r>:
 800e680:	6893      	ldr	r3, [r2, #8]
 800e682:	3b01      	subs	r3, #1
 800e684:	2b00      	cmp	r3, #0
 800e686:	b410      	push	{r4}
 800e688:	6093      	str	r3, [r2, #8]
 800e68a:	da08      	bge.n	800e69e <__sfputc_r+0x1e>
 800e68c:	6994      	ldr	r4, [r2, #24]
 800e68e:	42a3      	cmp	r3, r4
 800e690:	db01      	blt.n	800e696 <__sfputc_r+0x16>
 800e692:	290a      	cmp	r1, #10
 800e694:	d103      	bne.n	800e69e <__sfputc_r+0x1e>
 800e696:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e69a:	f7fe bb5b 	b.w	800cd54 <__swbuf_r>
 800e69e:	6813      	ldr	r3, [r2, #0]
 800e6a0:	1c58      	adds	r0, r3, #1
 800e6a2:	6010      	str	r0, [r2, #0]
 800e6a4:	7019      	strb	r1, [r3, #0]
 800e6a6:	4608      	mov	r0, r1
 800e6a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6ac:	4770      	bx	lr

0800e6ae <__sfputs_r>:
 800e6ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6b0:	4606      	mov	r6, r0
 800e6b2:	460f      	mov	r7, r1
 800e6b4:	4614      	mov	r4, r2
 800e6b6:	18d5      	adds	r5, r2, r3
 800e6b8:	42ac      	cmp	r4, r5
 800e6ba:	d101      	bne.n	800e6c0 <__sfputs_r+0x12>
 800e6bc:	2000      	movs	r0, #0
 800e6be:	e007      	b.n	800e6d0 <__sfputs_r+0x22>
 800e6c0:	463a      	mov	r2, r7
 800e6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6c6:	4630      	mov	r0, r6
 800e6c8:	f7ff ffda 	bl	800e680 <__sfputc_r>
 800e6cc:	1c43      	adds	r3, r0, #1
 800e6ce:	d1f3      	bne.n	800e6b8 <__sfputs_r+0xa>
 800e6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e6d4 <_vfiprintf_r>:
 800e6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d8:	460c      	mov	r4, r1
 800e6da:	b09d      	sub	sp, #116	; 0x74
 800e6dc:	4617      	mov	r7, r2
 800e6de:	461d      	mov	r5, r3
 800e6e0:	4606      	mov	r6, r0
 800e6e2:	b118      	cbz	r0, 800e6ec <_vfiprintf_r+0x18>
 800e6e4:	6983      	ldr	r3, [r0, #24]
 800e6e6:	b90b      	cbnz	r3, 800e6ec <_vfiprintf_r+0x18>
 800e6e8:	f7ff fb2a 	bl	800dd40 <__sinit>
 800e6ec:	4b7c      	ldr	r3, [pc, #496]	; (800e8e0 <_vfiprintf_r+0x20c>)
 800e6ee:	429c      	cmp	r4, r3
 800e6f0:	d158      	bne.n	800e7a4 <_vfiprintf_r+0xd0>
 800e6f2:	6874      	ldr	r4, [r6, #4]
 800e6f4:	89a3      	ldrh	r3, [r4, #12]
 800e6f6:	0718      	lsls	r0, r3, #28
 800e6f8:	d55e      	bpl.n	800e7b8 <_vfiprintf_r+0xe4>
 800e6fa:	6923      	ldr	r3, [r4, #16]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d05b      	beq.n	800e7b8 <_vfiprintf_r+0xe4>
 800e700:	2300      	movs	r3, #0
 800e702:	9309      	str	r3, [sp, #36]	; 0x24
 800e704:	2320      	movs	r3, #32
 800e706:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e70a:	2330      	movs	r3, #48	; 0x30
 800e70c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e710:	9503      	str	r5, [sp, #12]
 800e712:	f04f 0b01 	mov.w	fp, #1
 800e716:	46b8      	mov	r8, r7
 800e718:	4645      	mov	r5, r8
 800e71a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e71e:	b10b      	cbz	r3, 800e724 <_vfiprintf_r+0x50>
 800e720:	2b25      	cmp	r3, #37	; 0x25
 800e722:	d154      	bne.n	800e7ce <_vfiprintf_r+0xfa>
 800e724:	ebb8 0a07 	subs.w	sl, r8, r7
 800e728:	d00b      	beq.n	800e742 <_vfiprintf_r+0x6e>
 800e72a:	4653      	mov	r3, sl
 800e72c:	463a      	mov	r2, r7
 800e72e:	4621      	mov	r1, r4
 800e730:	4630      	mov	r0, r6
 800e732:	f7ff ffbc 	bl	800e6ae <__sfputs_r>
 800e736:	3001      	adds	r0, #1
 800e738:	f000 80c2 	beq.w	800e8c0 <_vfiprintf_r+0x1ec>
 800e73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e73e:	4453      	add	r3, sl
 800e740:	9309      	str	r3, [sp, #36]	; 0x24
 800e742:	f898 3000 	ldrb.w	r3, [r8]
 800e746:	2b00      	cmp	r3, #0
 800e748:	f000 80ba 	beq.w	800e8c0 <_vfiprintf_r+0x1ec>
 800e74c:	2300      	movs	r3, #0
 800e74e:	f04f 32ff 	mov.w	r2, #4294967295
 800e752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e756:	9304      	str	r3, [sp, #16]
 800e758:	9307      	str	r3, [sp, #28]
 800e75a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e75e:	931a      	str	r3, [sp, #104]	; 0x68
 800e760:	46a8      	mov	r8, r5
 800e762:	2205      	movs	r2, #5
 800e764:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e768:	485e      	ldr	r0, [pc, #376]	; (800e8e4 <_vfiprintf_r+0x210>)
 800e76a:	f7f1 fd39 	bl	80001e0 <memchr>
 800e76e:	9b04      	ldr	r3, [sp, #16]
 800e770:	bb78      	cbnz	r0, 800e7d2 <_vfiprintf_r+0xfe>
 800e772:	06d9      	lsls	r1, r3, #27
 800e774:	bf44      	itt	mi
 800e776:	2220      	movmi	r2, #32
 800e778:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e77c:	071a      	lsls	r2, r3, #28
 800e77e:	bf44      	itt	mi
 800e780:	222b      	movmi	r2, #43	; 0x2b
 800e782:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e786:	782a      	ldrb	r2, [r5, #0]
 800e788:	2a2a      	cmp	r2, #42	; 0x2a
 800e78a:	d02a      	beq.n	800e7e2 <_vfiprintf_r+0x10e>
 800e78c:	9a07      	ldr	r2, [sp, #28]
 800e78e:	46a8      	mov	r8, r5
 800e790:	2000      	movs	r0, #0
 800e792:	250a      	movs	r5, #10
 800e794:	4641      	mov	r1, r8
 800e796:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e79a:	3b30      	subs	r3, #48	; 0x30
 800e79c:	2b09      	cmp	r3, #9
 800e79e:	d969      	bls.n	800e874 <_vfiprintf_r+0x1a0>
 800e7a0:	b360      	cbz	r0, 800e7fc <_vfiprintf_r+0x128>
 800e7a2:	e024      	b.n	800e7ee <_vfiprintf_r+0x11a>
 800e7a4:	4b50      	ldr	r3, [pc, #320]	; (800e8e8 <_vfiprintf_r+0x214>)
 800e7a6:	429c      	cmp	r4, r3
 800e7a8:	d101      	bne.n	800e7ae <_vfiprintf_r+0xda>
 800e7aa:	68b4      	ldr	r4, [r6, #8]
 800e7ac:	e7a2      	b.n	800e6f4 <_vfiprintf_r+0x20>
 800e7ae:	4b4f      	ldr	r3, [pc, #316]	; (800e8ec <_vfiprintf_r+0x218>)
 800e7b0:	429c      	cmp	r4, r3
 800e7b2:	bf08      	it	eq
 800e7b4:	68f4      	ldreq	r4, [r6, #12]
 800e7b6:	e79d      	b.n	800e6f4 <_vfiprintf_r+0x20>
 800e7b8:	4621      	mov	r1, r4
 800e7ba:	4630      	mov	r0, r6
 800e7bc:	f7fe fb1c 	bl	800cdf8 <__swsetup_r>
 800e7c0:	2800      	cmp	r0, #0
 800e7c2:	d09d      	beq.n	800e700 <_vfiprintf_r+0x2c>
 800e7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c8:	b01d      	add	sp, #116	; 0x74
 800e7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ce:	46a8      	mov	r8, r5
 800e7d0:	e7a2      	b.n	800e718 <_vfiprintf_r+0x44>
 800e7d2:	4a44      	ldr	r2, [pc, #272]	; (800e8e4 <_vfiprintf_r+0x210>)
 800e7d4:	1a80      	subs	r0, r0, r2
 800e7d6:	fa0b f000 	lsl.w	r0, fp, r0
 800e7da:	4318      	orrs	r0, r3
 800e7dc:	9004      	str	r0, [sp, #16]
 800e7de:	4645      	mov	r5, r8
 800e7e0:	e7be      	b.n	800e760 <_vfiprintf_r+0x8c>
 800e7e2:	9a03      	ldr	r2, [sp, #12]
 800e7e4:	1d11      	adds	r1, r2, #4
 800e7e6:	6812      	ldr	r2, [r2, #0]
 800e7e8:	9103      	str	r1, [sp, #12]
 800e7ea:	2a00      	cmp	r2, #0
 800e7ec:	db01      	blt.n	800e7f2 <_vfiprintf_r+0x11e>
 800e7ee:	9207      	str	r2, [sp, #28]
 800e7f0:	e004      	b.n	800e7fc <_vfiprintf_r+0x128>
 800e7f2:	4252      	negs	r2, r2
 800e7f4:	f043 0302 	orr.w	r3, r3, #2
 800e7f8:	9207      	str	r2, [sp, #28]
 800e7fa:	9304      	str	r3, [sp, #16]
 800e7fc:	f898 3000 	ldrb.w	r3, [r8]
 800e800:	2b2e      	cmp	r3, #46	; 0x2e
 800e802:	d10e      	bne.n	800e822 <_vfiprintf_r+0x14e>
 800e804:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e808:	2b2a      	cmp	r3, #42	; 0x2a
 800e80a:	d138      	bne.n	800e87e <_vfiprintf_r+0x1aa>
 800e80c:	9b03      	ldr	r3, [sp, #12]
 800e80e:	1d1a      	adds	r2, r3, #4
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	9203      	str	r2, [sp, #12]
 800e814:	2b00      	cmp	r3, #0
 800e816:	bfb8      	it	lt
 800e818:	f04f 33ff 	movlt.w	r3, #4294967295
 800e81c:	f108 0802 	add.w	r8, r8, #2
 800e820:	9305      	str	r3, [sp, #20]
 800e822:	4d33      	ldr	r5, [pc, #204]	; (800e8f0 <_vfiprintf_r+0x21c>)
 800e824:	f898 1000 	ldrb.w	r1, [r8]
 800e828:	2203      	movs	r2, #3
 800e82a:	4628      	mov	r0, r5
 800e82c:	f7f1 fcd8 	bl	80001e0 <memchr>
 800e830:	b140      	cbz	r0, 800e844 <_vfiprintf_r+0x170>
 800e832:	2340      	movs	r3, #64	; 0x40
 800e834:	1b40      	subs	r0, r0, r5
 800e836:	fa03 f000 	lsl.w	r0, r3, r0
 800e83a:	9b04      	ldr	r3, [sp, #16]
 800e83c:	4303      	orrs	r3, r0
 800e83e:	f108 0801 	add.w	r8, r8, #1
 800e842:	9304      	str	r3, [sp, #16]
 800e844:	f898 1000 	ldrb.w	r1, [r8]
 800e848:	482a      	ldr	r0, [pc, #168]	; (800e8f4 <_vfiprintf_r+0x220>)
 800e84a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e84e:	2206      	movs	r2, #6
 800e850:	f108 0701 	add.w	r7, r8, #1
 800e854:	f7f1 fcc4 	bl	80001e0 <memchr>
 800e858:	2800      	cmp	r0, #0
 800e85a:	d037      	beq.n	800e8cc <_vfiprintf_r+0x1f8>
 800e85c:	4b26      	ldr	r3, [pc, #152]	; (800e8f8 <_vfiprintf_r+0x224>)
 800e85e:	bb1b      	cbnz	r3, 800e8a8 <_vfiprintf_r+0x1d4>
 800e860:	9b03      	ldr	r3, [sp, #12]
 800e862:	3307      	adds	r3, #7
 800e864:	f023 0307 	bic.w	r3, r3, #7
 800e868:	3308      	adds	r3, #8
 800e86a:	9303      	str	r3, [sp, #12]
 800e86c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e86e:	444b      	add	r3, r9
 800e870:	9309      	str	r3, [sp, #36]	; 0x24
 800e872:	e750      	b.n	800e716 <_vfiprintf_r+0x42>
 800e874:	fb05 3202 	mla	r2, r5, r2, r3
 800e878:	2001      	movs	r0, #1
 800e87a:	4688      	mov	r8, r1
 800e87c:	e78a      	b.n	800e794 <_vfiprintf_r+0xc0>
 800e87e:	2300      	movs	r3, #0
 800e880:	f108 0801 	add.w	r8, r8, #1
 800e884:	9305      	str	r3, [sp, #20]
 800e886:	4619      	mov	r1, r3
 800e888:	250a      	movs	r5, #10
 800e88a:	4640      	mov	r0, r8
 800e88c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e890:	3a30      	subs	r2, #48	; 0x30
 800e892:	2a09      	cmp	r2, #9
 800e894:	d903      	bls.n	800e89e <_vfiprintf_r+0x1ca>
 800e896:	2b00      	cmp	r3, #0
 800e898:	d0c3      	beq.n	800e822 <_vfiprintf_r+0x14e>
 800e89a:	9105      	str	r1, [sp, #20]
 800e89c:	e7c1      	b.n	800e822 <_vfiprintf_r+0x14e>
 800e89e:	fb05 2101 	mla	r1, r5, r1, r2
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	4680      	mov	r8, r0
 800e8a6:	e7f0      	b.n	800e88a <_vfiprintf_r+0x1b6>
 800e8a8:	ab03      	add	r3, sp, #12
 800e8aa:	9300      	str	r3, [sp, #0]
 800e8ac:	4622      	mov	r2, r4
 800e8ae:	4b13      	ldr	r3, [pc, #76]	; (800e8fc <_vfiprintf_r+0x228>)
 800e8b0:	a904      	add	r1, sp, #16
 800e8b2:	4630      	mov	r0, r6
 800e8b4:	f7fd fe0a 	bl	800c4cc <_printf_float>
 800e8b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e8bc:	4681      	mov	r9, r0
 800e8be:	d1d5      	bne.n	800e86c <_vfiprintf_r+0x198>
 800e8c0:	89a3      	ldrh	r3, [r4, #12]
 800e8c2:	065b      	lsls	r3, r3, #25
 800e8c4:	f53f af7e 	bmi.w	800e7c4 <_vfiprintf_r+0xf0>
 800e8c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8ca:	e77d      	b.n	800e7c8 <_vfiprintf_r+0xf4>
 800e8cc:	ab03      	add	r3, sp, #12
 800e8ce:	9300      	str	r3, [sp, #0]
 800e8d0:	4622      	mov	r2, r4
 800e8d2:	4b0a      	ldr	r3, [pc, #40]	; (800e8fc <_vfiprintf_r+0x228>)
 800e8d4:	a904      	add	r1, sp, #16
 800e8d6:	4630      	mov	r0, r6
 800e8d8:	f7fe f8ae 	bl	800ca38 <_printf_i>
 800e8dc:	e7ec      	b.n	800e8b8 <_vfiprintf_r+0x1e4>
 800e8de:	bf00      	nop
 800e8e0:	0800ff10 	.word	0x0800ff10
 800e8e4:	0801004c 	.word	0x0801004c
 800e8e8:	0800ff30 	.word	0x0800ff30
 800e8ec:	0800fef0 	.word	0x0800fef0
 800e8f0:	08010052 	.word	0x08010052
 800e8f4:	08010056 	.word	0x08010056
 800e8f8:	0800c4cd 	.word	0x0800c4cd
 800e8fc:	0800e6af 	.word	0x0800e6af

0800e900 <_sbrk_r>:
 800e900:	b538      	push	{r3, r4, r5, lr}
 800e902:	4c06      	ldr	r4, [pc, #24]	; (800e91c <_sbrk_r+0x1c>)
 800e904:	2300      	movs	r3, #0
 800e906:	4605      	mov	r5, r0
 800e908:	4608      	mov	r0, r1
 800e90a:	6023      	str	r3, [r4, #0]
 800e90c:	f7fc ff00 	bl	800b710 <_sbrk>
 800e910:	1c43      	adds	r3, r0, #1
 800e912:	d102      	bne.n	800e91a <_sbrk_r+0x1a>
 800e914:	6823      	ldr	r3, [r4, #0]
 800e916:	b103      	cbz	r3, 800e91a <_sbrk_r+0x1a>
 800e918:	602b      	str	r3, [r5, #0]
 800e91a:	bd38      	pop	{r3, r4, r5, pc}
 800e91c:	200006d0 	.word	0x200006d0

0800e920 <__sread>:
 800e920:	b510      	push	{r4, lr}
 800e922:	460c      	mov	r4, r1
 800e924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e928:	f000 f8a8 	bl	800ea7c <_read_r>
 800e92c:	2800      	cmp	r0, #0
 800e92e:	bfab      	itete	ge
 800e930:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e932:	89a3      	ldrhlt	r3, [r4, #12]
 800e934:	181b      	addge	r3, r3, r0
 800e936:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e93a:	bfac      	ite	ge
 800e93c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e93e:	81a3      	strhlt	r3, [r4, #12]
 800e940:	bd10      	pop	{r4, pc}

0800e942 <__swrite>:
 800e942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e946:	461f      	mov	r7, r3
 800e948:	898b      	ldrh	r3, [r1, #12]
 800e94a:	05db      	lsls	r3, r3, #23
 800e94c:	4605      	mov	r5, r0
 800e94e:	460c      	mov	r4, r1
 800e950:	4616      	mov	r6, r2
 800e952:	d505      	bpl.n	800e960 <__swrite+0x1e>
 800e954:	2302      	movs	r3, #2
 800e956:	2200      	movs	r2, #0
 800e958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e95c:	f000 f868 	bl	800ea30 <_lseek_r>
 800e960:	89a3      	ldrh	r3, [r4, #12]
 800e962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e966:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e96a:	81a3      	strh	r3, [r4, #12]
 800e96c:	4632      	mov	r2, r6
 800e96e:	463b      	mov	r3, r7
 800e970:	4628      	mov	r0, r5
 800e972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e976:	f000 b817 	b.w	800e9a8 <_write_r>

0800e97a <__sseek>:
 800e97a:	b510      	push	{r4, lr}
 800e97c:	460c      	mov	r4, r1
 800e97e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e982:	f000 f855 	bl	800ea30 <_lseek_r>
 800e986:	1c43      	adds	r3, r0, #1
 800e988:	89a3      	ldrh	r3, [r4, #12]
 800e98a:	bf15      	itete	ne
 800e98c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e98e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e992:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e996:	81a3      	strheq	r3, [r4, #12]
 800e998:	bf18      	it	ne
 800e99a:	81a3      	strhne	r3, [r4, #12]
 800e99c:	bd10      	pop	{r4, pc}

0800e99e <__sclose>:
 800e99e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9a2:	f000 b813 	b.w	800e9cc <_close_r>
	...

0800e9a8 <_write_r>:
 800e9a8:	b538      	push	{r3, r4, r5, lr}
 800e9aa:	4c07      	ldr	r4, [pc, #28]	; (800e9c8 <_write_r+0x20>)
 800e9ac:	4605      	mov	r5, r0
 800e9ae:	4608      	mov	r0, r1
 800e9b0:	4611      	mov	r1, r2
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	6022      	str	r2, [r4, #0]
 800e9b6:	461a      	mov	r2, r3
 800e9b8:	f7fa f95c 	bl	8008c74 <_write>
 800e9bc:	1c43      	adds	r3, r0, #1
 800e9be:	d102      	bne.n	800e9c6 <_write_r+0x1e>
 800e9c0:	6823      	ldr	r3, [r4, #0]
 800e9c2:	b103      	cbz	r3, 800e9c6 <_write_r+0x1e>
 800e9c4:	602b      	str	r3, [r5, #0]
 800e9c6:	bd38      	pop	{r3, r4, r5, pc}
 800e9c8:	200006d0 	.word	0x200006d0

0800e9cc <_close_r>:
 800e9cc:	b538      	push	{r3, r4, r5, lr}
 800e9ce:	4c06      	ldr	r4, [pc, #24]	; (800e9e8 <_close_r+0x1c>)
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	4605      	mov	r5, r0
 800e9d4:	4608      	mov	r0, r1
 800e9d6:	6023      	str	r3, [r4, #0]
 800e9d8:	f7fc fe65 	bl	800b6a6 <_close>
 800e9dc:	1c43      	adds	r3, r0, #1
 800e9de:	d102      	bne.n	800e9e6 <_close_r+0x1a>
 800e9e0:	6823      	ldr	r3, [r4, #0]
 800e9e2:	b103      	cbz	r3, 800e9e6 <_close_r+0x1a>
 800e9e4:	602b      	str	r3, [r5, #0]
 800e9e6:	bd38      	pop	{r3, r4, r5, pc}
 800e9e8:	200006d0 	.word	0x200006d0

0800e9ec <_fstat_r>:
 800e9ec:	b538      	push	{r3, r4, r5, lr}
 800e9ee:	4c07      	ldr	r4, [pc, #28]	; (800ea0c <_fstat_r+0x20>)
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	4605      	mov	r5, r0
 800e9f4:	4608      	mov	r0, r1
 800e9f6:	4611      	mov	r1, r2
 800e9f8:	6023      	str	r3, [r4, #0]
 800e9fa:	f7fc fe60 	bl	800b6be <_fstat>
 800e9fe:	1c43      	adds	r3, r0, #1
 800ea00:	d102      	bne.n	800ea08 <_fstat_r+0x1c>
 800ea02:	6823      	ldr	r3, [r4, #0]
 800ea04:	b103      	cbz	r3, 800ea08 <_fstat_r+0x1c>
 800ea06:	602b      	str	r3, [r5, #0]
 800ea08:	bd38      	pop	{r3, r4, r5, pc}
 800ea0a:	bf00      	nop
 800ea0c:	200006d0 	.word	0x200006d0

0800ea10 <_isatty_r>:
 800ea10:	b538      	push	{r3, r4, r5, lr}
 800ea12:	4c06      	ldr	r4, [pc, #24]	; (800ea2c <_isatty_r+0x1c>)
 800ea14:	2300      	movs	r3, #0
 800ea16:	4605      	mov	r5, r0
 800ea18:	4608      	mov	r0, r1
 800ea1a:	6023      	str	r3, [r4, #0]
 800ea1c:	f7fc fe5f 	bl	800b6de <_isatty>
 800ea20:	1c43      	adds	r3, r0, #1
 800ea22:	d102      	bne.n	800ea2a <_isatty_r+0x1a>
 800ea24:	6823      	ldr	r3, [r4, #0]
 800ea26:	b103      	cbz	r3, 800ea2a <_isatty_r+0x1a>
 800ea28:	602b      	str	r3, [r5, #0]
 800ea2a:	bd38      	pop	{r3, r4, r5, pc}
 800ea2c:	200006d0 	.word	0x200006d0

0800ea30 <_lseek_r>:
 800ea30:	b538      	push	{r3, r4, r5, lr}
 800ea32:	4c07      	ldr	r4, [pc, #28]	; (800ea50 <_lseek_r+0x20>)
 800ea34:	4605      	mov	r5, r0
 800ea36:	4608      	mov	r0, r1
 800ea38:	4611      	mov	r1, r2
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	6022      	str	r2, [r4, #0]
 800ea3e:	461a      	mov	r2, r3
 800ea40:	f7fc fe58 	bl	800b6f4 <_lseek>
 800ea44:	1c43      	adds	r3, r0, #1
 800ea46:	d102      	bne.n	800ea4e <_lseek_r+0x1e>
 800ea48:	6823      	ldr	r3, [r4, #0]
 800ea4a:	b103      	cbz	r3, 800ea4e <_lseek_r+0x1e>
 800ea4c:	602b      	str	r3, [r5, #0]
 800ea4e:	bd38      	pop	{r3, r4, r5, pc}
 800ea50:	200006d0 	.word	0x200006d0

0800ea54 <__ascii_mbtowc>:
 800ea54:	b082      	sub	sp, #8
 800ea56:	b901      	cbnz	r1, 800ea5a <__ascii_mbtowc+0x6>
 800ea58:	a901      	add	r1, sp, #4
 800ea5a:	b142      	cbz	r2, 800ea6e <__ascii_mbtowc+0x1a>
 800ea5c:	b14b      	cbz	r3, 800ea72 <__ascii_mbtowc+0x1e>
 800ea5e:	7813      	ldrb	r3, [r2, #0]
 800ea60:	600b      	str	r3, [r1, #0]
 800ea62:	7812      	ldrb	r2, [r2, #0]
 800ea64:	1c10      	adds	r0, r2, #0
 800ea66:	bf18      	it	ne
 800ea68:	2001      	movne	r0, #1
 800ea6a:	b002      	add	sp, #8
 800ea6c:	4770      	bx	lr
 800ea6e:	4610      	mov	r0, r2
 800ea70:	e7fb      	b.n	800ea6a <__ascii_mbtowc+0x16>
 800ea72:	f06f 0001 	mvn.w	r0, #1
 800ea76:	e7f8      	b.n	800ea6a <__ascii_mbtowc+0x16>

0800ea78 <__malloc_lock>:
 800ea78:	4770      	bx	lr

0800ea7a <__malloc_unlock>:
 800ea7a:	4770      	bx	lr

0800ea7c <_read_r>:
 800ea7c:	b538      	push	{r3, r4, r5, lr}
 800ea7e:	4c07      	ldr	r4, [pc, #28]	; (800ea9c <_read_r+0x20>)
 800ea80:	4605      	mov	r5, r0
 800ea82:	4608      	mov	r0, r1
 800ea84:	4611      	mov	r1, r2
 800ea86:	2200      	movs	r2, #0
 800ea88:	6022      	str	r2, [r4, #0]
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	f7fc fdee 	bl	800b66c <_read>
 800ea90:	1c43      	adds	r3, r0, #1
 800ea92:	d102      	bne.n	800ea9a <_read_r+0x1e>
 800ea94:	6823      	ldr	r3, [r4, #0]
 800ea96:	b103      	cbz	r3, 800ea9a <_read_r+0x1e>
 800ea98:	602b      	str	r3, [r5, #0]
 800ea9a:	bd38      	pop	{r3, r4, r5, pc}
 800ea9c:	200006d0 	.word	0x200006d0

0800eaa0 <__ascii_wctomb>:
 800eaa0:	b149      	cbz	r1, 800eab6 <__ascii_wctomb+0x16>
 800eaa2:	2aff      	cmp	r2, #255	; 0xff
 800eaa4:	bf85      	ittet	hi
 800eaa6:	238a      	movhi	r3, #138	; 0x8a
 800eaa8:	6003      	strhi	r3, [r0, #0]
 800eaaa:	700a      	strbls	r2, [r1, #0]
 800eaac:	f04f 30ff 	movhi.w	r0, #4294967295
 800eab0:	bf98      	it	ls
 800eab2:	2001      	movls	r0, #1
 800eab4:	4770      	bx	lr
 800eab6:	4608      	mov	r0, r1
 800eab8:	4770      	bx	lr
	...

0800eabc <asinf>:
 800eabc:	b510      	push	{r4, lr}
 800eabe:	ed2d 8b02 	vpush	{d8}
 800eac2:	4c27      	ldr	r4, [pc, #156]	; (800eb60 <asinf+0xa4>)
 800eac4:	b08a      	sub	sp, #40	; 0x28
 800eac6:	eeb0 8a40 	vmov.f32	s16, s0
 800eaca:	f000 f9b5 	bl	800ee38 <__ieee754_asinf>
 800eace:	f994 3000 	ldrsb.w	r3, [r4]
 800ead2:	3301      	adds	r3, #1
 800ead4:	eef0 8a40 	vmov.f32	s17, s0
 800ead8:	d03c      	beq.n	800eb54 <asinf+0x98>
 800eada:	eeb4 8a48 	vcmp.f32	s16, s16
 800eade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eae2:	d637      	bvs.n	800eb54 <asinf+0x98>
 800eae4:	eeb0 0a48 	vmov.f32	s0, s16
 800eae8:	f000 fede 	bl	800f8a8 <fabsf>
 800eaec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eaf0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800eaf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaf8:	dd2c      	ble.n	800eb54 <asinf+0x98>
 800eafa:	2301      	movs	r3, #1
 800eafc:	9300      	str	r3, [sp, #0]
 800eafe:	4b19      	ldr	r3, [pc, #100]	; (800eb64 <asinf+0xa8>)
 800eb00:	9301      	str	r3, [sp, #4]
 800eb02:	ee18 0a10 	vmov	r0, s16
 800eb06:	2300      	movs	r3, #0
 800eb08:	9308      	str	r3, [sp, #32]
 800eb0a:	f7f1 fd1d 	bl	8000548 <__aeabi_f2d>
 800eb0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb16:	4814      	ldr	r0, [pc, #80]	; (800eb68 <asinf+0xac>)
 800eb18:	f000 fdea 	bl	800f6f0 <nan>
 800eb1c:	f994 3000 	ldrsb.w	r3, [r4]
 800eb20:	2b02      	cmp	r3, #2
 800eb22:	ed8d 0b06 	vstr	d0, [sp, #24]
 800eb26:	d104      	bne.n	800eb32 <asinf+0x76>
 800eb28:	f7fd fc0a 	bl	800c340 <__errno>
 800eb2c:	2321      	movs	r3, #33	; 0x21
 800eb2e:	6003      	str	r3, [r0, #0]
 800eb30:	e004      	b.n	800eb3c <asinf+0x80>
 800eb32:	4668      	mov	r0, sp
 800eb34:	f000 fdd9 	bl	800f6ea <matherr>
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	d0f5      	beq.n	800eb28 <asinf+0x6c>
 800eb3c:	9b08      	ldr	r3, [sp, #32]
 800eb3e:	b11b      	cbz	r3, 800eb48 <asinf+0x8c>
 800eb40:	f7fd fbfe 	bl	800c340 <__errno>
 800eb44:	9b08      	ldr	r3, [sp, #32]
 800eb46:	6003      	str	r3, [r0, #0]
 800eb48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb4c:	f7f2 f82c 	bl	8000ba8 <__aeabi_d2f>
 800eb50:	ee08 0a90 	vmov	s17, r0
 800eb54:	eeb0 0a68 	vmov.f32	s0, s17
 800eb58:	b00a      	add	sp, #40	; 0x28
 800eb5a:	ecbd 8b02 	vpop	{d8}
 800eb5e:	bd10      	pop	{r4, pc}
 800eb60:	200001e0 	.word	0x200001e0
 800eb64:	08010168 	.word	0x08010168
 800eb68:	08010051 	.word	0x08010051

0800eb6c <atan2f>:
 800eb6c:	f000 ba4c 	b.w	800f008 <__ieee754_atan2f>

0800eb70 <powf>:
 800eb70:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800eb74:	ed2d 8b04 	vpush	{d8-d9}
 800eb78:	4ca7      	ldr	r4, [pc, #668]	; (800ee18 <powf+0x2a8>)
 800eb7a:	b08a      	sub	sp, #40	; 0x28
 800eb7c:	eef0 8a40 	vmov.f32	s17, s0
 800eb80:	eeb0 8a60 	vmov.f32	s16, s1
 800eb84:	f000 faee 	bl	800f164 <__ieee754_powf>
 800eb88:	f994 5000 	ldrsb.w	r5, [r4]
 800eb8c:	1c6b      	adds	r3, r5, #1
 800eb8e:	eeb0 9a40 	vmov.f32	s18, s0
 800eb92:	4626      	mov	r6, r4
 800eb94:	d05f      	beq.n	800ec56 <powf+0xe6>
 800eb96:	eeb4 8a48 	vcmp.f32	s16, s16
 800eb9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb9e:	d65a      	bvs.n	800ec56 <powf+0xe6>
 800eba0:	eef4 8a68 	vcmp.f32	s17, s17
 800eba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba8:	d721      	bvc.n	800ebee <powf+0x7e>
 800ebaa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ebae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb2:	d150      	bne.n	800ec56 <powf+0xe6>
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	4b98      	ldr	r3, [pc, #608]	; (800ee1c <powf+0x2ac>)
 800ebba:	9301      	str	r3, [sp, #4]
 800ebbc:	ee18 0a90 	vmov	r0, s17
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	9308      	str	r3, [sp, #32]
 800ebc4:	f7f1 fcc0 	bl	8000548 <__aeabi_f2d>
 800ebc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebcc:	ee18 0a10 	vmov	r0, s16
 800ebd0:	f7f1 fcba 	bl	8000548 <__aeabi_f2d>
 800ebd4:	4b92      	ldr	r3, [pc, #584]	; (800ee20 <powf+0x2b0>)
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	2d02      	cmp	r5, #2
 800ebda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ebde:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ebe2:	d032      	beq.n	800ec4a <powf+0xda>
 800ebe4:	4668      	mov	r0, sp
 800ebe6:	f000 fd80 	bl	800f6ea <matherr>
 800ebea:	bb40      	cbnz	r0, 800ec3e <powf+0xce>
 800ebec:	e065      	b.n	800ecba <powf+0x14a>
 800ebee:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800ee24 <powf+0x2b4>
 800ebf2:	eef4 8a69 	vcmp.f32	s17, s19
 800ebf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebfa:	d163      	bne.n	800ecc4 <powf+0x154>
 800ebfc:	eeb4 8a69 	vcmp.f32	s16, s19
 800ec00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec04:	d12e      	bne.n	800ec64 <powf+0xf4>
 800ec06:	2301      	movs	r3, #1
 800ec08:	9300      	str	r3, [sp, #0]
 800ec0a:	4b84      	ldr	r3, [pc, #528]	; (800ee1c <powf+0x2ac>)
 800ec0c:	9301      	str	r3, [sp, #4]
 800ec0e:	ee18 0a90 	vmov	r0, s17
 800ec12:	2300      	movs	r3, #0
 800ec14:	9308      	str	r3, [sp, #32]
 800ec16:	f7f1 fc97 	bl	8000548 <__aeabi_f2d>
 800ec1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec1e:	ee18 0a10 	vmov	r0, s16
 800ec22:	f7f1 fc91 	bl	8000548 <__aeabi_f2d>
 800ec26:	2200      	movs	r2, #0
 800ec28:	2300      	movs	r3, #0
 800ec2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ec2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ec32:	2d00      	cmp	r5, #0
 800ec34:	d0d6      	beq.n	800ebe4 <powf+0x74>
 800ec36:	4b7a      	ldr	r3, [pc, #488]	; (800ee20 <powf+0x2b0>)
 800ec38:	2200      	movs	r2, #0
 800ec3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ec3e:	9b08      	ldr	r3, [sp, #32]
 800ec40:	b11b      	cbz	r3, 800ec4a <powf+0xda>
 800ec42:	f7fd fb7d 	bl	800c340 <__errno>
 800ec46:	9b08      	ldr	r3, [sp, #32]
 800ec48:	6003      	str	r3, [r0, #0]
 800ec4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec4e:	f7f1 ffab 	bl	8000ba8 <__aeabi_d2f>
 800ec52:	ee09 0a10 	vmov	s18, r0
 800ec56:	eeb0 0a49 	vmov.f32	s0, s18
 800ec5a:	b00a      	add	sp, #40	; 0x28
 800ec5c:	ecbd 8b04 	vpop	{d8-d9}
 800ec60:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800ec64:	eeb0 0a48 	vmov.f32	s0, s16
 800ec68:	f000 fe25 	bl	800f8b6 <finitef>
 800ec6c:	2800      	cmp	r0, #0
 800ec6e:	d0f2      	beq.n	800ec56 <powf+0xe6>
 800ec70:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ec74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec78:	d5ed      	bpl.n	800ec56 <powf+0xe6>
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	9300      	str	r3, [sp, #0]
 800ec7e:	4b67      	ldr	r3, [pc, #412]	; (800ee1c <powf+0x2ac>)
 800ec80:	9301      	str	r3, [sp, #4]
 800ec82:	ee18 0a90 	vmov	r0, s17
 800ec86:	2300      	movs	r3, #0
 800ec88:	9308      	str	r3, [sp, #32]
 800ec8a:	f7f1 fc5d 	bl	8000548 <__aeabi_f2d>
 800ec8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec92:	ee18 0a10 	vmov	r0, s16
 800ec96:	f7f1 fc57 	bl	8000548 <__aeabi_f2d>
 800ec9a:	f994 3000 	ldrsb.w	r3, [r4]
 800ec9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eca2:	b923      	cbnz	r3, 800ecae <powf+0x13e>
 800eca4:	2200      	movs	r2, #0
 800eca6:	2300      	movs	r3, #0
 800eca8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ecac:	e79a      	b.n	800ebe4 <powf+0x74>
 800ecae:	495e      	ldr	r1, [pc, #376]	; (800ee28 <powf+0x2b8>)
 800ecb0:	2000      	movs	r0, #0
 800ecb2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ecb6:	2b02      	cmp	r3, #2
 800ecb8:	d194      	bne.n	800ebe4 <powf+0x74>
 800ecba:	f7fd fb41 	bl	800c340 <__errno>
 800ecbe:	2321      	movs	r3, #33	; 0x21
 800ecc0:	6003      	str	r3, [r0, #0]
 800ecc2:	e7bc      	b.n	800ec3e <powf+0xce>
 800ecc4:	f000 fdf7 	bl	800f8b6 <finitef>
 800ecc8:	4605      	mov	r5, r0
 800ecca:	2800      	cmp	r0, #0
 800eccc:	d173      	bne.n	800edb6 <powf+0x246>
 800ecce:	eeb0 0a68 	vmov.f32	s0, s17
 800ecd2:	f000 fdf0 	bl	800f8b6 <finitef>
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	d06d      	beq.n	800edb6 <powf+0x246>
 800ecda:	eeb0 0a48 	vmov.f32	s0, s16
 800ecde:	f000 fdea 	bl	800f8b6 <finitef>
 800ece2:	2800      	cmp	r0, #0
 800ece4:	d067      	beq.n	800edb6 <powf+0x246>
 800ece6:	ee18 0a90 	vmov	r0, s17
 800ecea:	f7f1 fc2d 	bl	8000548 <__aeabi_f2d>
 800ecee:	4680      	mov	r8, r0
 800ecf0:	ee18 0a10 	vmov	r0, s16
 800ecf4:	4689      	mov	r9, r1
 800ecf6:	f7f1 fc27 	bl	8000548 <__aeabi_f2d>
 800ecfa:	eeb4 9a49 	vcmp.f32	s18, s18
 800ecfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed02:	f994 4000 	ldrsb.w	r4, [r4]
 800ed06:	4b45      	ldr	r3, [pc, #276]	; (800ee1c <powf+0x2ac>)
 800ed08:	d713      	bvc.n	800ed32 <powf+0x1c2>
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	e9cd 2300 	strd	r2, r3, [sp]
 800ed10:	9508      	str	r5, [sp, #32]
 800ed12:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ed16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed1a:	2c00      	cmp	r4, #0
 800ed1c:	d0c2      	beq.n	800eca4 <powf+0x134>
 800ed1e:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800ed22:	ee17 0a90 	vmov	r0, s15
 800ed26:	f7f1 fc0f 	bl	8000548 <__aeabi_f2d>
 800ed2a:	2c02      	cmp	r4, #2
 800ed2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ed30:	e7c2      	b.n	800ecb8 <powf+0x148>
 800ed32:	2203      	movs	r2, #3
 800ed34:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ed38:	e9cd 2300 	strd	r2, r3, [sp]
 800ed3c:	9508      	str	r5, [sp, #32]
 800ed3e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ed42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed46:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ed4a:	b9fc      	cbnz	r4, 800ed8c <powf+0x21c>
 800ed4c:	4b37      	ldr	r3, [pc, #220]	; (800ee2c <powf+0x2bc>)
 800ed4e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800ed52:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ed56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ed5e:	d553      	bpl.n	800ee08 <powf+0x298>
 800ed60:	eeb0 0a48 	vmov.f32	s0, s16
 800ed64:	f000 fdb8 	bl	800f8d8 <rintf>
 800ed68:	eeb4 0a48 	vcmp.f32	s0, s16
 800ed6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed70:	d004      	beq.n	800ed7c <powf+0x20c>
 800ed72:	4b2f      	ldr	r3, [pc, #188]	; (800ee30 <powf+0x2c0>)
 800ed74:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ed78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ed7c:	f996 3000 	ldrsb.w	r3, [r6]
 800ed80:	2b02      	cmp	r3, #2
 800ed82:	d141      	bne.n	800ee08 <powf+0x298>
 800ed84:	f7fd fadc 	bl	800c340 <__errno>
 800ed88:	2322      	movs	r3, #34	; 0x22
 800ed8a:	e799      	b.n	800ecc0 <powf+0x150>
 800ed8c:	4b29      	ldr	r3, [pc, #164]	; (800ee34 <powf+0x2c4>)
 800ed8e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800ed92:	2200      	movs	r2, #0
 800ed94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ed9c:	d5ee      	bpl.n	800ed7c <powf+0x20c>
 800ed9e:	eeb0 0a48 	vmov.f32	s0, s16
 800eda2:	f000 fd99 	bl	800f8d8 <rintf>
 800eda6:	eeb4 0a48 	vcmp.f32	s0, s16
 800edaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edae:	d0e5      	beq.n	800ed7c <powf+0x20c>
 800edb0:	2200      	movs	r2, #0
 800edb2:	4b1d      	ldr	r3, [pc, #116]	; (800ee28 <powf+0x2b8>)
 800edb4:	e7e0      	b.n	800ed78 <powf+0x208>
 800edb6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800edba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edbe:	f47f af4a 	bne.w	800ec56 <powf+0xe6>
 800edc2:	eeb0 0a68 	vmov.f32	s0, s17
 800edc6:	f000 fd76 	bl	800f8b6 <finitef>
 800edca:	2800      	cmp	r0, #0
 800edcc:	f43f af43 	beq.w	800ec56 <powf+0xe6>
 800edd0:	eeb0 0a48 	vmov.f32	s0, s16
 800edd4:	f000 fd6f 	bl	800f8b6 <finitef>
 800edd8:	2800      	cmp	r0, #0
 800edda:	f43f af3c 	beq.w	800ec56 <powf+0xe6>
 800edde:	2304      	movs	r3, #4
 800ede0:	9300      	str	r3, [sp, #0]
 800ede2:	4b0e      	ldr	r3, [pc, #56]	; (800ee1c <powf+0x2ac>)
 800ede4:	9301      	str	r3, [sp, #4]
 800ede6:	ee18 0a90 	vmov	r0, s17
 800edea:	2300      	movs	r3, #0
 800edec:	9308      	str	r3, [sp, #32]
 800edee:	f7f1 fbab 	bl	8000548 <__aeabi_f2d>
 800edf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edf6:	ee18 0a10 	vmov	r0, s16
 800edfa:	f7f1 fba5 	bl	8000548 <__aeabi_f2d>
 800edfe:	2200      	movs	r2, #0
 800ee00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee04:	2300      	movs	r3, #0
 800ee06:	e7b7      	b.n	800ed78 <powf+0x208>
 800ee08:	4668      	mov	r0, sp
 800ee0a:	f000 fc6e 	bl	800f6ea <matherr>
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	f47f af15 	bne.w	800ec3e <powf+0xce>
 800ee14:	e7b6      	b.n	800ed84 <powf+0x214>
 800ee16:	bf00      	nop
 800ee18:	200001e0 	.word	0x200001e0
 800ee1c:	0801016e 	.word	0x0801016e
 800ee20:	3ff00000 	.word	0x3ff00000
 800ee24:	00000000 	.word	0x00000000
 800ee28:	fff00000 	.word	0xfff00000
 800ee2c:	47efffff 	.word	0x47efffff
 800ee30:	c7efffff 	.word	0xc7efffff
 800ee34:	7ff00000 	.word	0x7ff00000

0800ee38 <__ieee754_asinf>:
 800ee38:	b538      	push	{r3, r4, r5, lr}
 800ee3a:	ee10 5a10 	vmov	r5, s0
 800ee3e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800ee42:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800ee46:	ed2d 8b04 	vpush	{d8-d9}
 800ee4a:	d10c      	bne.n	800ee66 <__ieee754_asinf+0x2e>
 800ee4c:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800efc8 <__ieee754_asinf+0x190>
 800ee50:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800efcc <__ieee754_asinf+0x194>
 800ee54:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ee58:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ee5c:	eeb0 0a67 	vmov.f32	s0, s15
 800ee60:	ecbd 8b04 	vpop	{d8-d9}
 800ee64:	bd38      	pop	{r3, r4, r5, pc}
 800ee66:	dd04      	ble.n	800ee72 <__ieee754_asinf+0x3a>
 800ee68:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ee6c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ee70:	e7f6      	b.n	800ee60 <__ieee754_asinf+0x28>
 800ee72:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800ee76:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ee7a:	da0b      	bge.n	800ee94 <__ieee754_asinf+0x5c>
 800ee7c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800ee80:	da52      	bge.n	800ef28 <__ieee754_asinf+0xf0>
 800ee82:	eddf 7a53 	vldr	s15, [pc, #332]	; 800efd0 <__ieee754_asinf+0x198>
 800ee86:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ee8a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800ee8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee92:	dce5      	bgt.n	800ee60 <__ieee754_asinf+0x28>
 800ee94:	f000 fd08 	bl	800f8a8 <fabsf>
 800ee98:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800ee9c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800eea0:	ee20 8a08 	vmul.f32	s16, s0, s16
 800eea4:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800efd4 <__ieee754_asinf+0x19c>
 800eea8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800efd8 <__ieee754_asinf+0x1a0>
 800eeac:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800efdc <__ieee754_asinf+0x1a4>
 800eeb0:	eea8 7a27 	vfma.f32	s14, s16, s15
 800eeb4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800efe0 <__ieee754_asinf+0x1a8>
 800eeb8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800eebc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800efe4 <__ieee754_asinf+0x1ac>
 800eec0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800eec4:	eddf 7a48 	vldr	s15, [pc, #288]	; 800efe8 <__ieee754_asinf+0x1b0>
 800eec8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800eecc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800efec <__ieee754_asinf+0x1b4>
 800eed0:	eea7 9a88 	vfma.f32	s18, s15, s16
 800eed4:	eddf 7a46 	vldr	s15, [pc, #280]	; 800eff0 <__ieee754_asinf+0x1b8>
 800eed8:	eee8 7a07 	vfma.f32	s15, s16, s14
 800eedc:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800eff4 <__ieee754_asinf+0x1bc>
 800eee0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800eee4:	eddf 7a44 	vldr	s15, [pc, #272]	; 800eff8 <__ieee754_asinf+0x1c0>
 800eee8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800eeec:	eeb0 0a48 	vmov.f32	s0, s16
 800eef0:	eee7 8a88 	vfma.f32	s17, s15, s16
 800eef4:	f000 fbf6 	bl	800f6e4 <__ieee754_sqrtf>
 800eef8:	4b40      	ldr	r3, [pc, #256]	; (800effc <__ieee754_asinf+0x1c4>)
 800eefa:	ee29 9a08 	vmul.f32	s18, s18, s16
 800eefe:	429c      	cmp	r4, r3
 800ef00:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800ef04:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ef08:	dd3d      	ble.n	800ef86 <__ieee754_asinf+0x14e>
 800ef0a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800ef0e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800f000 <__ieee754_asinf+0x1c8>
 800ef12:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ef16:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800efcc <__ieee754_asinf+0x194>
 800ef1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ef1e:	2d00      	cmp	r5, #0
 800ef20:	bfd8      	it	le
 800ef22:	eeb1 0a40 	vnegle.f32	s0, s0
 800ef26:	e79b      	b.n	800ee60 <__ieee754_asinf+0x28>
 800ef28:	ee60 7a00 	vmul.f32	s15, s0, s0
 800ef2c:	eddf 6a29 	vldr	s13, [pc, #164]	; 800efd4 <__ieee754_asinf+0x19c>
 800ef30:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800efd8 <__ieee754_asinf+0x1a0>
 800ef34:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800efec <__ieee754_asinf+0x1b4>
 800ef38:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ef3c:	eddf 6a28 	vldr	s13, [pc, #160]	; 800efe0 <__ieee754_asinf+0x1a8>
 800ef40:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ef44:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800efe4 <__ieee754_asinf+0x1ac>
 800ef48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ef4c:	eddf 6a26 	vldr	s13, [pc, #152]	; 800efe8 <__ieee754_asinf+0x1b0>
 800ef50:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ef54:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800efdc <__ieee754_asinf+0x1a4>
 800ef58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ef5c:	eddf 6a24 	vldr	s13, [pc, #144]	; 800eff0 <__ieee754_asinf+0x1b8>
 800ef60:	eee7 6a86 	vfma.f32	s13, s15, s12
 800ef64:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800eff4 <__ieee754_asinf+0x1bc>
 800ef68:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800ef6c:	eddf 6a22 	vldr	s13, [pc, #136]	; 800eff8 <__ieee754_asinf+0x1c0>
 800ef70:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ef74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef78:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800ef7c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800ef80:	eea0 0a27 	vfma.f32	s0, s0, s15
 800ef84:	e76c      	b.n	800ee60 <__ieee754_asinf+0x28>
 800ef86:	ee10 3a10 	vmov	r3, s0
 800ef8a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ef8e:	f023 030f 	bic.w	r3, r3, #15
 800ef92:	ee07 3a90 	vmov	s15, r3
 800ef96:	eef1 6a67 	vneg.f32	s13, s15
 800ef9a:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800ef9e:	ee70 5a00 	vadd.f32	s11, s0, s0
 800efa2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800efa6:	eddf 7a08 	vldr	s15, [pc, #32]	; 800efc8 <__ieee754_asinf+0x190>
 800efaa:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800efae:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800f004 <__ieee754_asinf+0x1cc>
 800efb2:	eee5 7a47 	vfms.f32	s15, s10, s14
 800efb6:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800efba:	eeb0 6a40 	vmov.f32	s12, s0
 800efbe:	eea6 6a87 	vfma.f32	s12, s13, s14
 800efc2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800efc6:	e7a8      	b.n	800ef1a <__ieee754_asinf+0xe2>
 800efc8:	b33bbd2e 	.word	0xb33bbd2e
 800efcc:	3fc90fdb 	.word	0x3fc90fdb
 800efd0:	7149f2ca 	.word	0x7149f2ca
 800efd4:	3811ef08 	.word	0x3811ef08
 800efd8:	3a4f7f04 	.word	0x3a4f7f04
 800efdc:	3e2aaaab 	.word	0x3e2aaaab
 800efe0:	bd241146 	.word	0xbd241146
 800efe4:	3e4e0aa8 	.word	0x3e4e0aa8
 800efe8:	bea6b090 	.word	0xbea6b090
 800efec:	3d9dc62e 	.word	0x3d9dc62e
 800eff0:	bf303361 	.word	0xbf303361
 800eff4:	4001572d 	.word	0x4001572d
 800eff8:	c019d139 	.word	0xc019d139
 800effc:	3f799999 	.word	0x3f799999
 800f000:	333bbd2e 	.word	0x333bbd2e
 800f004:	3f490fdb 	.word	0x3f490fdb

0800f008 <__ieee754_atan2f>:
 800f008:	ee10 2a90 	vmov	r2, s1
 800f00c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f010:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f014:	b510      	push	{r4, lr}
 800f016:	eef0 7a40 	vmov.f32	s15, s0
 800f01a:	dc06      	bgt.n	800f02a <__ieee754_atan2f+0x22>
 800f01c:	ee10 0a10 	vmov	r0, s0
 800f020:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f024:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f028:	dd04      	ble.n	800f034 <__ieee754_atan2f+0x2c>
 800f02a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f02e:	eeb0 0a67 	vmov.f32	s0, s15
 800f032:	bd10      	pop	{r4, pc}
 800f034:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800f038:	d103      	bne.n	800f042 <__ieee754_atan2f+0x3a>
 800f03a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f03e:	f000 bb5f 	b.w	800f700 <atanf>
 800f042:	1794      	asrs	r4, r2, #30
 800f044:	f004 0402 	and.w	r4, r4, #2
 800f048:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f04c:	b943      	cbnz	r3, 800f060 <__ieee754_atan2f+0x58>
 800f04e:	2c02      	cmp	r4, #2
 800f050:	d06e      	beq.n	800f130 <__ieee754_atan2f+0x128>
 800f052:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800f138 <__ieee754_atan2f+0x130>
 800f056:	2c03      	cmp	r4, #3
 800f058:	bf08      	it	eq
 800f05a:	eef0 7a47 	vmoveq.f32	s15, s14
 800f05e:	e7e6      	b.n	800f02e <__ieee754_atan2f+0x26>
 800f060:	b941      	cbnz	r1, 800f074 <__ieee754_atan2f+0x6c>
 800f062:	eddf 7a36 	vldr	s15, [pc, #216]	; 800f13c <__ieee754_atan2f+0x134>
 800f066:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800f140 <__ieee754_atan2f+0x138>
 800f06a:	2800      	cmp	r0, #0
 800f06c:	bfb8      	it	lt
 800f06e:	eef0 7a47 	vmovlt.f32	s15, s14
 800f072:	e7dc      	b.n	800f02e <__ieee754_atan2f+0x26>
 800f074:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f078:	d122      	bne.n	800f0c0 <__ieee754_atan2f+0xb8>
 800f07a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f07e:	d112      	bne.n	800f0a6 <__ieee754_atan2f+0x9e>
 800f080:	2c02      	cmp	r4, #2
 800f082:	d00a      	beq.n	800f09a <__ieee754_atan2f+0x92>
 800f084:	2c03      	cmp	r4, #3
 800f086:	d00b      	beq.n	800f0a0 <__ieee754_atan2f+0x98>
 800f088:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800f144 <__ieee754_atan2f+0x13c>
 800f08c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800f148 <__ieee754_atan2f+0x140>
 800f090:	2c01      	cmp	r4, #1
 800f092:	bf18      	it	ne
 800f094:	eef0 7a47 	vmovne.f32	s15, s14
 800f098:	e7c9      	b.n	800f02e <__ieee754_atan2f+0x26>
 800f09a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800f14c <__ieee754_atan2f+0x144>
 800f09e:	e7c6      	b.n	800f02e <__ieee754_atan2f+0x26>
 800f0a0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f150 <__ieee754_atan2f+0x148>
 800f0a4:	e7c3      	b.n	800f02e <__ieee754_atan2f+0x26>
 800f0a6:	2c02      	cmp	r4, #2
 800f0a8:	d042      	beq.n	800f130 <__ieee754_atan2f+0x128>
 800f0aa:	2c03      	cmp	r4, #3
 800f0ac:	d005      	beq.n	800f0ba <__ieee754_atan2f+0xb2>
 800f0ae:	2c01      	cmp	r4, #1
 800f0b0:	eddf 7a28 	vldr	s15, [pc, #160]	; 800f154 <__ieee754_atan2f+0x14c>
 800f0b4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800f158 <__ieee754_atan2f+0x150>
 800f0b8:	e7eb      	b.n	800f092 <__ieee754_atan2f+0x8a>
 800f0ba:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f138 <__ieee754_atan2f+0x130>
 800f0be:	e7b6      	b.n	800f02e <__ieee754_atan2f+0x26>
 800f0c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f0c4:	d0cd      	beq.n	800f062 <__ieee754_atan2f+0x5a>
 800f0c6:	1a5b      	subs	r3, r3, r1
 800f0c8:	15db      	asrs	r3, r3, #23
 800f0ca:	2b3c      	cmp	r3, #60	; 0x3c
 800f0cc:	dc1a      	bgt.n	800f104 <__ieee754_atan2f+0xfc>
 800f0ce:	2a00      	cmp	r2, #0
 800f0d0:	da01      	bge.n	800f0d6 <__ieee754_atan2f+0xce>
 800f0d2:	333c      	adds	r3, #60	; 0x3c
 800f0d4:	db19      	blt.n	800f10a <__ieee754_atan2f+0x102>
 800f0d6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f0da:	f000 fbe5 	bl	800f8a8 <fabsf>
 800f0de:	f000 fb0f 	bl	800f700 <atanf>
 800f0e2:	eef0 7a40 	vmov.f32	s15, s0
 800f0e6:	2c01      	cmp	r4, #1
 800f0e8:	d012      	beq.n	800f110 <__ieee754_atan2f+0x108>
 800f0ea:	2c02      	cmp	r4, #2
 800f0ec:	d017      	beq.n	800f11e <__ieee754_atan2f+0x116>
 800f0ee:	2c00      	cmp	r4, #0
 800f0f0:	d09d      	beq.n	800f02e <__ieee754_atan2f+0x26>
 800f0f2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800f15c <__ieee754_atan2f+0x154>
 800f0f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f0fa:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800f160 <__ieee754_atan2f+0x158>
 800f0fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f102:	e794      	b.n	800f02e <__ieee754_atan2f+0x26>
 800f104:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800f13c <__ieee754_atan2f+0x134>
 800f108:	e7ed      	b.n	800f0e6 <__ieee754_atan2f+0xde>
 800f10a:	eddf 7a13 	vldr	s15, [pc, #76]	; 800f158 <__ieee754_atan2f+0x150>
 800f10e:	e7ea      	b.n	800f0e6 <__ieee754_atan2f+0xde>
 800f110:	ee17 3a90 	vmov	r3, s15
 800f114:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f118:	ee07 3a90 	vmov	s15, r3
 800f11c:	e787      	b.n	800f02e <__ieee754_atan2f+0x26>
 800f11e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800f15c <__ieee754_atan2f+0x154>
 800f122:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f126:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800f160 <__ieee754_atan2f+0x158>
 800f12a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f12e:	e77e      	b.n	800f02e <__ieee754_atan2f+0x26>
 800f130:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800f160 <__ieee754_atan2f+0x158>
 800f134:	e77b      	b.n	800f02e <__ieee754_atan2f+0x26>
 800f136:	bf00      	nop
 800f138:	c0490fdb 	.word	0xc0490fdb
 800f13c:	3fc90fdb 	.word	0x3fc90fdb
 800f140:	bfc90fdb 	.word	0xbfc90fdb
 800f144:	bf490fdb 	.word	0xbf490fdb
 800f148:	3f490fdb 	.word	0x3f490fdb
 800f14c:	4016cbe4 	.word	0x4016cbe4
 800f150:	c016cbe4 	.word	0xc016cbe4
 800f154:	80000000 	.word	0x80000000
 800f158:	00000000 	.word	0x00000000
 800f15c:	33bbbd2e 	.word	0x33bbbd2e
 800f160:	40490fdb 	.word	0x40490fdb

0800f164 <__ieee754_powf>:
 800f164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f168:	ee10 5a90 	vmov	r5, s1
 800f16c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800f170:	ed2d 8b02 	vpush	{d8}
 800f174:	eeb0 8a40 	vmov.f32	s16, s0
 800f178:	eef0 8a60 	vmov.f32	s17, s1
 800f17c:	f000 8293 	beq.w	800f6a6 <__ieee754_powf+0x542>
 800f180:	ee10 8a10 	vmov	r8, s0
 800f184:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800f188:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f18c:	dc06      	bgt.n	800f19c <__ieee754_powf+0x38>
 800f18e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800f192:	dd0a      	ble.n	800f1aa <__ieee754_powf+0x46>
 800f194:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f198:	f000 8285 	beq.w	800f6a6 <__ieee754_powf+0x542>
 800f19c:	ecbd 8b02 	vpop	{d8}
 800f1a0:	48d9      	ldr	r0, [pc, #868]	; (800f508 <__ieee754_powf+0x3a4>)
 800f1a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1a6:	f000 bb91 	b.w	800f8cc <nanf>
 800f1aa:	f1b8 0f00 	cmp.w	r8, #0
 800f1ae:	da1d      	bge.n	800f1ec <__ieee754_powf+0x88>
 800f1b0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800f1b4:	da2c      	bge.n	800f210 <__ieee754_powf+0xac>
 800f1b6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800f1ba:	db30      	blt.n	800f21e <__ieee754_powf+0xba>
 800f1bc:	15fb      	asrs	r3, r7, #23
 800f1be:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800f1c2:	fa47 f603 	asr.w	r6, r7, r3
 800f1c6:	fa06 f303 	lsl.w	r3, r6, r3
 800f1ca:	42bb      	cmp	r3, r7
 800f1cc:	d127      	bne.n	800f21e <__ieee754_powf+0xba>
 800f1ce:	f006 0601 	and.w	r6, r6, #1
 800f1d2:	f1c6 0602 	rsb	r6, r6, #2
 800f1d6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800f1da:	d122      	bne.n	800f222 <__ieee754_powf+0xbe>
 800f1dc:	2d00      	cmp	r5, #0
 800f1de:	f280 8268 	bge.w	800f6b2 <__ieee754_powf+0x54e>
 800f1e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f1e6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f1ea:	e00d      	b.n	800f208 <__ieee754_powf+0xa4>
 800f1ec:	2600      	movs	r6, #0
 800f1ee:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800f1f2:	d1f0      	bne.n	800f1d6 <__ieee754_powf+0x72>
 800f1f4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f1f8:	f000 8255 	beq.w	800f6a6 <__ieee754_powf+0x542>
 800f1fc:	dd0a      	ble.n	800f214 <__ieee754_powf+0xb0>
 800f1fe:	2d00      	cmp	r5, #0
 800f200:	f280 8254 	bge.w	800f6ac <__ieee754_powf+0x548>
 800f204:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800f50c <__ieee754_powf+0x3a8>
 800f208:	ecbd 8b02 	vpop	{d8}
 800f20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f210:	2602      	movs	r6, #2
 800f212:	e7ec      	b.n	800f1ee <__ieee754_powf+0x8a>
 800f214:	2d00      	cmp	r5, #0
 800f216:	daf5      	bge.n	800f204 <__ieee754_powf+0xa0>
 800f218:	eeb1 0a68 	vneg.f32	s0, s17
 800f21c:	e7f4      	b.n	800f208 <__ieee754_powf+0xa4>
 800f21e:	2600      	movs	r6, #0
 800f220:	e7d9      	b.n	800f1d6 <__ieee754_powf+0x72>
 800f222:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800f226:	d102      	bne.n	800f22e <__ieee754_powf+0xca>
 800f228:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f22c:	e7ec      	b.n	800f208 <__ieee754_powf+0xa4>
 800f22e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800f232:	eeb0 0a48 	vmov.f32	s0, s16
 800f236:	d108      	bne.n	800f24a <__ieee754_powf+0xe6>
 800f238:	f1b8 0f00 	cmp.w	r8, #0
 800f23c:	db05      	blt.n	800f24a <__ieee754_powf+0xe6>
 800f23e:	ecbd 8b02 	vpop	{d8}
 800f242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f246:	f000 ba4d 	b.w	800f6e4 <__ieee754_sqrtf>
 800f24a:	f000 fb2d 	bl	800f8a8 <fabsf>
 800f24e:	b124      	cbz	r4, 800f25a <__ieee754_powf+0xf6>
 800f250:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800f254:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800f258:	d117      	bne.n	800f28a <__ieee754_powf+0x126>
 800f25a:	2d00      	cmp	r5, #0
 800f25c:	bfbc      	itt	lt
 800f25e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800f262:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f266:	f1b8 0f00 	cmp.w	r8, #0
 800f26a:	dacd      	bge.n	800f208 <__ieee754_powf+0xa4>
 800f26c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800f270:	ea54 0306 	orrs.w	r3, r4, r6
 800f274:	d104      	bne.n	800f280 <__ieee754_powf+0x11c>
 800f276:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f27a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f27e:	e7c3      	b.n	800f208 <__ieee754_powf+0xa4>
 800f280:	2e01      	cmp	r6, #1
 800f282:	d1c1      	bne.n	800f208 <__ieee754_powf+0xa4>
 800f284:	eeb1 0a40 	vneg.f32	s0, s0
 800f288:	e7be      	b.n	800f208 <__ieee754_powf+0xa4>
 800f28a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800f28e:	3801      	subs	r0, #1
 800f290:	ea56 0300 	orrs.w	r3, r6, r0
 800f294:	d104      	bne.n	800f2a0 <__ieee754_powf+0x13c>
 800f296:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f29a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f29e:	e7b3      	b.n	800f208 <__ieee754_powf+0xa4>
 800f2a0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800f2a4:	dd6d      	ble.n	800f382 <__ieee754_powf+0x21e>
 800f2a6:	4b9a      	ldr	r3, [pc, #616]	; (800f510 <__ieee754_powf+0x3ac>)
 800f2a8:	429c      	cmp	r4, r3
 800f2aa:	dc06      	bgt.n	800f2ba <__ieee754_powf+0x156>
 800f2ac:	2d00      	cmp	r5, #0
 800f2ae:	daa9      	bge.n	800f204 <__ieee754_powf+0xa0>
 800f2b0:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800f514 <__ieee754_powf+0x3b0>
 800f2b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f2b8:	e7a6      	b.n	800f208 <__ieee754_powf+0xa4>
 800f2ba:	4b97      	ldr	r3, [pc, #604]	; (800f518 <__ieee754_powf+0x3b4>)
 800f2bc:	429c      	cmp	r4, r3
 800f2be:	dd02      	ble.n	800f2c6 <__ieee754_powf+0x162>
 800f2c0:	2d00      	cmp	r5, #0
 800f2c2:	dcf5      	bgt.n	800f2b0 <__ieee754_powf+0x14c>
 800f2c4:	e79e      	b.n	800f204 <__ieee754_powf+0xa0>
 800f2c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f2ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f2ce:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800f51c <__ieee754_powf+0x3b8>
 800f2d2:	eef1 6a40 	vneg.f32	s13, s0
 800f2d6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800f2da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f2de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f2e2:	eee7 7a40 	vfms.f32	s15, s14, s0
 800f2e6:	ee60 0a00 	vmul.f32	s1, s0, s0
 800f2ea:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800f520 <__ieee754_powf+0x3bc>
 800f2ee:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800f2f2:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800f524 <__ieee754_powf+0x3c0>
 800f2f6:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800f2fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f2fe:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800f528 <__ieee754_powf+0x3c4>
 800f302:	eeb0 6a67 	vmov.f32	s12, s15
 800f306:	eea0 6a07 	vfma.f32	s12, s0, s14
 800f30a:	ee16 3a10 	vmov	r3, s12
 800f30e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f312:	f023 030f 	bic.w	r3, r3, #15
 800f316:	ee00 3a90 	vmov	s1, r3
 800f31a:	eee6 0a87 	vfma.f32	s1, s13, s14
 800f31e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f322:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800f326:	f025 050f 	bic.w	r5, r5, #15
 800f32a:	ee07 5a10 	vmov	s14, r5
 800f32e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f332:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f336:	ee07 3a90 	vmov	s15, r3
 800f33a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f33e:	3e01      	subs	r6, #1
 800f340:	ea56 0200 	orrs.w	r2, r6, r0
 800f344:	ee07 5a10 	vmov	s14, r5
 800f348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f34c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f350:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f354:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f358:	ee17 4a10 	vmov	r4, s14
 800f35c:	bf08      	it	eq
 800f35e:	eeb0 8a40 	vmoveq.f32	s16, s0
 800f362:	2c00      	cmp	r4, #0
 800f364:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f368:	f340 8184 	ble.w	800f674 <__ieee754_powf+0x510>
 800f36c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800f370:	f340 80fc 	ble.w	800f56c <__ieee754_powf+0x408>
 800f374:	eddf 7a67 	vldr	s15, [pc, #412]	; 800f514 <__ieee754_powf+0x3b0>
 800f378:	ee28 0a27 	vmul.f32	s0, s16, s15
 800f37c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f380:	e742      	b.n	800f208 <__ieee754_powf+0xa4>
 800f382:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800f386:	bfbf      	itttt	lt
 800f388:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800f52c <__ieee754_powf+0x3c8>
 800f38c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f390:	f06f 0217 	mvnlt.w	r2, #23
 800f394:	ee17 4a90 	vmovlt	r4, s15
 800f398:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800f39c:	bfa8      	it	ge
 800f39e:	2200      	movge	r2, #0
 800f3a0:	3b7f      	subs	r3, #127	; 0x7f
 800f3a2:	4413      	add	r3, r2
 800f3a4:	4a62      	ldr	r2, [pc, #392]	; (800f530 <__ieee754_powf+0x3cc>)
 800f3a6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800f3aa:	4294      	cmp	r4, r2
 800f3ac:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800f3b0:	dd06      	ble.n	800f3c0 <__ieee754_powf+0x25c>
 800f3b2:	4a60      	ldr	r2, [pc, #384]	; (800f534 <__ieee754_powf+0x3d0>)
 800f3b4:	4294      	cmp	r4, r2
 800f3b6:	f340 80a5 	ble.w	800f504 <__ieee754_powf+0x3a0>
 800f3ba:	3301      	adds	r3, #1
 800f3bc:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f3c0:	2400      	movs	r4, #0
 800f3c2:	4a5d      	ldr	r2, [pc, #372]	; (800f538 <__ieee754_powf+0x3d4>)
 800f3c4:	00a7      	lsls	r7, r4, #2
 800f3c6:	443a      	add	r2, r7
 800f3c8:	ee07 1a90 	vmov	s15, r1
 800f3cc:	ed92 7a00 	vldr	s14, [r2]
 800f3d0:	4a5a      	ldr	r2, [pc, #360]	; (800f53c <__ieee754_powf+0x3d8>)
 800f3d2:	ee37 6a27 	vadd.f32	s12, s14, s15
 800f3d6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800f3da:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800f3de:	1049      	asrs	r1, r1, #1
 800f3e0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800f3e4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800f3e8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800f3ec:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800f3f0:	ee06 1a10 	vmov	s12, r1
 800f3f4:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800f3f8:	ee14 ca90 	vmov	ip, s9
 800f3fc:	ea02 0c0c 	and.w	ip, r2, ip
 800f400:	ee05 ca10 	vmov	s10, ip
 800f404:	eeb1 4a45 	vneg.f32	s8, s10
 800f408:	eee4 5a06 	vfma.f32	s11, s8, s12
 800f40c:	ee36 6a47 	vsub.f32	s12, s12, s14
 800f410:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800f540 <__ieee754_powf+0x3dc>
 800f414:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800f418:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800f41c:	eee4 5a06 	vfma.f32	s11, s8, s12
 800f420:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800f424:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800f428:	eddf 5a46 	vldr	s11, [pc, #280]	; 800f544 <__ieee754_powf+0x3e0>
 800f42c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800f430:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f548 <__ieee754_powf+0x3e4>
 800f434:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f438:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800f51c <__ieee754_powf+0x3b8>
 800f43c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f440:	eddf 5a42 	vldr	s11, [pc, #264]	; 800f54c <__ieee754_powf+0x3e8>
 800f444:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f448:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800f550 <__ieee754_powf+0x3ec>
 800f44c:	ee75 6a24 	vadd.f32	s13, s10, s9
 800f450:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f454:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f458:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800f45c:	eef0 7a65 	vmov.f32	s15, s11
 800f460:	eee3 6a87 	vfma.f32	s13, s7, s14
 800f464:	eee5 7a05 	vfma.f32	s15, s10, s10
 800f468:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f46c:	ee17 1a90 	vmov	r1, s15
 800f470:	4011      	ands	r1, r2
 800f472:	ee07 1a90 	vmov	s15, r1
 800f476:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800f47a:	eddf 5a36 	vldr	s11, [pc, #216]	; 800f554 <__ieee754_powf+0x3f0>
 800f47e:	eea4 7a05 	vfma.f32	s14, s8, s10
 800f482:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f486:	ee27 7a24 	vmul.f32	s14, s14, s9
 800f48a:	eea7 7a86 	vfma.f32	s14, s15, s12
 800f48e:	eeb0 6a47 	vmov.f32	s12, s14
 800f492:	eea5 6a27 	vfma.f32	s12, s10, s15
 800f496:	ee16 1a10 	vmov	r1, s12
 800f49a:	4011      	ands	r1, r2
 800f49c:	ee06 1a90 	vmov	s13, r1
 800f4a0:	eee4 6a27 	vfma.f32	s13, s8, s15
 800f4a4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800f558 <__ieee754_powf+0x3f4>
 800f4a8:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f4ac:	ee06 1a10 	vmov	s12, r1
 800f4b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4b4:	eddf 7a29 	vldr	s15, [pc, #164]	; 800f55c <__ieee754_powf+0x3f8>
 800f4b8:	4929      	ldr	r1, [pc, #164]	; (800f560 <__ieee754_powf+0x3fc>)
 800f4ba:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f4be:	4439      	add	r1, r7
 800f4c0:	edd1 7a00 	vldr	s15, [r1]
 800f4c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f4c8:	ee07 3a90 	vmov	s15, r3
 800f4cc:	eef0 0a47 	vmov.f32	s1, s14
 800f4d0:	4b24      	ldr	r3, [pc, #144]	; (800f564 <__ieee754_powf+0x400>)
 800f4d2:	eee6 0a25 	vfma.f32	s1, s12, s11
 800f4d6:	443b      	add	r3, r7
 800f4d8:	ed93 5a00 	vldr	s10, [r3]
 800f4dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f4e0:	ee70 0a85 	vadd.f32	s1, s1, s10
 800f4e4:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800f4e8:	ee17 3a90 	vmov	r3, s15
 800f4ec:	4013      	ands	r3, r2
 800f4ee:	ee07 3a90 	vmov	s15, r3
 800f4f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f4f6:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f4fa:	eee6 7a65 	vfms.f32	s15, s12, s11
 800f4fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f502:	e70e      	b.n	800f322 <__ieee754_powf+0x1be>
 800f504:	2401      	movs	r4, #1
 800f506:	e75c      	b.n	800f3c2 <__ieee754_powf+0x25e>
 800f508:	08010051 	.word	0x08010051
 800f50c:	00000000 	.word	0x00000000
 800f510:	3f7ffff7 	.word	0x3f7ffff7
 800f514:	7149f2ca 	.word	0x7149f2ca
 800f518:	3f800007 	.word	0x3f800007
 800f51c:	3eaaaaab 	.word	0x3eaaaaab
 800f520:	36eca570 	.word	0x36eca570
 800f524:	3fb8aa3b 	.word	0x3fb8aa3b
 800f528:	3fb8aa00 	.word	0x3fb8aa00
 800f52c:	4b800000 	.word	0x4b800000
 800f530:	001cc471 	.word	0x001cc471
 800f534:	005db3d6 	.word	0x005db3d6
 800f538:	08010174 	.word	0x08010174
 800f53c:	fffff000 	.word	0xfffff000
 800f540:	3e6c3255 	.word	0x3e6c3255
 800f544:	3e53f142 	.word	0x3e53f142
 800f548:	3e8ba305 	.word	0x3e8ba305
 800f54c:	3edb6db7 	.word	0x3edb6db7
 800f550:	3f19999a 	.word	0x3f19999a
 800f554:	3f763800 	.word	0x3f763800
 800f558:	3f76384f 	.word	0x3f76384f
 800f55c:	369dc3a0 	.word	0x369dc3a0
 800f560:	08010184 	.word	0x08010184
 800f564:	0801017c 	.word	0x0801017c
 800f568:	3338aa3c 	.word	0x3338aa3c
 800f56c:	f040 8092 	bne.w	800f694 <__ieee754_powf+0x530>
 800f570:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800f568 <__ieee754_powf+0x404>
 800f574:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f578:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f57c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f584:	f73f aef6 	bgt.w	800f374 <__ieee754_powf+0x210>
 800f588:	15db      	asrs	r3, r3, #23
 800f58a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800f58e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f592:	4103      	asrs	r3, r0
 800f594:	4423      	add	r3, r4
 800f596:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f59a:	4947      	ldr	r1, [pc, #284]	; (800f6b8 <__ieee754_powf+0x554>)
 800f59c:	3a7f      	subs	r2, #127	; 0x7f
 800f59e:	4111      	asrs	r1, r2
 800f5a0:	ea23 0101 	bic.w	r1, r3, r1
 800f5a4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800f5a8:	ee07 1a10 	vmov	s14, r1
 800f5ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800f5b0:	f1c2 0217 	rsb	r2, r2, #23
 800f5b4:	4110      	asrs	r0, r2
 800f5b6:	2c00      	cmp	r4, #0
 800f5b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f5bc:	bfb8      	it	lt
 800f5be:	4240      	neglt	r0, r0
 800f5c0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800f5c4:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f6bc <__ieee754_powf+0x558>
 800f5c8:	ee17 3a10 	vmov	r3, s14
 800f5cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f5d0:	f023 030f 	bic.w	r3, r3, #15
 800f5d4:	ee07 3a10 	vmov	s14, r3
 800f5d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f5dc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f5e0:	eddf 7a37 	vldr	s15, [pc, #220]	; 800f6c0 <__ieee754_powf+0x55c>
 800f5e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5e8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800f5ec:	eddf 6a35 	vldr	s13, [pc, #212]	; 800f6c4 <__ieee754_powf+0x560>
 800f5f0:	eeb0 0a67 	vmov.f32	s0, s15
 800f5f4:	eea7 0a26 	vfma.f32	s0, s14, s13
 800f5f8:	eeb0 6a40 	vmov.f32	s12, s0
 800f5fc:	eea7 6a66 	vfms.f32	s12, s14, s13
 800f600:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f604:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f608:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800f6c8 <__ieee754_powf+0x564>
 800f60c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800f6cc <__ieee754_powf+0x568>
 800f610:	eea7 6a26 	vfma.f32	s12, s14, s13
 800f614:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800f6d0 <__ieee754_powf+0x56c>
 800f618:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f61c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800f6d4 <__ieee754_powf+0x570>
 800f620:	eea6 6a87 	vfma.f32	s12, s13, s14
 800f624:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800f6d8 <__ieee754_powf+0x574>
 800f628:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f62c:	eeb0 6a40 	vmov.f32	s12, s0
 800f630:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800f634:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800f638:	eeb0 7a46 	vmov.f32	s14, s12
 800f63c:	ee77 6a66 	vsub.f32	s13, s14, s13
 800f640:	ee20 6a06 	vmul.f32	s12, s0, s12
 800f644:	eee0 7a27 	vfma.f32	s15, s0, s15
 800f648:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800f64c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f650:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f654:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f658:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f65c:	ee10 3a10 	vmov	r3, s0
 800f660:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800f664:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f668:	da1a      	bge.n	800f6a0 <__ieee754_powf+0x53c>
 800f66a:	f000 f98f 	bl	800f98c <scalbnf>
 800f66e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f672:	e5c9      	b.n	800f208 <__ieee754_powf+0xa4>
 800f674:	4a19      	ldr	r2, [pc, #100]	; (800f6dc <__ieee754_powf+0x578>)
 800f676:	4293      	cmp	r3, r2
 800f678:	dd02      	ble.n	800f680 <__ieee754_powf+0x51c>
 800f67a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800f6e0 <__ieee754_powf+0x57c>
 800f67e:	e67b      	b.n	800f378 <__ieee754_powf+0x214>
 800f680:	d108      	bne.n	800f694 <__ieee754_powf+0x530>
 800f682:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f686:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800f68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f68e:	f6ff af7b 	blt.w	800f588 <__ieee754_powf+0x424>
 800f692:	e7f2      	b.n	800f67a <__ieee754_powf+0x516>
 800f694:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800f698:	f73f af76 	bgt.w	800f588 <__ieee754_powf+0x424>
 800f69c:	2000      	movs	r0, #0
 800f69e:	e78f      	b.n	800f5c0 <__ieee754_powf+0x45c>
 800f6a0:	ee00 3a10 	vmov	s0, r3
 800f6a4:	e7e3      	b.n	800f66e <__ieee754_powf+0x50a>
 800f6a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f6aa:	e5ad      	b.n	800f208 <__ieee754_powf+0xa4>
 800f6ac:	eeb0 0a68 	vmov.f32	s0, s17
 800f6b0:	e5aa      	b.n	800f208 <__ieee754_powf+0xa4>
 800f6b2:	eeb0 0a48 	vmov.f32	s0, s16
 800f6b6:	e5a7      	b.n	800f208 <__ieee754_powf+0xa4>
 800f6b8:	007fffff 	.word	0x007fffff
 800f6bc:	3f317218 	.word	0x3f317218
 800f6c0:	35bfbe8c 	.word	0x35bfbe8c
 800f6c4:	3f317200 	.word	0x3f317200
 800f6c8:	3331bb4c 	.word	0x3331bb4c
 800f6cc:	b5ddea0e 	.word	0xb5ddea0e
 800f6d0:	388ab355 	.word	0x388ab355
 800f6d4:	bb360b61 	.word	0xbb360b61
 800f6d8:	3e2aaaab 	.word	0x3e2aaaab
 800f6dc:	43160000 	.word	0x43160000
 800f6e0:	0da24260 	.word	0x0da24260

0800f6e4 <__ieee754_sqrtf>:
 800f6e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f6e8:	4770      	bx	lr

0800f6ea <matherr>:
 800f6ea:	2000      	movs	r0, #0
 800f6ec:	4770      	bx	lr
	...

0800f6f0 <nan>:
 800f6f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f6f8 <nan+0x8>
 800f6f4:	4770      	bx	lr
 800f6f6:	bf00      	nop
 800f6f8:	00000000 	.word	0x00000000
 800f6fc:	7ff80000 	.word	0x7ff80000

0800f700 <atanf>:
 800f700:	b538      	push	{r3, r4, r5, lr}
 800f702:	ee10 5a10 	vmov	r5, s0
 800f706:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f70a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800f70e:	eef0 7a40 	vmov.f32	s15, s0
 800f712:	db10      	blt.n	800f736 <atanf+0x36>
 800f714:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f718:	dd04      	ble.n	800f724 <atanf+0x24>
 800f71a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800f71e:	eeb0 0a67 	vmov.f32	s0, s15
 800f722:	bd38      	pop	{r3, r4, r5, pc}
 800f724:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800f85c <atanf+0x15c>
 800f728:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800f860 <atanf+0x160>
 800f72c:	2d00      	cmp	r5, #0
 800f72e:	bfd8      	it	le
 800f730:	eef0 7a47 	vmovle.f32	s15, s14
 800f734:	e7f3      	b.n	800f71e <atanf+0x1e>
 800f736:	4b4b      	ldr	r3, [pc, #300]	; (800f864 <atanf+0x164>)
 800f738:	429c      	cmp	r4, r3
 800f73a:	dc10      	bgt.n	800f75e <atanf+0x5e>
 800f73c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800f740:	da0a      	bge.n	800f758 <atanf+0x58>
 800f742:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800f868 <atanf+0x168>
 800f746:	ee30 7a07 	vadd.f32	s14, s0, s14
 800f74a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f74e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f756:	dce2      	bgt.n	800f71e <atanf+0x1e>
 800f758:	f04f 33ff 	mov.w	r3, #4294967295
 800f75c:	e013      	b.n	800f786 <atanf+0x86>
 800f75e:	f000 f8a3 	bl	800f8a8 <fabsf>
 800f762:	4b42      	ldr	r3, [pc, #264]	; (800f86c <atanf+0x16c>)
 800f764:	429c      	cmp	r4, r3
 800f766:	dc4f      	bgt.n	800f808 <atanf+0x108>
 800f768:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800f76c:	429c      	cmp	r4, r3
 800f76e:	dc41      	bgt.n	800f7f4 <atanf+0xf4>
 800f770:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f774:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f778:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f77c:	2300      	movs	r3, #0
 800f77e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f782:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f786:	1c5a      	adds	r2, r3, #1
 800f788:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f78c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800f870 <atanf+0x170>
 800f790:	eddf 5a38 	vldr	s11, [pc, #224]	; 800f874 <atanf+0x174>
 800f794:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800f878 <atanf+0x178>
 800f798:	ee66 6a06 	vmul.f32	s13, s12, s12
 800f79c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800f7a0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800f87c <atanf+0x17c>
 800f7a4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f7a8:	eddf 5a35 	vldr	s11, [pc, #212]	; 800f880 <atanf+0x180>
 800f7ac:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f7b0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f884 <atanf+0x184>
 800f7b4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f7b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f888 <atanf+0x188>
 800f7bc:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f7c0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800f88c <atanf+0x18c>
 800f7c4:	eea6 5a87 	vfma.f32	s10, s13, s14
 800f7c8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800f890 <atanf+0x190>
 800f7cc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f7d0:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800f894 <atanf+0x194>
 800f7d4:	eea7 5a26 	vfma.f32	s10, s14, s13
 800f7d8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800f898 <atanf+0x198>
 800f7dc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f7e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f7e4:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f7e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f7ec:	d121      	bne.n	800f832 <atanf+0x132>
 800f7ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f7f2:	e794      	b.n	800f71e <atanf+0x1e>
 800f7f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f7f8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f7fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f800:	2301      	movs	r3, #1
 800f802:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f806:	e7be      	b.n	800f786 <atanf+0x86>
 800f808:	4b24      	ldr	r3, [pc, #144]	; (800f89c <atanf+0x19c>)
 800f80a:	429c      	cmp	r4, r3
 800f80c:	dc0b      	bgt.n	800f826 <atanf+0x126>
 800f80e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800f812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f816:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f81a:	2302      	movs	r3, #2
 800f81c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f824:	e7af      	b.n	800f786 <atanf+0x86>
 800f826:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f82a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f82e:	2303      	movs	r3, #3
 800f830:	e7a9      	b.n	800f786 <atanf+0x86>
 800f832:	4a1b      	ldr	r2, [pc, #108]	; (800f8a0 <atanf+0x1a0>)
 800f834:	491b      	ldr	r1, [pc, #108]	; (800f8a4 <atanf+0x1a4>)
 800f836:	009b      	lsls	r3, r3, #2
 800f838:	441a      	add	r2, r3
 800f83a:	440b      	add	r3, r1
 800f83c:	edd3 6a00 	vldr	s13, [r3]
 800f840:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f844:	2d00      	cmp	r5, #0
 800f846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f84a:	ed92 7a00 	vldr	s14, [r2]
 800f84e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f852:	bfb8      	it	lt
 800f854:	eef1 7a67 	vneglt.f32	s15, s15
 800f858:	e761      	b.n	800f71e <atanf+0x1e>
 800f85a:	bf00      	nop
 800f85c:	bfc90fdb 	.word	0xbfc90fdb
 800f860:	3fc90fdb 	.word	0x3fc90fdb
 800f864:	3edfffff 	.word	0x3edfffff
 800f868:	7149f2ca 	.word	0x7149f2ca
 800f86c:	3f97ffff 	.word	0x3f97ffff
 800f870:	3c8569d7 	.word	0x3c8569d7
 800f874:	3d4bda59 	.word	0x3d4bda59
 800f878:	bd6ef16b 	.word	0xbd6ef16b
 800f87c:	3d886b35 	.word	0x3d886b35
 800f880:	3dba2e6e 	.word	0x3dba2e6e
 800f884:	3e124925 	.word	0x3e124925
 800f888:	3eaaaaab 	.word	0x3eaaaaab
 800f88c:	bd15a221 	.word	0xbd15a221
 800f890:	bd9d8795 	.word	0xbd9d8795
 800f894:	bde38e38 	.word	0xbde38e38
 800f898:	be4ccccd 	.word	0xbe4ccccd
 800f89c:	401bffff 	.word	0x401bffff
 800f8a0:	0801018c 	.word	0x0801018c
 800f8a4:	0801019c 	.word	0x0801019c

0800f8a8 <fabsf>:
 800f8a8:	ee10 3a10 	vmov	r3, s0
 800f8ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f8b0:	ee00 3a10 	vmov	s0, r3
 800f8b4:	4770      	bx	lr

0800f8b6 <finitef>:
 800f8b6:	ee10 3a10 	vmov	r3, s0
 800f8ba:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800f8be:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800f8c2:	bfac      	ite	ge
 800f8c4:	2000      	movge	r0, #0
 800f8c6:	2001      	movlt	r0, #1
 800f8c8:	4770      	bx	lr
	...

0800f8cc <nanf>:
 800f8cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f8d4 <nanf+0x8>
 800f8d0:	4770      	bx	lr
 800f8d2:	bf00      	nop
 800f8d4:	7fc00000 	.word	0x7fc00000

0800f8d8 <rintf>:
 800f8d8:	b513      	push	{r0, r1, r4, lr}
 800f8da:	ee10 1a10 	vmov	r1, s0
 800f8de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f8e2:	0ddc      	lsrs	r4, r3, #23
 800f8e4:	3c7f      	subs	r4, #127	; 0x7f
 800f8e6:	2c16      	cmp	r4, #22
 800f8e8:	dc46      	bgt.n	800f978 <rintf+0xa0>
 800f8ea:	b32b      	cbz	r3, 800f938 <rintf+0x60>
 800f8ec:	2c00      	cmp	r4, #0
 800f8ee:	ee10 2a10 	vmov	r2, s0
 800f8f2:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800f8f6:	da21      	bge.n	800f93c <rintf+0x64>
 800f8f8:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800f8fc:	425b      	negs	r3, r3
 800f8fe:	4a21      	ldr	r2, [pc, #132]	; (800f984 <rintf+0xac>)
 800f900:	0a5b      	lsrs	r3, r3, #9
 800f902:	0d09      	lsrs	r1, r1, #20
 800f904:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f908:	0509      	lsls	r1, r1, #20
 800f90a:	430b      	orrs	r3, r1
 800f90c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f910:	ee07 3a90 	vmov	s15, r3
 800f914:	edd2 6a00 	vldr	s13, [r2]
 800f918:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800f91c:	ed8d 7a01 	vstr	s14, [sp, #4]
 800f920:	eddd 7a01 	vldr	s15, [sp, #4]
 800f924:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f928:	ee17 3a90 	vmov	r3, s15
 800f92c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f930:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800f934:	ee00 3a10 	vmov	s0, r3
 800f938:	b002      	add	sp, #8
 800f93a:	bd10      	pop	{r4, pc}
 800f93c:	4b12      	ldr	r3, [pc, #72]	; (800f988 <rintf+0xb0>)
 800f93e:	4123      	asrs	r3, r4
 800f940:	4219      	tst	r1, r3
 800f942:	d0f9      	beq.n	800f938 <rintf+0x60>
 800f944:	085b      	lsrs	r3, r3, #1
 800f946:	4219      	tst	r1, r3
 800f948:	d006      	beq.n	800f958 <rintf+0x80>
 800f94a:	ea21 0203 	bic.w	r2, r1, r3
 800f94e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f952:	fa43 f404 	asr.w	r4, r3, r4
 800f956:	4322      	orrs	r2, r4
 800f958:	4b0a      	ldr	r3, [pc, #40]	; (800f984 <rintf+0xac>)
 800f95a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f95e:	ed90 7a00 	vldr	s14, [r0]
 800f962:	ee07 2a90 	vmov	s15, r2
 800f966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f96a:	edcd 7a01 	vstr	s15, [sp, #4]
 800f96e:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f972:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f976:	e7df      	b.n	800f938 <rintf+0x60>
 800f978:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f97c:	d3dc      	bcc.n	800f938 <rintf+0x60>
 800f97e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f982:	e7d9      	b.n	800f938 <rintf+0x60>
 800f984:	080101ac 	.word	0x080101ac
 800f988:	007fffff 	.word	0x007fffff

0800f98c <scalbnf>:
 800f98c:	b508      	push	{r3, lr}
 800f98e:	ee10 2a10 	vmov	r2, s0
 800f992:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800f996:	ed2d 8b02 	vpush	{d8}
 800f99a:	eef0 0a40 	vmov.f32	s1, s0
 800f99e:	d004      	beq.n	800f9aa <scalbnf+0x1e>
 800f9a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f9a4:	d306      	bcc.n	800f9b4 <scalbnf+0x28>
 800f9a6:	ee70 0a00 	vadd.f32	s1, s0, s0
 800f9aa:	ecbd 8b02 	vpop	{d8}
 800f9ae:	eeb0 0a60 	vmov.f32	s0, s1
 800f9b2:	bd08      	pop	{r3, pc}
 800f9b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f9b8:	d21c      	bcs.n	800f9f4 <scalbnf+0x68>
 800f9ba:	4b1f      	ldr	r3, [pc, #124]	; (800fa38 <scalbnf+0xac>)
 800f9bc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800fa3c <scalbnf+0xb0>
 800f9c0:	4298      	cmp	r0, r3
 800f9c2:	ee60 0a27 	vmul.f32	s1, s0, s15
 800f9c6:	db10      	blt.n	800f9ea <scalbnf+0x5e>
 800f9c8:	ee10 2a90 	vmov	r2, s1
 800f9cc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800f9d0:	3b19      	subs	r3, #25
 800f9d2:	4403      	add	r3, r0
 800f9d4:	2bfe      	cmp	r3, #254	; 0xfe
 800f9d6:	dd0f      	ble.n	800f9f8 <scalbnf+0x6c>
 800f9d8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800fa40 <scalbnf+0xb4>
 800f9dc:	eeb0 0a48 	vmov.f32	s0, s16
 800f9e0:	f000 f834 	bl	800fa4c <copysignf>
 800f9e4:	ee60 0a08 	vmul.f32	s1, s0, s16
 800f9e8:	e7df      	b.n	800f9aa <scalbnf+0x1e>
 800f9ea:	eddf 7a16 	vldr	s15, [pc, #88]	; 800fa44 <scalbnf+0xb8>
 800f9ee:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f9f2:	e7da      	b.n	800f9aa <scalbnf+0x1e>
 800f9f4:	0ddb      	lsrs	r3, r3, #23
 800f9f6:	e7ec      	b.n	800f9d2 <scalbnf+0x46>
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	dd06      	ble.n	800fa0a <scalbnf+0x7e>
 800f9fc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800fa00:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800fa04:	ee00 3a90 	vmov	s1, r3
 800fa08:	e7cf      	b.n	800f9aa <scalbnf+0x1e>
 800fa0a:	f113 0f16 	cmn.w	r3, #22
 800fa0e:	da06      	bge.n	800fa1e <scalbnf+0x92>
 800fa10:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fa14:	4298      	cmp	r0, r3
 800fa16:	dcdf      	bgt.n	800f9d8 <scalbnf+0x4c>
 800fa18:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800fa44 <scalbnf+0xb8>
 800fa1c:	e7de      	b.n	800f9dc <scalbnf+0x50>
 800fa1e:	3319      	adds	r3, #25
 800fa20:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800fa24:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800fa28:	eddf 7a07 	vldr	s15, [pc, #28]	; 800fa48 <scalbnf+0xbc>
 800fa2c:	ee07 3a10 	vmov	s14, r3
 800fa30:	ee67 0a27 	vmul.f32	s1, s14, s15
 800fa34:	e7b9      	b.n	800f9aa <scalbnf+0x1e>
 800fa36:	bf00      	nop
 800fa38:	ffff3cb0 	.word	0xffff3cb0
 800fa3c:	4c000000 	.word	0x4c000000
 800fa40:	7149f2ca 	.word	0x7149f2ca
 800fa44:	0da24260 	.word	0x0da24260
 800fa48:	33000000 	.word	0x33000000

0800fa4c <copysignf>:
 800fa4c:	ee10 3a10 	vmov	r3, s0
 800fa50:	ee10 2a90 	vmov	r2, s1
 800fa54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fa58:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800fa5c:	4313      	orrs	r3, r2
 800fa5e:	ee00 3a10 	vmov	s0, r3
 800fa62:	4770      	bx	lr

0800fa64 <_init>:
 800fa64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa66:	bf00      	nop
 800fa68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa6a:	bc08      	pop	{r3}
 800fa6c:	469e      	mov	lr, r3
 800fa6e:	4770      	bx	lr

0800fa70 <_fini>:
 800fa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa72:	bf00      	nop
 800fa74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa76:	bc08      	pop	{r3}
 800fa78:	469e      	mov	lr, r3
 800fa7a:	4770      	bx	lr
